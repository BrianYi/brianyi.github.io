<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brian&#39;s Home</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brianyi.github.io/"/>
  <updated>2020-02-05T05:00:52.577Z</updated>
  <id>https://brianyi.github.io/</id>
  
  <author>
    <name>Brian Yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Windows编程]第9章 子窗口控件</title>
    <link href="https://brianyi.github.io/posts/17ae1cbc/"/>
    <id>https://brianyi.github.io/posts/17ae1cbc/</id>
    <published>2020-02-05T02:58:01.000Z</published>
    <updated>2020-02-05T05:00:52.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    hId = LOWORD(wParam);</span><br><span class="line">    HWND childHwnd = GetDlgItem(hwnd, hId);</span><br><span class="line">    <span class="keyword">if</span> (HIWORD(wParam) == BN_CLICKED)</span><br><span class="line">        [控件单击处理]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (HIWORD(wParam) == BN_DBLCLK)</span><br><span class="line">        [控件双击处理]</span><br></pre></td></tr></table></figure><p>子窗口控件发送WM_COMMAND消息给其父窗口,LOWORD(wParam)获取子窗口ID,HIWORD(wParam)获取notify消息码(通知码)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * User Button Notification Codes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_CLICKED          0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_PAINT            1   <span class="comment">// 过时,已经被BS_OWNERDRAW和另外一套通知机制所取代</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_HILITE           2   <span class="comment">// 过时,已经被BS_OWNERDRAW和另外一套通知机制所取代</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_UNHILITE         3   <span class="comment">// 过时,已经被BS_OWNERDRAW和另外一套通知机制所取代</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_DISABLE          4   <span class="comment">// 过时,已经被BS_OWNERDRAW和另外一套通知机制所取代</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_DOUBLECLICKED    5   <span class="comment">// 只用于BS_RADIOBUTTON,BS_AUTORADIOBUTTON,BS_OWNERDRAW或是按钮样式包含BS_NOTIFY的其他按钮</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(WINVER &gt;= 0x0400)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_PUSHED           BN_HILITE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_UNPUSHED         BN_UNHILITE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_DBLCLK           BN_DOUBLECLICKED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_SETFOCUS         6   <span class="comment">// 仅当按钮样式包含BS_NOTIFY时才会发送</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BN_KILLFOCUS        7   <span class="comment">// 仅当按钮样式包含BS_NOTIFY时才会发送</span></span></span><br></pre></td></tr></table></figure><img src="/posts/17ae1cbc/2020020512520040.png"><p>通知码1~4用于过时的按钮样式BS_USERBUTTON(它已经被BS_OWNERDRAW和另外一套通知机制所取代),通知码6和7仅当按钮样式包含BS_NOTIFY标志才会被发送.</p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解题思路&quot;&gt;&lt;/a&gt; 解题思路&lt;/h1&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[内存]内存泄露检测</title>
    <link href="https://brianyi.github.io/posts/5a588e23/"/>
    <id>https://brianyi.github.io/posts/5a588e23/</id>
    <published>2020-02-04T14:14:50.000Z</published>
    <updated>2020-02-04T15:29:31.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h1><p>在stdafx.h文件尾加入下面代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdafx.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRTDBG_MAP_ALLOC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;crtdbg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> new new(_NORMAL_BLOCK, __FILE__, __LINE__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>上述代码在开启DEBUG模式下,会自动进行内存泄露检测</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">q = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">_CrtDumpMemoryLeaks();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序结束的位置要调用_CrtDumpMemoryLeaks().<br>效果如下</p><img src="/posts/5a588e23/2020013114584433.gif"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h1 id=&quot;方法一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#方法一&quot;&gt;&lt;/a&gt; 方法一&lt;/h1&gt;
&lt;p&gt;在stdafx.h文件尾加入下面代码&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="内存" scheme="https://brianyi.github.io/categories/%E5%86%85%E5%AD%98/"/>
    
    
      <category term="内存" scheme="https://brianyi.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第8章 计时器</title>
    <link href="https://brianyi.github.io/posts/aef11d37/"/>
    <id>https://brianyi.github.io/posts/aef11d37/</id>
    <published>2020-02-04T02:20:34.000Z</published>
    <updated>2020-02-05T02:57:21.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="81-计时器的基本知识"><a class="markdownIt-Anchor" href="#81-计时器的基本知识"></a> 8.1 计时器的基本知识</h2><p>可以调用SetTimer函数为程序分配一个计时器.SetTimer包含一个无符号整型参数,表示时间间隔毫秒,这个参数也表示Windows给程序发送WM_TIMER消息的频率.<br><strong>计时器消息不是异步的,WM_TIMER消息被放在正常的消息队列中,并和其他的消息一同排队等候处理.因此,如果你的程序一直处于忙碌的状态,它就会在那个时间内得不到任何WM_TIMER消息.因为WM_TIMER和WM_PAINT很类似,都是低优先级,只有当消息队列中没有其他消息时,程序才会收到它们.</strong><br>Windows把在消息队列里的多个WM_TIMER消息结合成一条消息.这样,应用程序不会同时收到大量的WM_TIMER消息,尽管它可能会收到考得很近的两个WM_TIMER消息.<br><code>请记住,给计时器设定的时间并不是精确的时钟滴答中断.</code></p><h2 id="82-使用计时器的三种方法"><a class="markdownIt-Anchor" href="#82-使用计时器的三种方法"></a> 8.2 使用计时器的三种方法</h2><h3 id="821-方法一"><a class="markdownIt-Anchor" href="#821-方法一"></a> 8.2.1 方法一</h3><p>这个方法是让Windows将WM_TIMER消息发送给窗口过程来处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID_TIMER 1</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    SetTimer(hwnd, ID_TIMER, uiMsecInterval, <span class="literal">NULL</span>);    <span class="comment">// 第二个参数是设置的计时器ID(不能为0)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">case</span> WM_TIMER:  <span class="comment">// 每uiMsecInterval毫秒会触发一次(不精确,有可能因为系统忙碌而迟迟不触发)</span></span><br><span class="line">    [处理计时器操作]</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    KillTimer(hwnd, ID_TIMER); <span class="comment">// 终止ID为1的计时器</span></span><br><span class="line">    PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="822-方法二"><a class="markdownIt-Anchor" href="#822-方法二"></a> 8.2.2 方法二</h3><p>这个方法是让Windows将WM_TIMER消息发送给计时器的回调函数来处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID_TIMER 1</span></span><br><span class="line"><span class="function">VOID CALLBACK <span class="title">TimerProc</span><span class="params">(HWND hwnd, UINT message, UINT iTimerID, DWORD dwTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    [处理计时器操作]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    SetTimer(hwnd, ID_TIMER, uiMsecInterval, TimerProc);</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    KillTimer(hwnd, ID_TIMER);</span><br><span class="line">    PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="823-方法三"><a class="markdownIt-Anchor" href="#823-方法三"></a> 8.2.3 方法三</h3><p>这个方法比较少用,如果在程序中需要在不同的时刻调用很多次SetTimer,但又不想记录哪些计时器ID已经被使用过,那么这种方法可能会派上用场.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iTimerID = SetTimer(<span class="literal">NULL</span>, <span class="number">0</span>, uiMsecInterval, TimerProc);</span><br><span class="line">KillTimer(<span class="literal">NULL</span>, iTimerID);</span><br></pre></td></tr></table></figure><h2 id="综合运用"><a class="markdownIt-Anchor" href="#综合运用"></a> 综合运用</h2><p>以下代码将实现一个LED电子时钟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayDigit</span><span class="params">(HDC hdc, <span class="keyword">int</span> iNumber)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> BOOLfSevenSegment[<span class="number">10</span>][<span class="number">7</span>] = &#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,     <span class="comment">// 0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,     <span class="comment">// 1</span></span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>,     <span class="comment">// 2</span></span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,     <span class="comment">// 3</span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,     <span class="comment">// 4</span></span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,     <span class="comment">// 5</span></span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,     <span class="comment">// 6</span></span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,     <span class="comment">// 7</span></span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,     <span class="comment">// 8</span></span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> <span class="comment">// 9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//*******************************</span></span><br><span class="line"><span class="comment">//   _</span></span><br><span class="line"><span class="comment">//|_| =&gt; 7笔,构成LED显示结构</span></span><br><span class="line"><span class="comment">//|_|</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  00:00:00 =&gt; 6个位置</span></span><br><span class="line"><span class="keyword">static</span> POINT ptSegment[<span class="number">7</span>][<span class="number">6</span>] = &#123;</span><br><span class="line"><span class="number">7</span>,   <span class="number">6</span>,  <span class="number">11</span>,  <span class="number">2</span>,  <span class="number">31</span>,  <span class="number">2</span>,  <span class="number">35</span>,  <span class="number">6</span>,  <span class="number">31</span>, <span class="number">10</span>,  <span class="number">11</span>, <span class="number">10</span>,    <span class="comment">//  _</span></span><br><span class="line"><span class="number">6</span>,   <span class="number">7</span>,  <span class="number">10</span>, <span class="number">11</span>,  <span class="number">10</span>, <span class="number">31</span>,   <span class="number">6</span>, <span class="number">35</span>,   <span class="number">2</span>, <span class="number">31</span>,   <span class="number">2</span>, <span class="number">11</span>,    <span class="comment">// |</span></span><br><span class="line"><span class="number">36</span>,  <span class="number">7</span>,  <span class="number">40</span>, <span class="number">11</span>,  <span class="number">40</span>, <span class="number">31</span>,  <span class="number">36</span>, <span class="number">35</span>,  <span class="number">32</span>, <span class="number">31</span>,  <span class="number">32</span>, <span class="number">11</span>,    <span class="comment">//   |</span></span><br><span class="line"><span class="number">7</span>,  <span class="number">36</span>,  <span class="number">11</span>, <span class="number">32</span>,  <span class="number">31</span>, <span class="number">32</span>,  <span class="number">35</span>, <span class="number">36</span>,  <span class="number">31</span>, <span class="number">40</span>,  <span class="number">11</span>, <span class="number">40</span>,    <span class="comment">//  _</span></span><br><span class="line"><span class="number">6</span>,  <span class="number">37</span>,  <span class="number">10</span>, <span class="number">41</span>,  <span class="number">10</span>, <span class="number">61</span>,   <span class="number">6</span>, <span class="number">65</span>,   <span class="number">2</span>, <span class="number">61</span>,   <span class="number">2</span>, <span class="number">41</span>,    <span class="comment">// |</span></span><br><span class="line"><span class="number">36</span>, <span class="number">37</span>,  <span class="number">40</span>, <span class="number">41</span>,  <span class="number">40</span>, <span class="number">61</span>,  <span class="number">36</span>, <span class="number">65</span>,  <span class="number">32</span>, <span class="number">61</span>,  <span class="number">32</span>, <span class="number">41</span>,    <span class="comment">//   |</span></span><br><span class="line"><span class="number">7</span>,  <span class="number">66</span>,  <span class="number">11</span>, <span class="number">62</span>,  <span class="number">31</span>, <span class="number">62</span>,  <span class="number">35</span>, <span class="number">66</span>,  <span class="number">31</span>, <span class="number">70</span>,  <span class="number">11</span>, <span class="number">70</span>     <span class="comment">//  _</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> iSeg;</span><br><span class="line"><span class="comment">// 绘制iNumber</span></span><br><span class="line"><span class="keyword">for</span> (iSeg = <span class="number">0</span>; iSeg &lt; <span class="number">7</span>; iSeg++) &#123;</span><br><span class="line"><span class="keyword">if</span> (fSevenSegment[iNumber][iSeg]) &#123;</span><br><span class="line">Polygon(hdc, ptSegment[iSeg], <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayTwoDigits</span><span class="params">(HDC hdc, <span class="keyword">int</span> iNumber, BOOL fSuppress)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!fSuppress || (iNumber / <span class="number">10</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">DisplayDigit(hdc, iNumber / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OffsetWindowOrgEx(hdc, <span class="number">-42</span>, <span class="number">0</span>, <span class="literal">NULL</span>);<span class="comment">// 逻辑坐标系左移(视口原点位置不变),那么原来的逻辑坐标横轴都变大了</span></span><br><span class="line">DisplayDigit(hdc, iNumber % <span class="number">10</span>);</span><br><span class="line">OffsetWindowOrgEx(hdc, <span class="number">-42</span>, <span class="number">0</span>, <span class="literal">NULL</span>);<span class="comment">// 逻辑坐标系左移(视口原点位置不变),那么原来的逻辑坐标横轴都变大了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayColon</span><span class="params">(HDC hdc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">POINT ptColon[<span class="number">2</span>][<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">2</span>,  <span class="number">21</span>,  <span class="number">6</span>,  <span class="number">17</span>,  <span class="number">10</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">25</span>,</span><br><span class="line"><span class="number">2</span>,  <span class="number">51</span>,  <span class="number">6</span>,  <span class="number">47</span>,  <span class="number">10</span>, <span class="number">51</span>,  <span class="number">6</span>, <span class="number">55</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Polygon(hdc, ptColon[<span class="number">0</span>], <span class="number">4</span>);</span><br><span class="line">Polygon(hdc, ptColon[<span class="number">1</span>], <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">OffsetWindowOrgEx(hdc, <span class="number">-12</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayTime</span><span class="params">(HDC hdc, BOOL f24Hour, BOOL fSuppress)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SYSTEMTIMEst;</span><br><span class="line"></span><br><span class="line">GetLocalTime(&amp;st);<span class="comment">// 获取本地时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制小时</span></span><br><span class="line"><span class="keyword">if</span> (f24Hour) &#123;</span><br><span class="line">DisplayTwoDigits(hdc, st.wHour, fSuppress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">DisplayTwoDigits(hdc, (st.wHour %= <span class="number">12</span>) ? st.wHour : <span class="number">12</span>, fSuppress);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DisplayColon(hdc);<span class="comment">// 绘制冒号</span></span><br><span class="line">DisplayTwoDigits(hdc, st.wMinute, FALSE);<span class="comment">// 绘制分</span></span><br><span class="line">DisplayColon(hdc);<span class="comment">// 绘制冒号</span></span><br><span class="line">DisplayTwoDigits(hdc, st.wSecond, FALSE);<span class="comment">// 绘制秒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> BOOLf24Hour, fSuppress;</span><br><span class="line"><span class="keyword">static</span> HBRUSHhBrushRed;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>cxClient, cyClient;</span><br><span class="line">HDChdc;</span><br><span class="line">PAINTSTRUCTps;</span><br><span class="line">TCHARszBuffer[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">hBrushRed = CreateSolidBrush(RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">SetTimer(hwnd, ID_TIMER, <span class="number">1000</span>, <span class="literal">NULL</span>);<span class="comment">// 设置计时器,每秒(不精确,也可能是989毫秒)Windows向窗口过程发送一次WM_TIMER</span></span><br><span class="line"><span class="keyword">case</span> WM_SETTINGCHANGE:</span><br><span class="line"><span class="comment">//*******************************</span></span><br><span class="line"><span class="comment">// 是否为24小时制</span></span><br><span class="line"><span class="comment">//0: AM/PM 12-hour format</span></span><br><span class="line"><span class="comment">//1: 24-hour format</span></span><br><span class="line">GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_ITIME, szBuffer, <span class="number">2</span>);</span><br><span class="line">f24Hour = (szBuffer[<span class="number">0</span>] == <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//*******************************</span></span><br><span class="line"><span class="comment">// 是否时间格式含有前导0</span></span><br><span class="line"><span class="comment">//0: No leading zeros for hours</span></span><br><span class="line"><span class="comment">//1: Leading zeros for hours</span></span><br><span class="line">GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_ITLZERO, szBuffer, <span class="number">2</span>);</span><br><span class="line">fSuppress = (szBuffer[<span class="number">0</span>] == <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">cxClient = LOWORD(lParam);</span><br><span class="line">cyClient = HIWORD(lParam);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_TIMER:</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">SetMapMode(hdc, MM_ISOTROPIC);<span class="comment">// 长宽尺度不变,这三行代码顺序不变</span></span><br><span class="line">SetWindowExtEx(hdc, <span class="number">276</span>, <span class="number">72</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, cxClient, cyClient, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">SetWindowOrgEx(hdc, <span class="number">276</span> / <span class="number">2</span>, <span class="number">72</span> / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">2</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">SelectObject(hdc, GetStockObject(NULL_PEN));</span><br><span class="line">SelectObject(hdc, hBrushRed);</span><br><span class="line"></span><br><span class="line">DisplayTime(hdc, f24Hour, fSuppress);</span><br><span class="line"></span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">KillTimer(hwnd, ID_TIMER);</span><br><span class="line">DeleteObject(hBrushRed);</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是程序运行效果图</p><img src="/posts/aef11d37/2020013114584431.gif"><p>上面用到了GetSystemTime,GetLocalTime<br>GetSystemTime用于获取UTC时间,GetLocalTime用于获取本地时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SYSTEMTIMEst;</span><br><span class="line">GetLocalTime(&amp;st);  <span class="comment">// 获取本地时间</span></span><br><span class="line">GetSystemTime(&amp;st); <span class="comment">// 获取UTC时间</span></span><br></pre></td></tr></table></figure><p>关于OffsetWindowOrgEx函数的理解可以结合下面的公式来研究<br><strong>视口是以设备坐标(像素)的形式指定的.窗口时以逻辑坐标的形式指定的,可能是像素、毫米、英寸等.</strong><br>将窗口(逻辑)坐标转换为视口(设备)坐标</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi><mo>−</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi><mo>−</mo><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}    xViewport &amp;= (xWindow - xWinOrg)\times\frac{xViewExt}{xWinExt} + xViewOrg\\    yViewport &amp;= (yWindow - yWinOrg)\times\frac{yViewExt}{yWinExt} + yViewOrg\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8871em;vertical-align:-2.19355em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>将视口(设备)坐标转换为窗口(逻辑)坐标<code>(由上式推出来即可)</code></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo>−</mo><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo>−</mo><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}    xWindow &amp;= (xViewport - xViewOrg)\times\frac{xWinExt}{xViewExt} + xWinOrg\\    yWindow &amp;= (yViewport - yViewOrg)\times\frac{yWinExt}{yViewExt} + yWinOrg\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8871em;vertical-align:-2.19355em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>代码OffsetWindowOrgEx(hdc, -42, 0, NULL)将逻辑坐标原点左移42个单位,那么对于新的坐标计算,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi><mo>−</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">xWindow-xWinOrg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>就会变得比原来大42个单位,也就是相当于新的逻辑坐标的横坐标都间接右移了42个单位</p><h2 id="综合运用-2"><a class="markdownIt-Anchor" href="#综合运用-2"></a> 综合运用</h2><p>下面实现一个鼠标取色的软件,即获取鼠标指针当前所指的热点的RGB颜色</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID_TIMER    1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindWindowSize</span> <span class="params">(<span class="keyword">int</span> *, <span class="keyword">int</span> *)</span> </span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span> <span class="params">(HWND, UINT, WPARAM, LPARAM)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span> <span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">PSTR szCmdLine, <span class="keyword">int</span> iCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> TCHAR szAppName[] = TEXT (<span class="string">"WhatClr"</span>) ;</span><br><span class="line">HWND         hwnd ;</span><br><span class="line"><span class="keyword">int</span>          cxWindow, cyWindow ;</span><br><span class="line">MSG          msg ;</span><br><span class="line">WNDCLASS     wndclass ;</span><br><span class="line"></span><br><span class="line">wndclass.style         = CS_HREDRAW | CS_VREDRAW ;</span><br><span class="line">wndclass.lpfnWndProc   = WndProc ;</span><br><span class="line">wndclass.cbClsExtra    = <span class="number">0</span> ;</span><br><span class="line">wndclass.cbWndExtra    = <span class="number">0</span> ;</span><br><span class="line">wndclass.hInstance     = hInstance ;</span><br><span class="line">wndclass.hIcon         = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION) ;</span><br><span class="line">wndclass.hCursor       = LoadCursor (<span class="literal">NULL</span>, IDC_ARROW) ;</span><br><span class="line">wndclass.hbrBackground = (HBRUSH) GetStockObject (WHITE_BRUSH) ;</span><br><span class="line">wndclass.lpszMenuName  = <span class="literal">NULL</span> ;</span><br><span class="line">wndclass.lpszClassName = szAppName ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!RegisterClass (&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox (<span class="literal">NULL</span>, TEXT (<span class="string">"This program requires Windows NT!"</span>),</span><br><span class="line">szAppName, MB_ICONERROR) ;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FindWindowSize (&amp;cxWindow, &amp;cyWindow) ;</span><br><span class="line"></span><br><span class="line">hwnd = CreateWindow (szAppName, TEXT (<span class="string">"What Color"</span>),</span><br><span class="line">WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_BORDER,    <span class="comment">// 这里与以往WS_OVERLAPPEDWINDOW不同</span></span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line">cxWindow, cyWindow, <span class="comment">// 固定窗口大小</span></span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>) ;</span><br><span class="line"></span><br><span class="line">ShowWindow (hwnd, iCmdShow) ;</span><br><span class="line">UpdateWindow (hwnd) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (GetMessage (&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">TranslateMessage (&amp;msg) ;</span><br><span class="line">DispatchMessage (&amp;msg) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg.wParam ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindWindowSize</span> <span class="params">(<span class="keyword">int</span> * pcxWindow, <span class="keyword">int</span> * pcyWindow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HDChdcScreen;</span><br><span class="line">TEXTMETRICtm;</span><br><span class="line"><span class="comment">//*******************************</span></span><br><span class="line"><span class="comment">// Create an Information Context for the specified device</span></span><br><span class="line">hdcScreen= CreateIC(TEXT(<span class="string">"DISPLAY"</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">GetTextMetrics(hdcScreen, &amp;tm);</span><br><span class="line">DeleteDC(hdcScreen);</span><br><span class="line"></span><br><span class="line">*pcxWindow= <span class="number">2</span> * GetSystemMetrics(SM_CXBORDER) + <span class="number">12</span> * tm.tmAveCharWidth;</span><br><span class="line">*pcyWindow= <span class="number">2</span> * GetSystemMetrics(SM_CYBORDER) + GetSystemMetrics(SM_CYCAPTION) + <span class="number">2</span> * tm.tmHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span> <span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> COLORREFcr, crLast;</span><br><span class="line"><span class="keyword">static</span> HDChdcScreen;</span><br><span class="line">HDChdc;</span><br><span class="line">PAINTSTRUCTps;</span><br><span class="line">POINTpt;</span><br><span class="line">RECTrc;</span><br><span class="line">TCHARszBuffer[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (message) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">hdcScreen= CreateDC(TEXT(<span class="string">"DISPLAY"</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetTimer(hwnd, ID_TIMER, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DISPLAYCHANGE:</span><br><span class="line">DeleteDC(hdcScreen);</span><br><span class="line">hdcScreen= CreateDC(TEXT(<span class="string">"DISPLAY"</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_TIMER:</span><br><span class="line">GetCursorPos(&amp;pt);</span><br><span class="line">cr= GetPixel(hdcScreen, pt.x, pt.y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cr != crLast) &#123;</span><br><span class="line">crLast= cr;</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">hdc= BeginPaint(hwnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">GetClientRect(hwnd, &amp;rc);</span><br><span class="line"></span><br><span class="line">wsprintf(szBuffer, TEXT(<span class="string">"  %02X %02X %02X  "</span>),</span><br><span class="line">GetRValue(cr), GetGValue(cr), GetBValue(cr));</span><br><span class="line"></span><br><span class="line">DrawText(hdc, szBuffer, <span class="number">-1</span>, &amp;rc, DT_SINGLELINE | DT_CENTER | DT_VCENTER);</span><br><span class="line"></span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">DeleteDC(hdcScreen);</span><br><span class="line">KillTimer(hwnd, ID_TIMER);</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/aef11d37/2020013114584434.gif"><p>这个例子展示了CreateIC,GetPixel的用法,要注意的是,对于颜色分量的获取是用宏GetRValue,GetGValue,GetBValue</p><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h2 id=&quot;81-计时器的基本知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#81-计时器的基本知识&quot;&gt;&lt;/a&gt; 8.1 计时器的基本知识&lt;/h2&gt;
&lt;p&gt;可以调用SetTimer函数为程序分配一个计时器.SetTimer包含一个无符号整型参
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第7章 鼠标</title>
    <link href="https://brianyi.github.io/posts/288466a6/"/>
    <id>https://brianyi.github.io/posts/288466a6/</id>
    <published>2020-02-02T08:42:49.000Z</published>
    <updated>2020-02-05T04:35:42.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="71-鼠标的基础知识"><a class="markdownIt-Anchor" href="#71-鼠标的基础知识"></a> 7.1 鼠标的基础知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fMouse = GetSystemMetrics(SM_MOUSEPRESENT);     <span class="comment">// 是否连接了鼠标</span></span><br><span class="line">cButtons = GetSystemMetrics(SM_CMOUSEBUTTONS);  <span class="comment">// 获取鼠标按键数</span></span><br></pre></td></tr></table></figure><p>通过调用SystemParametersInfo可以获取或设定鼠标的参数</p><h3 id="711-一些基本术语"><a class="markdownIt-Anchor" href="#711-一些基本术语"></a> 7.1.1 一些基本术语</h3><p>鼠标具有一个单像素精度的&quot;热点&quot;(hot spot),热点在显示设备上指示了一个精确的位置(<strong>箭头的顶点即为热点</strong>).当我提到屏幕上鼠标指针的位置时,实际上是指热点的位置.</p><h2 id="72-客户区鼠标消息"><a class="markdownIt-Anchor" href="#72-客户区鼠标消息"></a> 7.2 客户区鼠标消息</h2><img src="/posts/288466a6/2020020217045234.png"><p>所以上所有消息,参数wParam表示鼠标按钮,lParam包含了鼠标的位置信息,x=LOWORD(lParam),y=HIWORD(lParam)<br>WM_MOUSEMOVE消息会在鼠标进入客户区时不断触发,wParam包含一些了虚拟键</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line">    <span class="keyword">if</span> (wParam &amp; MK_LBUTTON)        <span class="comment">// 表示鼠标在客户区内按下了左键</span></span><br><span class="line">        [<span class="keyword">do</span> other things]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (wParam &amp; MK_SHIFT)     <span class="comment">// 表示鼠标在客户区内时,按下了Shift键</span></span><br><span class="line">        [<span class="keyword">do</span> other things]</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (wParam &amp; MK_CONTROL)   <span class="comment">// 表示鼠标在客户区内时,按下了Ctrl键</span></span><br><span class="line">        [<span class="keyword">do</span> other things]</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">    <span class="keyword">if</span> (wParam &amp; MK_SHIFT)  <span class="comment">// 表示按下鼠标左键的同时按下了Shift键</span></span><br><span class="line">        [<span class="keyword">do</span> other things]</span><br></pre></td></tr></table></figure><p>可以使用GetKeyState后来返回当前鼠标或键盘的状态.</p><h3 id="723-鼠标双击"><a class="markdownIt-Anchor" href="#723-鼠标双击"></a> 7.2.3 鼠标双击</h3><p>如果想让窗口过程接收鼠标双击消息WM_LBUTTONDBLCLK,WM_RBUTTONDBLCLK,那么需要如下设置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;</span><br></pre></td></tr></table></figure><p>那么双击会收到如下消息<br>WM_LBUTTONDOWN<br>WM_LBUTTONUP<br>WM_LBUTTONDBLCLK<br>WM_LBUTTONUP</p><h2 id="73-非客户区鼠标消息"><a class="markdownIt-Anchor" href="#73-非客户区鼠标消息"></a> 7.3 非客户区鼠标消息</h2><p>窗口的非客户区包括<strong>标题栏、菜单和窗口滚动条</strong></p><img src="/posts/288466a6/2020020218150835.png"><p>非客户区鼠标消息的参数wParam和lParam与客户区鼠标消息的参数有些不同.<br>x=LOWORD(lParam),y=HIWORD(lParam),表示<strong>屏幕坐标</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ScreenToClient(hwnd, &amp;pt);  <span class="comment">// 屏幕坐标转为客户区坐标</span></span><br><span class="line">ClientToScreen(hwnd, &amp;pt);  <span class="comment">// 客户区坐标转为屏幕坐标</span></span><br></pre></td></tr></table></figure><h3 id="731-击中测试消息"><a class="markdownIt-Anchor" href="#731-击中测试消息"></a> 7.3.1 击中测试消息</h3><p><code>没有完全明白~_~</code><br>WM_NCHITTEST表示&quot;非客户区集中测试&quot;(nonclient hit test)<br>这个消息优先级高于其他所有的客户区和非客户区鼠标消息.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_NCHITTEST:  <span class="comment">// 使所有系统键盘函数失效</span></span><br><span class="line">    <span class="keyword">return</span> (LRESULT)HTNOWHERE;</span><br></pre></td></tr></table></figure><h3 id="743-使用键盘模仿鼠标操作"><a class="markdownIt-Anchor" href="#743-使用键盘模仿鼠标操作"></a> 7.4.3 使用键盘模仿鼠标操作</h3><p>Windows为鼠标指针保留了一个&quot;显示计数&quot;(display count).<br>若安装了鼠标,则显示计数初始值为0,否则为-1.只有当显示计数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时,系统才显示鼠标指针.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ShowCursor(TRUE);   <span class="comment">// 增加显示计数</span></span><br><span class="line">ShowCursor(False);  <span class="comment">// 减少显示计数</span></span><br><span class="line">GetCursorPos(&amp;pt);  <span class="comment">// 获取鼠标位置(屏幕坐标,因为没有hwnd参数,ScreenToClient可以转化为客户区坐标)</span></span><br><span class="line">SetCursorPost(x,y); <span class="comment">// 设定鼠标位置(屏幕坐标,因为没有hwnd参数,ClientToScreen可以转化为屏幕坐标)</span></span><br></pre></td></tr></table></figure><h3 id="747-子窗口和键盘"><a class="markdownIt-Anchor" href="#747-子窗口和键盘"></a> 7.4.7 子窗口和键盘</h3><p>下面代码是一个普遍的包含子窗口的代码的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">ChildWndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line">TCHAR szAppName[] = TEXT(<span class="string">"Main Window"</span>);</span><br><span class="line">TCHAR szChildClass[] = TEXT(<span class="string">"Child Window"</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 主窗口类注册</span></span><br><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">wndclass.lpfnWndProc = WndProc;</span><br><span class="line">wndclass.cbClsExtra = wndclass.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wndclass.hInstance = hInstance;</span><br><span class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">wndclass.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.lpszClassName = szAppName;</span><br><span class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="comment">// 子窗口类注册(这里简单重用了主窗口类的数据,只是做了简单修改)</span></span><br><span class="line">wndclass.lpfnWndProc = ChildWndProc;</span><br><span class="line">wndclass.cbWndExtra = <span class="keyword">sizeof</span>(LONG); <span class="comment">// 每个子窗口多分配sizeof(LONG)字节的空间,作为保留空间</span></span><br><span class="line">wndclass.lpszClassName = szChildClass;</span><br><span class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主窗口类的窗口过程</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// GetWindowLongPtr(hwnd, GWL_HINSTANCE)将会获取WinMain中的hInstance</span></span><br><span class="line">    <span class="comment">// 或者 ((LPCREATESTRUCT)lParam)-&gt;hInstance</span></span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">            hChildWnd = CreateWindow(szChildClass, <span class="literal">NULL</span>, WS_CHILDWINDOW | WS_VISIBLE,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">hwnd, WindowID,</span><br><span class="line">(HINSTANCE)GetWindowLongPtr(hwnd, GWL_HINSTANCE), <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ....</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子窗口类的窗口过程</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">ChildWndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    LONG value;</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">            SetWindowLongPtr(hwnd, <span class="number">0</span>, <span class="number">1024</span>);    <span class="comment">// 前面创建窗口的保留空间,每个窗口创建时都在保留空间存放数值1024</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">            ...</span><br><span class="line">            value = (LONG)GetWindowLongPtr(hwnd, <span class="number">0</span>);    <span class="comment">// 获取保留空间的值1024</span></span><br><span class="line">            ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中每个窗口的保留空间可以存放不同的数据,而这些数据可以通过GetWindowLongPtr来获取,通过SetWindowLongPtr来设置.<br>每个窗口的窗口句柄hwnd唯一,Windows通过hwnd来唯一识别每个窗口.</p><h2 id="综合运用"><a class="markdownIt-Anchor" href="#综合运用"></a> 综合运用</h2><p>下面代码将展示一个包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">5\times 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>个子窗口的程序,获得焦点的窗口将会有虚线框,当鼠标点击窗口或者键盘按下空格(VK_SPACE)、回车(VK_RETURN)都会让窗口画叉标记,再次按键则会取消标记.<br>主要理解窗口焦点的处理,子窗口如何向父窗口传递消息的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIVISIONS 5</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">ChildWndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line">HWND hChild[DIVISIONS][DIVISIONS];</span><br><span class="line">TCHAR szAppName[] = TEXT(<span class="string">"Main Window"</span>), szChildName[] = TEXT(<span class="string">"Child Window"</span>);</span><br><span class="line">LONG idFocus;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ <span class="keyword">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HWND hwnd;</span><br><span class="line">MSG msg;</span><br><span class="line">WNDCLASS wndclass;</span><br><span class="line"></span><br><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">wndclass.lpfnWndProc = WndProc;</span><br><span class="line">wndclass.cbClsExtra = wndclass.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wndclass.hInstance = hInstance;</span><br><span class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">wndclass.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.lpszClassName = szAppName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wndclass.lpfnWndProc = ChildWndProc;</span><br><span class="line">wndclass.cbWndExtra = <span class="keyword">sizeof</span>(LONG);</span><br><span class="line">wndclass.hIcon = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.lpszClassName = szChildName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个窗口的客户区都是无效的</span></span><br><span class="line">hwnd = CreateWindow(szAppName, TEXT(<span class="string">"Main Window"</span>),</span><br><span class="line">WS_OVERLAPPEDWINDOW,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line"><span class="comment">// 越过消息队列,直接由Windows调用窗口过程处理WM_PAINT消息</span></span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line">DispatchMessage(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxBlock, cyBlock;</span><br><span class="line">TCHAR szBuffer[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; DIVISIONS; ++y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; DIVISIONS; ++x)</span><br><span class="line">&#123;</span><br><span class="line">wsprintf(szBuffer, TEXT(<span class="string">"Child Window(id %d: (%d,%d))"</span>), (y &lt;&lt; <span class="number">8</span> | x), y, x);</span><br><span class="line">hChild[y][x] = CreateWindow(</span><br><span class="line">szChildName, szBuffer, WS_CHILDWINDOW | WS_CAPTION | WS_VISIBLE, <span class="comment">// 把WS_CAPTION去掉就不会显示标题栏了</span></span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">hwnd, (HMENU)(y &lt;&lt; <span class="number">8</span> | x),</span><br><span class="line">(HINSTANCE)GetWindowLongPtr(hwnd, GWL_HINSTANCE), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">cxBlock = LOWORD(lParam) / DIVISIONS;</span><br><span class="line">cyBlock = HIWORD(lParam) / DIVISIONS;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; DIVISIONS; ++y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x&lt; DIVISIONS; ++x)</span><br><span class="line">&#123;</span><br><span class="line">MoveWindow(hChild[y][x], x * cxBlock, y * cyBlock, cxBlock, cyBlock, TRUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SETFOCUS:</span><br><span class="line">SetFocus(GetDlgItem(hwnd, idFocus));<span class="comment">// 让子窗口获得焦点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line">x = idFocus &amp; <span class="number">0xFF</span>;<span class="comment">// 获取当前焦点位置的x坐标</span></span><br><span class="line">y = idFocus &gt;&gt; <span class="number">8</span>;<span class="comment">// 获取当前焦点位置的y坐标</span></span><br><span class="line"><span class="keyword">switch</span> (wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> VK_UP:</span><br><span class="line">y = max(<span class="number">0</span>, y - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN:</span><br><span class="line">y = min(DIVISIONS - <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_LEFT:</span><br><span class="line">x = max(<span class="number">0</span>, x - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT:</span><br><span class="line">x = min(DIVISIONS - <span class="number">1</span>, x + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_HOME:</span><br><span class="line">x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_END:</span><br><span class="line">x = y = DIVISIONS - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">idFocus = (y &lt;&lt; <span class="number">8</span>) | (x &amp; <span class="number">0xFF</span>);<span class="comment">// 更新当前焦点的子窗口id(id由x,y坐标构成)</span></span><br><span class="line">SetFocus(GetDlgItem(hwnd, idFocus));<span class="comment">// 让子窗口idFocus获得焦点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">ChildWndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HDC hdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxClient, cyClient;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">SetWindowLongPtr(hwnd, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">// 子窗口保留空间初始化为0</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (wParam != VK_SPACE &amp;&amp; wParam != VK_RETURN)<span class="comment">// 如果在子窗口内没有按空格或回车键,则将这条消息发送给父窗口</span></span><br><span class="line">&#123;</span><br><span class="line">SendMessage(GetParent(hwnd), message, wParam, lParam);<span class="comment">// 因为可能按下的是方向键</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是空格或者回车键,则同WM_LBUTTONDOWN一样的效果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">&#123;</span><br><span class="line">SetWindowLongPtr(hwnd, <span class="number">0</span>, <span class="number">1</span> ^ GetWindowLongPtr(hwnd, <span class="number">0</span>));<span class="comment">// 标记取异或(0变1,1变0)</span></span><br><span class="line">SetFocus(hwnd);<span class="comment">// 设置该子窗口获得焦点</span></span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, FALSE);<span class="comment">// post一条WM_PAINT消息,不进行背景擦除</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SETFOCUS:</span><br><span class="line">idFocus = GetWindowLongPtr(hwnd, GWLP_ID);<span class="comment">// 当子窗口获得焦点,立即将子窗口id保存到全局变量idFocus</span></span><br><span class="line"><span class="keyword">case</span> WM_KILLFOCUS:</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);<span class="comment">// post一条WM_PAINT消息,进行背景擦除</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">cxClient = LOWORD(lParam);</span><br><span class="line">cyClient = HIWORD(lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">Rectangle(hdc, <span class="number">0</span>, <span class="number">0</span>, cxClient, cyClient);<span class="comment">// 绘制每个子窗口的边框</span></span><br><span class="line"><span class="keyword">if</span> (idFocus == GetWindowLongPtr(hwnd, GWLP_ID)) <span class="comment">// 等同于hwnd == GetFocus(),判断子窗口是否获得焦点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 绘制虚线框</span></span><br><span class="line">SelectObject(hdc, GetStockObject(NULL_BRUSH));</span><br><span class="line">SelectObject(hdc, CreatePen(PS_DASH, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">Rectangle(hdc, cxClient / <span class="number">10</span>, cyClient / <span class="number">10</span>, cxClient * <span class="number">9.0</span> / <span class="number">10</span>, cyClient * <span class="number">9.0</span> / <span class="number">10</span>);</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(BLACK_PEN)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GetWindowLongPtr(hwnd, <span class="number">0</span>))<span class="comment">// 判断标记,0:不绘制叉,1:绘制叉</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 绘制叉</span></span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyClient);</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyClient, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下</p><img src="/posts/288466a6/2020013114584428.gif"><p>需要注意的是,这里用到了几个新函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SetFocus(GetDlgItem(hwnd, idFocus));<span class="comment">// 让子窗口idFocus获得焦点</span></span><br><span class="line">SendMessage(GetParent(hwnd), message, wParam, lParam);<span class="comment">// 因为可能按下的是方向键</span></span><br><span class="line">idChild = GetWindowLongPtr(hwnd, GWLP_ID);  <span class="comment">// 获取窗口ID(下同)</span></span><br><span class="line">idChild = GetDlgCtrlID(hwnd);</span><br><span class="line">hwndChild = GetDlgItem(hwndParent, idChild);    <span class="comment">// 获得子窗口的句柄</span></span><br></pre></td></tr></table></figure><p>GetDlgItem根据父窗口句柄和子窗口id来获得子窗口句柄<br>GetParent根据子窗口句柄来获得父窗口句柄<br>在子窗口单击鼠标时,子窗口不能自动获得输入焦点,因此需要父窗口处理WM_SETFOCUS消息时通过SetFocus(GetDlgItem(hwnd, idFocus))让子窗口获得焦点</p><h2 id="75-捕获鼠标"><a class="markdownIt-Anchor" href="#75-捕获鼠标"></a> 7.5 捕获鼠标</h2><p>通常,只有当鼠标指针位于窗口的客户区或非客户区时,窗口过程才接收鼠标消息.而当鼠标处于窗口范围之外时,一个程序也可能需要接收鼠标消息.如果是这种情况,那么就需要 <strong>&quot;捕获&quot;鼠标</strong>,主要用到的函数时SetCapture.</p><h2 id="综合运用-2"><a class="markdownIt-Anchor" href="#综合运用-2"></a> 综合运用</h2><p>下面的绘制方框程序的例子将演示捕获鼠标的具体用途,当鼠标移到窗口外,程序仍可以获得鼠标的位置.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">DrawBoxOutline</span><span class="params">(HWND hwnd, POINT ptBeg, POINT ptEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">128</span>];</span><br><span class="line">HDC hdc = GetDC(hwnd);</span><br><span class="line">SetROP2(hdc, R2_NOT);<span class="comment">// 画笔与背景色取反</span></span><br><span class="line">SelectObject(hdc, GetStockObject(NULL_BRUSH));</span><br><span class="line">Rectangle(hdc, ptBeg.x, ptBeg.y, ptEnd.x, ptEnd.y);</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">10</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"(%-3d,%-3d),(%-3d,%-3d)"</span>), ptBeg.x, ptBeg.y, ptEnd.x, ptEnd.y));</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HDC hdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fBlocking, fValidBox;</span><br><span class="line"><span class="keyword">static</span> POINT ptBoxBeg, ptBoxEnd;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">&#123;</span><br><span class="line">ptBoxBeg.x = ptBoxEnd.x = LOWORD(lParam);</span><br><span class="line">ptBoxBeg.y = ptBoxEnd.y = HIWORD(lParam);</span><br><span class="line">SetCapture(hwnd);<span class="comment">// 捕获鼠标,这样鼠标即使到了窗口外(非客户区)也可以捕获</span></span><br><span class="line">SetCursor(LoadCursor(<span class="literal">NULL</span>, IDC_CROSS));</span><br><span class="line">DrawBoxOutline(hwnd, ptBoxBeg, ptBoxEnd);<span class="comment">// 绘制方框(点)</span></span><br><span class="line">fBlocking = TRUE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span>  WM_LBUTTONUP:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fBlocking)</span><br><span class="line">&#123;</span><br><span class="line">SetCursor(LoadCursor(<span class="literal">NULL</span>, IDC_ARROW));</span><br><span class="line">ReleaseCapture();</span><br><span class="line">DrawBoxOutline(hwnd, ptBoxBeg, ptBoxEnd); <span class="comment">// 擦除原来痕迹</span></span><br><span class="line"></span><br><span class="line">ptBoxEnd.x = LOWORD(lParam);</span><br><span class="line">ptBoxEnd.y = HIWORD(lParam);</span><br><span class="line"></span><br><span class="line">fBlocking = FALSE;</span><br><span class="line">fValidBox = TRUE;</span><br><span class="line"></span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fBlocking)</span><br><span class="line">&#123;</span><br><span class="line">DrawBoxOutline(hwnd, ptBoxBeg, ptBoxEnd);<span class="comment">// 擦除原来痕迹</span></span><br><span class="line">ptBoxEnd.x = LOWORD(lParam);</span><br><span class="line">ptBoxEnd.y = HIWORD(lParam);</span><br><span class="line">DrawBoxOutline(hwnd, ptBoxBeg, ptBoxEnd);<span class="comment">// 绘制新方框</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fBlocking &amp;&amp; (wParam == <span class="number">0x1B</span>))<span class="comment">// 当绘制途中按了ESC则取消刚刚的操作</span></span><br><span class="line">&#123;</span><br><span class="line">DrawBoxOutline(hwnd, ptBoxBeg, ptBoxEnd);<span class="comment">// 擦除原来痕迹</span></span><br><span class="line">ReleaseCapture();</span><br><span class="line">SetCursor(LoadCursor(<span class="literal">NULL</span>, IDC_ARROW));</span><br><span class="line">fBlocking = FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">if</span> (fValidBox)<span class="comment">// 已经绘制结束了</span></span><br><span class="line">&#123;</span><br><span class="line">SelectObject(hdc, GetStockObject(BLACK_BRUSH));<span class="comment">// 选用黑色画刷来填充方框内部</span></span><br><span class="line">Rectangle(hdc, ptBoxBeg.x, ptBoxBeg.y, ptBoxEnd.x, ptBoxEnd.y);<span class="comment">// 绘制方框并填充</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fBlocking)<span class="comment">// 是否仍在绘制途中</span></span><br><span class="line">&#123;</span><br><span class="line">SetROP2(hdc, R2_NOT);</span><br><span class="line">SelectObject(hdc, GetStockObject(NULL_PEN));</span><br><span class="line">Rectangle(hdc, ptBoxBeg.x, ptBoxBeg.y, ptBoxEnd.x, ptBoxEnd.y);<span class="comment">// 绘制方框</span></span><br><span class="line">&#125;</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下</p><img src="/posts/288466a6/2020013114584430.gif"><p>在调用了SetCapture(hwnd)之后,Windows会将所有鼠标消息发送给句柄为hwnd的窗口的窗口过程,鼠标消息总是以客户区消息的形式出现,即使鼠标位于窗口的非客户区.参数lParam仍然表示鼠标在客户区的位置,但这时x,y有可能为负值.<br>具体来说,当鼠标被捕获,且当前没有按下鼠标按钮时,若鼠标指针经过另一个窗口,则将由指针下面的窗口接收鼠标消息,而不是捕获鼠标的窗口.<strong>为防止这种混乱情况出现,一般来说,只有当鼠标在客户区内被按下时,程序才应该捕获鼠标,当释放按钮时,应该同时停止捕获,如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">    SetCapture(hwnd);                           <span class="comment">// 捕获鼠标</span></span><br><span class="line">    SetCursor(LoadCursor(<span class="literal">NULL</span>, IDC_CROSS));     <span class="comment">// 变为叉形鼠标</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONUP:</span><br><span class="line">    ReleaseCapture();                           <span class="comment">// 释放鼠标</span></span><br><span class="line">    SetCursor(LoadCursor(<span class="literal">NULL</span>, IDC_ARROW));     <span class="comment">// 还原箭头鼠标</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h2 id="76-鼠标的滚轮"><a class="markdownIt-Anchor" href="#76-鼠标的滚轮"></a> 7.6 鼠标的滚轮</h2><p>鼠标滚轮有一个数值来计算一次滚轮的长度,这个增量数值WHEEL_DELTA为120(不表示像素,就是一个数值)定义在WINUSER.H头文件中.<br>这个120表示一次滚轮的增量数值(不表示像素),通过SystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &amp;ulScrollLines, 0)可以获取一次滚轮能够滚动的行数(默认为3行),那么滚动每行的增量数值为WHEEL_DELTA/ulScrollLines,当滚轮滚动时触发WM_CREATE消息,LOWORD(wParam)表示按下的控制键,HIWORD(wParam)表示这次滚轮滚动的增量数值(向上滚动则为正,向下则为负),再结合每行滚动的增量数值,就可以计算出向上或向下滚动了多少行,再通过SendMessage就可以实现鼠标滚动了.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> iAccumDelta, iDeltaPerLine;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    ...</span><br><span class="line">    SystemParametersInfo(SPI_GETWHEELSCROLLLINES, <span class="number">0</span>, &amp;ulScrollLines, <span class="number">0</span>) <span class="comment">// 获取一次滚轮能够滚动的行数</span></span><br><span class="line">    iDeltaPerLine = ulScrollLines ? WHEEL_DELTA / ulScrollLines : <span class="number">0</span>;    <span class="comment">// 计算滚动每行的增量数值</span></span><br><span class="line">    ...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> WM_MOUSEWHEEL: <span class="comment">// 当滚动滚轮时触发,wParam的高字表示滚轮滚动的距离,用多倍的WHEEL_DELTA表示</span></span><br><span class="line">    <span class="keyword">if</span> (iDeltaPerLine == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    iAccumDelta += (<span class="keyword">short</span>)HIWORD(wParam);<span class="comment">// 向下滚动则wParam为负,向上则为正(即滚轮向鼠标线方向滚动为正)</span></span><br><span class="line">    <span class="keyword">while</span> (iAccumDelta &gt;= iDeltaPerLine)</span><br><span class="line">    &#123;</span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_LINEUP, <span class="number">0</span>);</span><br><span class="line">        iAccumDelta -= iDeltaPerLine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (iAccumDelta &lt;= -iDeltaPerLine)</span><br><span class="line">    &#123;</span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_LINEDOWN, <span class="number">0</span>);</span><br><span class="line">        iAccumDelta += iDeltaPerLine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h2 id=&quot;71-鼠标的基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#71-鼠标的基础知识&quot;&gt;&lt;/a&gt; 7.1 鼠标的基础知识&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第6章 键盘</title>
    <link href="https://brianyi.github.io/posts/481c226a/"/>
    <id>https://brianyi.github.io/posts/481c226a/</id>
    <published>2020-02-01T01:55:41.000Z</published>
    <updated>2020-02-02T12:36:27.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="61-键盘基础"><a class="markdownIt-Anchor" href="#61-键盘基础"></a> 6.1 键盘基础</h2><h3 id="613-队列和同步"><a class="markdownIt-Anchor" href="#613-队列和同步"></a> 6.1.3 队列和同步</h3><p>当用户按下和释放键盘上的一个键时,Windows和键盘设备驱动程序将硬件扫描码转换为格式化后的消息.但是这些消息并不立即被放入应用程序消息队列,而是由Windows把这些消息存储在系统消息队列中.<br><strong>系统消息队列</strong>是一个单独的消息队列,它被Windows用来初步存储用户从键盘和鼠标输入的消息.仅当Windows应用程序完成了对前一个用户输入消息的处理后,Windows才从系统消息队列中取出下一条消息,并把它放入<strong>应用程序消息队列</strong>.<br>之所以设置系统系统消息队列,是为了保持系统消息与各个应用程序消息队列的同步,如果不同应用程序的窗口获得了焦点,那么系统消息应当是发往不同的应用程序消息队列.</p><h3 id="614-击键和字符"><a class="markdownIt-Anchor" href="#614-击键和字符"></a> 6.1.4 击键和字符</h3><p>当你按下键盘上的A时产生一次击键,释放此键时也产生一次击键.</p><h2 id="62击键消息"><a class="markdownIt-Anchor" href="#62击键消息"></a> 6.2击键消息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wParam是虚拟键代码,lParam包含本次击键的一些数据</span></span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:    <span class="comment">// 非系统键按下</span></span><br><span class="line"><span class="keyword">case</span> WM_KEYUP:      <span class="comment">// 非系统键释放</span></span><br><span class="line"><span class="keyword">case</span> WM_SYSKEYDOWN: <span class="comment">// 系统键按下</span></span><br><span class="line"><span class="keyword">case</span> WM_SYSKEYUP:   <span class="comment">// 系统键释放</span></span><br></pre></td></tr></table></figure><p>击键消息可被实时追踪,通过调用<strong>GetMessageTime</strong>可以得到键被按下或释放的相对时间.<br>DefWindowProc会处理许多默认系统按键消息,比如Alt-Tab(切换窗口).</p><h3 id="622-虚拟键代码"><a class="markdownIt-Anchor" href="#622-虚拟键代码"></a> 6.2.2 虚拟键代码</h3><h3 id="623-lparam信息"><a class="markdownIt-Anchor" href="#623-lparam信息"></a> 6.2.3 lParam信息</h3><img src="/posts/481c226a/2020020111064631.png"><h3 id="624-转义状态"><a class="markdownIt-Anchor" href="#624-转义状态"></a> 6.2.4 转义状态</h3><p>当处理击键消息时,你可能需要知道是否有转义键(Shift,Ctrl和Alt键)或切换键(Caps Lock,Num Lock和Scroll Lock键)被按下. 通过调用GetKeyState,GetAsyncKeyState来获得此信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iState = GetKeyState(VK_SHIFT);     <span class="comment">// shift被按下,则iState最高位为1,为负</span></span><br><span class="line">iState = GetKeyState(VK_CAPITAL);   <span class="comment">// Caps Lock键打开,则iState最低位为1</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> WM_CHAR:   <span class="comment">// 用于处理Shift+Tab操作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LOWORD(lParam); ++i)    <span class="comment">// LOWORD(lParam)获取按键重复的次数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\t'</span>:  <span class="comment">// tab</span></span><br><span class="line">            <span class="keyword">if</span> (GetKeyState(VK_SHIFT) &lt; <span class="number">0</span>)  <span class="comment">// 判断是否按下了Shift</span></span><br><span class="line">            [<span class="keyword">do</span> other things]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="626-为sysmets加上键盘处理功能"><a class="markdownIt-Anchor" href="#626-为sysmets加上键盘处理功能"></a> 6.2.6 为SYSMETS加上键盘处理功能</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (wParam)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> VK_HOME:<span class="comment">// 按键Home</span></span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_TOP, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_END:<span class="comment">// 按键End</span></span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_BOTTOM, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_PRIOR:<span class="comment">// 按键Page Up</span></span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_PAGEUP, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_NEXT:<span class="comment">// 按键Page Down</span></span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_PAGEDOWN, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_UP:<span class="comment">// 按键上</span></span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_LINEUP, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_DOWN:<span class="comment">// 按键下</span></span><br><span class="line">        SendMessage(hwnd, WM_VSCROLL, SB_LINEDOWN, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_LEFT:<span class="comment">// 按键左</span></span><br><span class="line">        SendMessage(hwnd, WM_HSCROLL, SB_LINELEFT, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> VK_RIGHT:<span class="comment">// 按键右</span></span><br><span class="line">        SendMessage(hwnd, WM_HSCROLL, SB_LINERIGHT, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码详见<a href="../c1bee057#jump-0">第4章的 综合运用</a></p><h2 id="63-字符消息"><a class="markdownIt-Anchor" href="#63-字符消息"></a> 6.3 字符消息</h2><p>通过转义状态信息可把击键消息转换为字符消息(比如:Caps Lock打开时,按下键盘上的字母都为大写,或者Shft+字母也为大写),仅仅利用转义状态信息是不够的:还必须知道与国家/地区相关的键盘配置(因为有Shift+3并不一定为#,在其他国家可能为其他字符),那么就让Windows来帮你完成从击键消息到字符消息的转换吧.<br>利用TranslateMessage函数可以把击键消息转换为字符消息,如果击键消息是WM_KEYDOWN或WM_SYSKEYDOWN,且击键和转移状态组合产生了一个字符,则TranslateMessage函数把字符消息放入应用程序的消息队列.这个字符消息将被放在击键消息之后,GetMessage函数可从消息队列中获取此字符消息.</p><h3 id="631-四类字符消息"><a class="markdownIt-Anchor" href="#631-四类字符消息"></a> 6.3.1 四类字符消息</h3><img src="/posts/481c226a/2020020113533132.png"><p>WM_CHAR消息和WM_DEADCHAR消息来自于WM_KEYDOWN消息<br>WM_SYSCHAR消息和WM_SYSDEADCHAR消息来自于WM_SYSKEYDOWN消息<br>如果窗口过程需要确认是哪种字符编码,可以使用IsWindowUnicode(hwnd)</p><h3 id="632-消息排序"><a class="markdownIt-Anchor" href="#632-消息排序"></a> 6.3.2 消息排序</h3><h3 id="633-控制字符的处理"><a class="markdownIt-Anchor" href="#633-控制字符的处理"></a> 6.3.3 控制字符的处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line">&#123;</span><br><span class="line">    [other program lines]</span><br><span class="line">    <span class="keyword">switch</span>(wParam)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\b'</span>:  <span class="comment">// backspace</span></span><br><span class="line">            [other program lines]</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:  <span class="comment">// tab</span></span><br><span class="line">            [other program lines]</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:  <span class="comment">// linefeed</span></span><br><span class="line">            [other program lines]</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\r'</span>:  <span class="comment">// carriage return</span></span><br><span class="line">            [other program lines]</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:    <span class="comment">// character codes</span></span><br><span class="line">            [other program lines]</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="634-死字符消息"><a class="markdownIt-Anchor" href="#634-死字符消息"></a> 6.3.4 死字符消息</h3><p>Windows程序通常忽略WM_DEADCHAR和WM_SYSDEADCHAR消息.一般你也不需要用到这两个消息.<br>顾名思义,由于这些键自己不产生字符,因此称为&quot;死键&quot;.</p><h2 id="综合运用"><a class="markdownIt-Anchor" href="#综合运用"></a> 综合运用</h2><p>以下代码将显示Windows传递给窗口过程的八种不同键盘消息的所有信息,黑框圈起来的区域为设置的滚动区域(ScrollWindow).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxChar, cyChar, cyClient, cxClient, cxClientMax, cyClientMax, cLinesMax, cLines;</span><br><span class="line">HDC hdc;</span><br><span class="line"><span class="keyword">static</span> TCHAR szTop[] = TEXT(<span class="string">"Message        VirtualKeyValue    KeyName       Char     Repeat Scan Ext ALT Prev Tran"</span>);</span><br><span class="line"><span class="keyword">static</span> TCHAR szUnd[] = TEXT(<span class="string">"_______        _______________    _______       ____     ______ ____ ___ ___ ____ ____"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> TCHAR * szFormat[<span class="number">2</span>] = &#123;</span><br><span class="line">TEXT(<span class="string">"%-14s 0x%-16X %-22s%c%-6u %-4d %-3s %-3s %-4s %-4s"</span>),</span><br><span class="line"><span class="comment">//TEXT ("%-13s %4d %-22s%c%6u %4d %3s %3s %4s %4s")//,</span></span><br><span class="line">TEXT(<span class="string">"%-14s 0x%-16X %-14s%-9c%-6u %-4d %-3s %-3s %-4s %-4s"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> TCHAR * szYes = TEXT(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> TCHAR * szNo = TEXT(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> TCHAR * szDown = TEXT(<span class="string">"Down"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> TCHAR * szUp = TEXT(<span class="string">"Up"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> TCHAR * szMessage[] = &#123;</span><br><span class="line">TEXT(<span class="string">"WM_KEYDOWN"</span>),    TEXT(<span class="string">"WM_KEYUP"</span>),</span><br><span class="line">TEXT(<span class="string">"WM_CHAR"</span>),       TEXT(<span class="string">"WM_DEADCHAR"</span>),</span><br><span class="line">TEXT(<span class="string">"WM_SYSKEYDOWN"</span>), TEXT(<span class="string">"WM_SYSKEYUP"</span>),</span><br><span class="line">TEXT(<span class="string">"WM_SYSCHAR"</span>),    TEXT(<span class="string">"WM_SYSDEADCHAR"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> RECT rcScrollRect;</span><br><span class="line"><span class="keyword">static</span> MSG* pMsgArry;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line"><span class="keyword">case</span> WM_DISPLAYCHANGE:  <span class="comment">// 改变分辨率时将会收到此消息</span></span><br><span class="line">&#123;</span><br><span class="line">cxClientMax = GetSystemMetrics(SM_CXMAXIMIZED);<span class="comment">// 当窗口最大化时的客户区width</span></span><br><span class="line">cyClientMax = GetSystemMetrics(SM_CYMAXIMIZED);<span class="comment">// 当窗口最大化时的客户区height</span></span><br><span class="line"></span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));</span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;</span><br><span class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pMsgArry)</span><br><span class="line"><span class="keyword">delete</span>[]pMsgArry;</span><br><span class="line"></span><br><span class="line">cLinesMax = cyClientMax / cyChar;<span class="comment">// 窗口最大化时客户区可容纳的行数</span></span><br><span class="line">pMsgArry = <span class="keyword">new</span> MSG[cLinesMax];</span><br><span class="line">cLines = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">cxClient = LOWORD(lParam);  <span class="comment">// 获取客户区width</span></span><br><span class="line">cyClient = HIWORD(lParam);  <span class="comment">// 获取客户区height</span></span><br><span class="line"></span><br><span class="line">SetRect(&amp;rcScrollRect, <span class="number">10</span>, cyChar*<span class="number">2</span>, cxClient<span class="number">-10</span>, cyChar * (cyClient / cyChar));<span class="comment">// 设置滚动区域大小</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line"><span class="keyword">case</span> WM_KEYUP:</span><br><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line"><span class="keyword">case</span> WM_DEADCHAR:</span><br><span class="line"><span class="keyword">case</span> WM_SYSKEYDOWN:</span><br><span class="line"><span class="keyword">case</span> WM_SYSKEYUP:</span><br><span class="line"><span class="keyword">case</span> WM_SYSCHAR:</span><br><span class="line"><span class="keyword">case</span> WM_SYSDEADCHAR:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = cLinesMax - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">pMsgArry[i] = pMsgArry[i - <span class="number">1</span>];</span><br><span class="line">pMsgArry[<span class="number">0</span>].hwnd = hwnd;</span><br><span class="line">pMsgArry[<span class="number">0</span>].message = message;</span><br><span class="line">pMsgArry[<span class="number">0</span>].wParam = wParam;</span><br><span class="line">pMsgArry[<span class="number">0</span>].lParam = lParam;</span><br><span class="line"></span><br><span class="line">cLines = min(cLines + <span class="number">1</span>, cLinesMax);</span><br><span class="line">ScrollWindow(hwnd, <span class="number">0</span>, -cyChar, &amp;rcScrollRect, &amp;rcScrollRect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));</span><br><span class="line">Rectangle(hdc, rcScrollRect.left<span class="number">-2</span>, rcScrollRect.top<span class="number">-2</span>, rcScrollRect.right+<span class="number">2</span>, rcScrollRect.bottom+<span class="number">2</span>); <span class="comment">// 在滚动窗口外画出边缘</span></span><br><span class="line">SetMapMode(hdc, MM_ANISOTROPIC); <span class="comment">// 3行代码设置字符映射模式</span></span><br><span class="line">SetWindowExtEx(hdc, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, cxChar, cyChar, <span class="literal">NULL</span>);</span><br><span class="line">SetBkMode(hdc, TRANSPARENT);    <span class="comment">// 设置背景透明,这样下面两行文字输出在同一行上就可以重叠了(而不会覆盖掉)</span></span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">0</span>, szTop, _tcslen(szTop));</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">0</span>, szUnd, _tcslen(szUnd));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min(cLines, cyClient / cyChar - <span class="number">2</span>); ++i)</span><br><span class="line">&#123;</span><br><span class="line">MSG *pmsg = &amp;pMsgArry[i];</span><br><span class="line"><span class="keyword">int</span> iType = pmsg-&gt;message == WM_CHAR ||</span><br><span class="line">pmsg-&gt;message == WM_SYSCHAR ||</span><br><span class="line">pmsg-&gt;message == WM_DEADCHAR ||</span><br><span class="line">pmsg-&gt;message == WM_SYSDEADCHAR;</span><br><span class="line"></span><br><span class="line">TCHAR szKeyName[<span class="number">20</span>], szBuffer[<span class="number">128</span>];</span><br><span class="line">GetKeyNameText(pmsg-&gt;lParam, szKeyName,</span><br><span class="line"><span class="keyword">sizeof</span>(szKeyName) / <span class="keyword">sizeof</span>(TCHAR));</span><br><span class="line"></span><br><span class="line">TextOut(hdc, <span class="number">10</span>, cyClient/cyChar - <span class="number">1</span> - i, szBuffer,</span><br><span class="line">wsprintf(szBuffer, szFormat[iType],</span><br><span class="line">szMessage[pmsg-&gt;message - WM_KEYFIRST],</span><br><span class="line">pmsg-&gt;wParam,</span><br><span class="line">(PTSTR)(iType ? TEXT(<span class="string">" "</span>) : szKeyName),</span><br><span class="line">(TCHAR)(iType ? pmsg-&gt;wParam : <span class="string">' '</span>),</span><br><span class="line">LOWORD(pmsg-&gt;lParam),</span><br><span class="line">HIWORD(pmsg-&gt;lParam) &amp; <span class="number">0xFF</span>,</span><br><span class="line"><span class="number">0x01000000</span> &amp; pmsg-&gt;lParam ? szYes : szNo,</span><br><span class="line"><span class="number">0x20000000</span> &amp; pmsg-&gt;lParam ? szYes : szNo,</span><br><span class="line"><span class="number">0x40000000</span> &amp; pmsg-&gt;lParam ? szDown : szUp,</span><br><span class="line"><span class="number">0x80000000</span> &amp; pmsg-&gt;lParam ? szUp : szDown));</span><br><span class="line">&#125;</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/481c226a/2020013114584424.gif"><h2 id="综合运用-2"><a class="markdownIt-Anchor" href="#综合运用-2"></a> 综合运用</h2><p>接下来的代码将展示Windows中的所有备用字体,用表格来展示,蓝色表示ascii对应的值,栅格顶部和左侧的标题显示了字符码的十六进制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span>     idStockFont;</span><br><span class="line"><span class="keyword">const</span> TCHAR * szStockFont;</span><br><span class="line">&#125;</span><br><span class="line">stockfont[] = &#123; OEM_FIXED_FONT,      TEXT(<span class="string">"OEM_FIXED_FONT"</span>),</span><br><span class="line"> ANSI_FIXED_FONT,     TEXT(<span class="string">"ANSI_FIXED_FONT"</span>),</span><br><span class="line"> ANSI_VAR_FONT,       TEXT(<span class="string">"ANSI_VAR_FONT"</span>),</span><br><span class="line"> SYSTEM_FONT,         TEXT(<span class="string">"SYSTEM_FONT"</span>),</span><br><span class="line"> DEVICE_DEFAULT_FONT, TEXT(<span class="string">"DEVICE_DEFAULT_FONT"</span>),</span><br><span class="line"> SYSTEM_FIXED_FONT,   TEXT(<span class="string">"SYSTEM_FIXED_FONT"</span>),</span><br><span class="line"> DEFAULT_GUI_FONT,    TEXT(<span class="string">"DEFAULT_GUI_FONT"</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>  iFont, cFonts = <span class="keyword">sizeof</span> stockfont / <span class="keyword">sizeof</span> stockfont[<span class="number">0</span>];</span><br><span class="line">HDC         hdc;</span><br><span class="line"><span class="keyword">int</span>         x, y, cxGrid, cyGrid;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">TCHAR       szFaceName[LF_FACESIZE], szBuffer[LF_FACESIZE + <span class="number">64</span>];</span><br><span class="line">TEXTMETRIC  tm;</span><br><span class="line">SCROLLINFOsi;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">iFont = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span>(si);</span><br><span class="line">si.fMask = SIF_RANGE | SIF_PAGE;</span><br><span class="line">si.nMax = cFonts - <span class="number">1</span>;</span><br><span class="line">si.nMin = <span class="number">0</span>;</span><br><span class="line">si.nPage = <span class="number">1</span>;</span><br><span class="line">SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_VSCROLL:</span><br><span class="line">&#123;</span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span> si;</span><br><span class="line">si.fMask = SIF_ALL;</span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line">iFont = si.nPos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SB_TOP:</span><br><span class="line">si.nPos = si.nMin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_BOTTOM:</span><br><span class="line">si.nPos = si.nMax;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_PAGEUP:</span><br><span class="line">si.nPos -= si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_PAGEDOWN:</span><br><span class="line">si.nPos += si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_LINEUP:</span><br><span class="line">si.nPos -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_LINEDOWN:</span><br><span class="line">si.nPos += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_THUMBTRACK:</span><br><span class="line">si.nPos = si.nTrackPos;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">si.fMask = SIF_POS;</span><br><span class="line">SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);</span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line"><span class="keyword">if</span> (si.nPos != iFont)</span><br><span class="line">&#123;</span><br><span class="line">iFont = si.nPos;</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">SelectObject(hdc, GetStockObject(stockfont[iFont].idStockFont));</span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">GetTextFace(hdc, <span class="keyword">sizeof</span> szFaceName / <span class="keyword">sizeof</span> szFaceName[<span class="number">0</span>], szFaceName);</span><br><span class="line"><span class="keyword">int</span> iLen = wsprintf(szBuffer, TEXT(<span class="string">"%s: Face Name = %s, CharSet = %i"</span>),</span><br><span class="line">stockfont[iFont].szStockFont, szFaceName, tm.tmCharSet);</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">10</span>, szBuffer, iLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制网格</span></span><br><span class="line">cxGrid = tm.tmAveCharWidth * <span class="number">8</span>;</span><br><span class="line">cyGrid = (tm.tmHeight + tm.tmExternalLeading) * <span class="number">3.0</span> / <span class="number">2</span>;</span><br><span class="line">SetViewportOrgEx(hdc, tm.tmAveCharWidth * <span class="number">3</span>, (tm.tmHeight + tm.tmExternalLeading) * <span class="number">3</span>, <span class="literal">NULL</span>);<span class="comment">// 将原点设置离第一行文字远一些,这样不会覆盖掉第一行文字</span></span><br><span class="line"><span class="keyword">for</span> (y=<span class="number">1</span>;y&lt;<span class="number">17</span>;++y)</span><br><span class="line">&#123;</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, y * cyGrid, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxGrid * <span class="number">17</span>, y * cyGrid);</span><br><span class="line">MoveToEx(hdc, y * cxGrid, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, y * cxGrid, cyGrid * <span class="number">17</span>);</span><br><span class="line">TextOut(hdc, cxGrid * <span class="number">3.0</span> / <span class="number">8</span>, y * cyGrid + cyGrid / <span class="number">4</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"-%X"</span>), y<span class="number">-1</span>));</span><br><span class="line">TextOut(hdc, y * cxGrid + cxGrid * <span class="number">3.0</span> / <span class="number">8</span>, cyGrid / <span class="number">4</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"%X-"</span>), y<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充表格字符</span></span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">1</span>; x &lt; <span class="number">17</span>; ++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">1</span>; y &lt; <span class="number">17</span>; ++y)</span><br><span class="line">&#123;</span><br><span class="line">TextOut(hdc, x * cxGrid + cxGrid / <span class="number">8</span>, y * cyGrid + cyGrid / <span class="number">4</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"%c"</span>), (x - <span class="number">1</span>) * <span class="number">16</span> + y - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        SetBkMode(hdc, TRANSPARENT);<span class="comment">// 设置背景为透明,防止文字覆盖掉</span></span><br><span class="line">SetTextColor(hdc, RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));<span class="comment">// 设置文字颜色为蓝色</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充表格ascii</span></span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">1</span>; x &lt; <span class="number">17</span>; ++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">1</span>; y &lt; <span class="number">17</span>; ++y)</span><br><span class="line">&#123;</span><br><span class="line">TextOut(hdc, x * cxGrid + cxGrid * <span class="number">3.0</span> / <span class="number">8</span>, y * cyGrid + cyGrid / <span class="number">4</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"(%d)"</span>), (x - <span class="number">1</span>) * <span class="number">16</span> + y - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/481c226a/2020013114584425.gif"><h2 id="综合运用-3"><a class="markdownIt-Anchor" href="#综合运用-3"></a> 综合运用</h2><p>下面代码将实现一个类似系统自带的字体浏览器,获取所有系统字体的信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义逻辑字体信息结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagLOGFONTINFO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LOGFONT logFont;</span><br><span class="line">DWORDfontType;</span><br><span class="line">&#125; LOGFONTINFO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数,每一次回调会获取一个系统的字体信息</span></span><br><span class="line"><span class="function">BOOL CALLBACK <span class="title">LogFontProc</span><span class="params">(CONST LOGFONT *lpelfe, CONST TEXTMETRIC *lpntme, DWORD FontType, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LOGFONTINFO*&gt;* lgftArry = (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LOGFONTINFO*&gt;*)lParam;</span><br><span class="line">LOGFONTINFO* pLogFontInfo = (LOGFONTINFO*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LOGFONTINFO));</span><br><span class="line">pLogFontInfo-&gt;logFont = *lpelfe;</span><br><span class="line">pLogFontInfo-&gt;fontType = FontType;</span><br><span class="line">lgftArry-&gt;push_back(pLogFontInfo);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">UNREFERENCED_PARAMETER(lpelfe);</span><br><span class="line">UNREFERENCED_PARAMETER(lpntme);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制字体信息</span></span><br><span class="line"><span class="function">VOID <span class="title">DrawFontInfo</span><span class="params">(HWND hwnd, HDC hdc, LOGFONT logFont, DWORD fontType, <span class="keyword">int</span> iFont)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">256</span>];</span><br><span class="line">TCHAR szLetters[] = TEXT(<span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>);</span><br><span class="line">TCHAR szDigits[] = TEXT(<span class="string">"1234567890.:.;'\"(!?)+-*/="</span>);</span><br><span class="line">TCHAR szSentence[] = TEXT(<span class="string">"The quick brown fox jumps over the lazy dog. 1234567890"</span>);</span><br><span class="line">TCHAR szYes[] = TEXT(<span class="string">"Yes"</span>), szNo[] = TEXT(<span class="string">"No"</span>);</span><br><span class="line">DWORD dwFontH[] = &#123; <span class="number">12</span>,<span class="number">18</span>,<span class="number">24</span>,<span class="number">36</span>,<span class="number">48</span>,<span class="number">60</span>,<span class="number">72</span> &#125;;</span><br><span class="line">DWORD fontSizeNum = <span class="keyword">sizeof</span> dwFontH / <span class="keyword">sizeof</span> dwFontH[<span class="number">0</span>];</span><br><span class="line">SIZE* fontSize = (SIZE*)<span class="built_in">malloc</span>(fontSizeNum * <span class="keyword">sizeof</span>(SIZE));</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line">RECT rc;</span><br><span class="line"><span class="keyword">double</span> ratio = logFont.lfWidth * <span class="number">1.0</span> / logFont.lfHeight;</span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; fontSizeNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">fontSize[i].cx = (LONG)(ratio * dwFontH[i]);</span><br><span class="line">fontSize[i].cy = dwFontH[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HFONT hFont = CreateFontIndirect(&amp;logFont);</span><br><span class="line"><span class="keyword">int</span> cxChar, cyChar, cxClient, cyClient, cyBase;</span><br><span class="line">GetClientRect(hwnd, &amp;rc);</span><br><span class="line">cxClient = rc.right, cyClient = rc.bottom;</span><br><span class="line">SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));</span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;<span class="comment">// 存放SYSTEM_FIXED_FONT字体宽</span></span><br><span class="line">cyChar = tm.tmHeight + tm.tmExternalLeading; <span class="comment">// 存放SYSTEM_FIXED_FONT字体高</span></span><br><span class="line">TextOut(hdc, <span class="number">0</span>, <span class="number">0</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"Font index: %d, Font name: %s, CharSet: %d"</span>), iFont, logFont.lfFaceName, logFont.lfCharSet));</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, cyChar, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"Version: Version 1.02"</span>)));</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, cyChar * <span class="number">2</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"Raster %s, TrueType %s, Vector %s"</span>),</span><br><span class="line">fontType &amp; RASTER_FONTTYPE ? szYes : szNo,</span><br><span class="line">fontType &amp; TRUETYPE_FONTTYPE ? szYes : szNo,</span><br><span class="line">fontType &amp; DEVICE_FONTTYPE ? szYes : szNo));</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyChar * <span class="number">3</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyChar * <span class="number">3</span>);</span><br><span class="line">cyBase = cyChar * <span class="number">3</span> + <span class="number">5</span>;</span><br><span class="line">SetViewportOrgEx(hdc, <span class="number">0</span>, cyBase, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//-----------------------------------------------------</span></span><br><span class="line">SelectObject(hdc, hFont);</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, <span class="number">0</span>, szLetters, _tcslen(szLetters));</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, logFont.lfHeight, szDigits, _tcslen(szDigits));</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, logFont.lfHeight * <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, logFont.lfHeight * <span class="number">2</span>);</span><br><span class="line">cyBase += logFont.lfHeight * <span class="number">2</span> + <span class="number">5</span>;</span><br><span class="line">SetViewportOrgEx(hdc, <span class="number">0</span>, cyBase, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="keyword">int</span> yHeightBase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; fontSizeNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">logFont.lfWidth = fontSize[i].cx;</span><br><span class="line">logFont.lfHeight = fontSize[i].cy;</span><br><span class="line">hFont = CreateFontIndirect(&amp;logFont);</span><br><span class="line">DeleteObject(SelectObject(hdc, hFont));</span><br><span class="line">yHeightBase += logFont.lfHeight;</span><br><span class="line">TextOut(hdc, <span class="number">20</span>, yHeightBase, szSentence, _tcslen(szSentence));</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT)));</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, yHeightBase + logFont.lfHeight - cyChar, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"%d"</span>), dwFontH[i]));</span><br><span class="line">&#125;</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT)));</span><br><span class="line"><span class="built_in">free</span>(fontSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxChar, cyChar, cyClient, cxClient, cxClientMax, cyClientMax, cLinesMax, cLines, iFont;</span><br><span class="line">HDC hdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LOGFONTINFO*&gt; lgftArry;</span><br><span class="line">SCROLLINFO si;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">EnumFontFamiliesEx(hdc, <span class="literal">NULL</span>, LogFontProc, (LPARAM)&amp;lgftArry, <span class="number">0</span>);</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 设置滚动条范围</span></span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span> si;</span><br><span class="line">si.fMask = SIF_RANGE | SIF_PAGE;</span><br><span class="line">si.nMin = <span class="number">0</span>;</span><br><span class="line">si.nMax = lgftArry.size() - <span class="number">1</span>;</span><br><span class="line">si.nPage = <span class="number">1</span>;</span><br><span class="line">SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_VSCROLL:</span><br><span class="line">&#123;</span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span> si;</span><br><span class="line">si.fMask = SIF_ALL;</span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line">iFont = si.nPos;</span><br><span class="line"><span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SB_TOP:</span><br><span class="line">si.nPos = si.nMin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_BOTTOM:</span><br><span class="line">si.nPos = si.nMax;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_PAGEUP:</span><br><span class="line">si.nPos -= si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_PAGEDOWN:</span><br><span class="line">si.nPos += si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_LINEUP:</span><br><span class="line">si.nPos -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_LINEDOWN:</span><br><span class="line">si.nPos += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SB_THUMBTRACK:</span><br><span class="line">si.nPos = si.nTrackPos;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">si.fMask = SIF_POS;</span><br><span class="line">SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);</span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line"><span class="keyword">if</span> (si.nPos != iFont)</span><br><span class="line">&#123;</span><br><span class="line">iFont = si.nPos;</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> VK_HOME:</span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_TOP, lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_END:</span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_BOTTOM, lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_PRIOR:</span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_PAGEUP, lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_NEXT:</span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_PAGEDOWN, lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_UP:</span><br><span class="line"><span class="keyword">case</span> VK_LEFT:</span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_LINEUP, lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN:</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT:</span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_LINEDOWN, lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">LOGFONTINFO* pLgftInfo = lgftArry[iFont];</span><br><span class="line">DrawFontInfo(hwnd, hdc, pLgftInfo-&gt;logFont, pLgftInfo-&gt;fontType, iFont);</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> tmp : lgftArry)</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/481c226a/2020013114584426.gif"><p>在我电脑上运行后,有1231种字体.</p><h3 id="651-一些关于插入符号的函数"><a class="markdownIt-Anchor" href="#651-一些关于插入符号的函数"></a> 6.5.1 一些关于插入符号的函数</h3><p>Windows中有五个基本的插入符号函数:</p><ul><li>CreateCaret: 创建和窗口关联的插入符号</li><li>SetCaretPos: 设置窗口内的插入符号的位置</li><li>ShowCaret: 显示插入符号</li><li>HideCaret: 隐藏插入符号(效果是累加的,因此次数要与ShowCaret匹配)</li><li>DestroyCaret: 销毁插入符号</li><li>GetCaretPos: 获得当前插入符号的位置</li><li>SetCaretBlinkTime: 设置插入符号闪烁时间</li><li>GetCaretBlinkTime: 获取插入符号闪烁时间</li></ul><p>程序通过WM_SETFOCUS和WM_KILLFOCUS消息来决定是否具有输入焦点<br>这些消息成对出现:<strong>在收到WM_KILLFOCUS消息之前,总会收到一条WM_SETFOCUS消息</strong><br>使用插入符号的主要规则很简单: <strong>窗口过程处理WM_SETFOCUS消息时调用CreateCaret函数,处理WM_KILLFOCUS消息时调用DestroyCaret函数</strong></p><h2 id="综合运用-4"><a class="markdownIt-Anchor" href="#综合运用-4"></a> 综合运用</h2><p>下面代码实现一个Typer<br>上下左右,Tab键,换行(Ctrl+Enter),回车换行(Enter),回退(Backspace),删除(Delete),清空(Esc)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER(x,y) *(pBuffer + y * cxBuffer + x)</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> DWORD    dwCharSet = DEFAULT_CHARSET;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>      cxChar, cyChar, cxClient, cyClient, cxBuffer, cyBuffer, xCaret, yCaret;</span><br><span class="line"><span class="keyword">static</span> TCHAR    *pBuffer = <span class="literal">NULL</span>;</span><br><span class="line">HDC             hdc;</span><br><span class="line"><span class="keyword">int</span>             x, y, i;</span><br><span class="line">PAINTSTRUCT     ps;</span><br><span class="line">TEXTMETRIC      tm;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_INPUTLANGCHANGE: <span class="comment">// 切换输入法</span></span><br><span class="line">dwCharSet = wParam;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">SelectObject(hdc, CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, dwCharSet, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, FIXED_PITCH, <span class="literal">NULL</span>));</span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;</span><br><span class="line">cyChar = tm.tmHeight;</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(SYSTEM_FONT)));</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">cxClient = LOWORD(lParam);</span><br><span class="line">cyClient = HIWORD(lParam);</span><br><span class="line"></span><br><span class="line">cxBuffer = max(<span class="number">1</span>, cxClient / cxChar);</span><br><span class="line">cyBuffer = max(<span class="number">1</span>, cyClient / cyChar);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pBuffer) <span class="built_in">free</span>(pBuffer);</span><br><span class="line">pBuffer = (TCHAR *)<span class="built_in">malloc</span>(cxBuffer * cyBuffer * <span class="keyword">sizeof</span> TCHAR);</span><br><span class="line">_tcsnset(pBuffer, TEXT(<span class="string">' '</span>), (<span class="keyword">size_t</span>)(cxBuffer * cyBuffer));</span><br><span class="line"></span><br><span class="line">xCaret = yCaret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hwnd == GetFocus())</span><br><span class="line">SetCaretPos(xCaret * cxChar, yCaret * cyChar);</span><br><span class="line"></span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SETFOCUS:</span><br><span class="line">&#123;</span><br><span class="line">CreateCaret(hwnd, <span class="literal">NULL</span>, cxChar, cyChar);</span><br><span class="line">SetCaretPos(xCaret * cxChar, yCaret * cyChar);</span><br><span class="line">ShowCaret(hwnd);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_KILLFOCUS:</span><br><span class="line">&#123;</span><br><span class="line">HideCaret(hwnd);</span><br><span class="line">DestroyCaret();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> VK_HOME:</span><br><span class="line">xCaret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_END:</span><br><span class="line">xCaret = cxBuffer - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_PRIOR:</span><br><span class="line">yCaret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_NEXT:</span><br><span class="line">yCaret = cyBuffer - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_LEFT:</span><br><span class="line">xCaret = max(<span class="number">0</span>, xCaret - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT:</span><br><span class="line">xCaret = min(cxBuffer - <span class="number">1</span>, xCaret + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_UP:</span><br><span class="line">yCaret = max(<span class="number">0</span>, yCaret - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN:</span><br><span class="line">yCaret = min(cyBuffer - <span class="number">1</span>, yCaret + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_DELETE:<span class="comment">// Delete</span></span><br><span class="line"><span class="keyword">for</span> (x = xCaret; x &lt; cxBuffer - <span class="number">1</span>; ++x)</span><br><span class="line">&#123;</span><br><span class="line">BUFFER(x, yCaret) = BUFFER(x + <span class="number">1</span>, yCaret);</span><br><span class="line">&#125;</span><br><span class="line">BUFFER(cxBuffer - <span class="number">1</span>, yCaret) = TEXT(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">HideCaret(hwnd);</span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">SelectObject(hdc, CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, dwCharSet, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, SYSTEM_FIXED_FONT, <span class="literal">NULL</span>));</span><br><span class="line">TextOut(hdc, xCaret * cxChar, yCaret * cyChar, &amp;BUFFER(xCaret, yCaret), cxBuffer - xCaret);</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(SYSTEM_FONT)));</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line">ShowCaret(hwnd);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">SetCaretPos(xCaret * cxChar, yCaret * cyChar);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LOWORD(lParam); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\b'</span>:<span class="comment">// backspace</span></span><br><span class="line"><span class="keyword">if</span> (xCaret &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">--xCaret;</span><br><span class="line">SendMessage(hwnd, WM_KEYDOWN, VK_DELETE, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">&#123;</span><br><span class="line">DWORD iState = VK_RIGHT;</span><br><span class="line"><span class="keyword">if</span> (GetKeyState(VK_SHIFT) &lt; <span class="number">0</span>) </span><br><span class="line">iState = VK_LEFT;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">SendMessage(hwnd, WM_KEYDOWN, iState, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (xCaret % <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>:<span class="comment">// Ctrl+Enter</span></span><br><span class="line"><span class="keyword">if</span> (++yCaret == cyBuffer)</span><br><span class="line">yCaret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\r'</span>:<span class="comment">// Enter</span></span><br><span class="line">xCaret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (++yCaret == cyBuffer)</span><br><span class="line">yCaret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case '\x1B':// ESC</span><br><span class="line">_tcsnset(pBuffer, TEXT(<span class="string">' '</span>), cxBuffer * cyBuffer);</span><br><span class="line">xCaret = yCaret = <span class="number">0</span>;</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">BUFFER(xCaret, yCaret) = (TCHAR)wParam;</span><br><span class="line">HideCaret(hwnd);</span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">SelectObject(hdc, CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, dwCharSet, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, FIXED_PITCH, <span class="literal">NULL</span>));</span><br><span class="line">TextOut(hdc, xCaret * cxChar, yCaret * cyChar, &amp;BUFFER(xCaret, yCaret), <span class="number">1</span>);</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(SYSTEM_FONT)));</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line">ShowCaret(hwnd);</span><br><span class="line"><span class="keyword">if</span> (++xCaret == cxBuffer)</span><br><span class="line">&#123;</span><br><span class="line">xCaret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (++yCaret == cyBuffer)</span><br><span class="line">yCaret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SetCaretPos(xCaret * cxChar, yCaret * cyChar);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">SelectObject(hdc, CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, dwCharSet, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, FIXED_PITCH, <span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; cyBuffer; ++y)</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, y * cyChar, &amp;BUFFER(<span class="number">0</span>, y), cxBuffer);</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(SYSTEM_FONT)));</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/481c226a/2020013114584427.gif"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h2 id=&quot;61-键盘基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#61-键盘基础&quot;&gt;&lt;/a&gt; 6.1 键盘基础&lt;/h2&gt;
&lt;h3 id=&quot;613-队列和同步&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#613
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[备份]装机后环境恢复</title>
    <link href="https://brianyi.github.io/posts/337fc8e9/"/>
    <id>https://brianyi.github.io/posts/337fc8e9/</id>
    <published>2020-01-31T08:09:01.000Z</published>
    <updated>2020-02-05T00:58:35.944Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入文章密码" />    <label for="pass">请输入文章密码</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19R5ZH/V/TeEi/CtpWpCSK3uByx0IZT2uiOfx+HjaXVhjNidO4Y6oUPjELYWkEVYgkADEeXXovqxrQwfWQxaBGKZgemzduG74TA/atiaPt/b5CYGNcAfKZc4yI8A5QaHpZPZj8V1Xsvr0Heu5PCgO39dtEo0d7wvG2DoLBf37FxkIu96bIhFAV4EGVqisvitCs2poiw0cf7oV568UUQiN35SjBC6dhMn9KQJAyII157ZLd5ZMs91RJS4QBy7f3qS7KmDca5M7RKsfPCVsqc8IENXA/mI9J0o5jpLbe5NIpf6/mlL8/0T1CMLw6hFkzmPTZ6stbRToH0+PeQca/EzoeHFp1G0nRMJCawLr92mCQ0HDTfaR0R88/n3BFKGgzPoT4OPAFAq50S+o7rJE2Gca+m/uLgstP1HmScVMv5fKl77yV40+dXOtBNdBtKzqdz5XFq6G6kpaMUP1ypOTBr9qPS3/iIhbq87dAuxu/cx0OOBv2V8cjTJ3//3t9RiPSHA1wKLXmUsCxoqGcOYJIhRr+kU2jtkNFS2+UoLfpcJUKqf6n6HGzXZV6w+hlqjMOlppPPNovun8nepxVWr2wxr9OAV6sM/RbBLPbjt7Lx2iKqxVWekrJ++jeGnR6ZpDNsrtzLonu3KLnNev1XNgf4opGJLpa6Y0RQbIY+IFB3kExWtf+io3Ew/18gg4oybET0dLVAyxaGQYhFb4Sbr8l2x/TLq4ADB62Cw6H9HOATzAsvp2/6po3ECKDLBRM7Yp3DWvjjbyPKuW+2ftxxoxvcdgg7MpsWGJv6vOfCMaNrgjFP4KCzg2XK8MQsS3PeoBDB5YcR5x7nqhlwThkGaE91wDhKHzJnHbfGtvAvRjvqYlUDbnC68wrfjbZZ+BBlfqw4vaRBgo/PEsBiuXj1Jcrikv2jIzRve2iaDUma9vcMMHjEerLzSP5LjLM1w1tYQ9IEC4GDQkunBIikNsxom+UhbndNb11Jl19GutcphEiieNtUGEghs7qFbmxtVuiLc9ngW9S7NA1ZnAd8OQCiFyLCQzYslxieG7tfj8ysDFmjDn6NkR35eDENGmD64byxeCCBlhOTWa4QuH/ALYwdF8MLVnzNQsVgv21ldcOh/oerFniK7ia+y1KfFU5mmQ2M3igVeKFsrcPOuzz4z+jgmCiiAJovsRfCsE38AhTcPvloCznH+wf1pCURFj3LTP3s18FSNq7/RiGkdWjcCc/5Iv3ektN6Qv/d1Aa13/F1AiRLuysMB0KClTm3UFDNP5VZH7xSTCSUeblt5w/bP1KnFiXMOxqEx5UF3HfTY1quYCv+m8Fl9dpNh9hjs8tMAVEdGNaUO7YLX7rt55jj96agBTnJAUXt8Qm5pAEIBWNIzVdB55pV02ujU6e56KhMOXhOQfJi7uLuTfusl3Ahbf4LZ26+JUFP0YbKxNPq5Sg/p5QEW5NYYUGzPeg2SNlBityRnsvdTkJ3v0xR81lTaRDZ571N8zNiq//A7AO5YewvSnl6Aqkyclb06e8B6oCP1uTicEYE8hD353MlwgvBRMSdXU6vnVxkWep/y8/AAvvoCcbFC6zdxicuhwYDrZgrtBmp/oeZHnF29YCzg+3d7aWuIAFGUkyZsTETShtYx60yHGavnSA2ntri09AvpxbJmqF1L+muCTu83t7EwuMcROIETPfqAoiDEwIqJ0/QvFbmaPbCGTAjdi0ynt8se2KOG0PHjLT54OypEQSObToGaqV0PuFmh2zYUibGzpXeMwsjChUD1zwaSVh4GxptuPgWRBD1cwTbRnm0eDdNrNpJBFls55aCLJ6dVDTIIKtExxDTsoSlw3xgQyk+VhEpQFdu2r1dQx5lAnLtj5frGZu96ME2x9JvtFBm1U1ZVoaZkLELs4cz43JJjLpjF96zRTSnNxQh3nUfVVhlyO0JDzF+Hn6LwxZ3+8U6FgWzR7kC3W4/O1wZ5RVe/PMmsA/lr7G6clZy2heUj+JGm33zE9h2oZmnVVLyqB9P8LoQf02jhas1IzgUz39bXerevB7tRMyBvKgiKEg8bLkrImyPKdAaJh2b6CddtAnBoGOqzPUmvMj0tLPXqlrA2VxVtKOFU4v9YcJKHowy0bM/bICJGiTqJeKqY2XewWiTCVe+TtFNyLsbAwpb2csDLJ79yw4j4qlROPPrnje0zLIqqCKz14jGPt69okjd8Xz7YlrJQUyWDPr4d1gEFP4N3i+wbuyhV/sCwDpRiG4OsEODTDzd/2wG1Tw9obPXmOHFX62wqFnhArvQRm837Dpo6UicaFBZ/MEJQrmn/kZol/an64OZx5g3+5X5hSx6DyecYyUS9a6wfF0XBi08z7HZOQRS1FCLuPWthP1UzMWj5jXbYJ54fEq1gIbZk0kMSQQNjY/pca8ayCfa4t1Nj9ZfTyBGUYaznnPfJKmF5iW40mjf4RoXeCNdIY0W9H2TZ+jTs+AYpOs7u/g/0he/7D72uadGZX64fASf/766xi5IlyTNstbxAIrJHmGeykTmpK5el7I0pzrNa8+l2W3X1ilmKtD4kpSsMMjn1b2o7BzJ+B/CjhHkntt8x4onUTnVd89nqubKEQ10jbPINJpdLTa8X0S0piQX0MJMc9smUSv0YThMUb32InW4LI4WN1zv4EDA2WUtXQhvnpG8P8Lxzzb5UGbB9SU5Y8KAPuF7RvV55lMKRrD2i64NJpRytihcZuxEUy4wwny+thTU5mTSJHRoKYF2WOs8kC0kSf6rrJuX2IlxBMkCLYcGsrPpNMaTWLaNxZ84a3GXR6NDpohnyYgj2SDobiIucqvr5IwB0Xik/Qwe0HJslaiuZEbygcuQ1fqge4B08KleSXLx0mM+ylZEwAC8f6VRHv45NNxoDkWBbsIoLVzIARr+hE4pis97n8vi7qhCOWx5ytvctce/44DpSG7dI/rP9lS6r2CDlGo/AOAsSwSEWZLE1VGfGWKORYWK010jCd9QvIegZoOJ9IPW1uh+72z8mRYE/HmNQw20HalGu9aCI5WIZxDt694OlZPrgVxHeye7JKKplWw8HGZ0eInwgxkSg/simRbL7TEX1UQXn0v6LyK8FDHEJSfnoR2OrX2rQXwl8/OY16ioWW6qmrKzdpRcR1NXzfaTbbZsP/Wbvk92Yn9oB9wz59MEAe+9kfsP8S6+5CGNo7s6OlfJg5hCnTCCTCWUdZv+c5wvxRXw+VPsEgKl5wVWt/bzrpfdtewS4uPS5Pbf5W31oCOxz3lkLshoHZADJoJEjtSUAIQ8mo0KmVUo+/PCcjYMYpo+6VBHggVmQvHcdW0czax3iwjW28gTcrkYv4USwXbFA7aonmdSYP9hhNmW3l36oYNEvBKZYAu4WyXYiKj/W2qzq12f/vd/Aly/anGO33wUjPa4lnZT6nu4scBaZawcifk+R/TsIIi++eI9iGMd3oae6+ZOtM2MDEIVDBQpNK++z63NVfdwoF3FvxTDvEZOMgs7QkJO3KKMA/ZkLUBxh3DLvEQdO8dlw/u7X+exgyyLXivRd93LlT6jZYVjwRG7jfZFm4T0XZHhcvT0FVCw68LL6z5U8ZM6vL1MIsa0p4YTOWu5oJmLzZv5919ngwjU3eGmrvszytpIe2kBwiOqK5VKm/DFnd5QrrcBtRbZ+Ol7hw+iEDIpgM2l5NLxhh4CEmVIib4nk7XbnpVt2LggM9nSTWyxwDjZ6pKIrQSvG0+igSDP9IVHiJFY5MmPr4tw/WVz/h85QjInlGucnAD8Wqw98QP87ccGcfYNhsjKDtfyEs4wXxkoZ6C4XMlPc3kUNqiuU8If5xGs1vWkYHMVh/HRS8CfomnPbA4sFuaqLcDiHLgUMm/KwNs83w9J2Jm3DlyG2Zh0aEaghHEXFgbpsbjofhnLPvypNJO+3jRs7JWbYcGxcCABAqS3Ra7pRabSBo3vqCpOf2tePo7Ps1dNLA6Z53ZH9Dzt2g74u+rK7DiG9OIuagBrgP7ihcLA8k4CxLUhCLVAWPqbeneEgGTr20Bg4p8eeb/E3xTP8osBsnS1pruPOnWX7NIQp1UmDbCvfq7norEU5IeHDh48V1MCZcX6n/zLXvCggNwQX+UlvS9HlR9lWgDppPneSYL8/Dq9RidaD5JoS39opNWMfWJ2xZmajRbHHqxQdiCdMlMXkgP8p+UeyYBblXlXPN3pqFthVOaOHfFY2D1SWeAWhK0tui7wekDM045m9LzoMm9XATAz7ulC1d88+AUBmv/vgnQwVO5bAiiTLcJfPpSpe+87yjO/VY73uQWZ41kvJuILAD9Y0zPeiLaYSdb6G0Av5SVdFXoeClHv1UI3XC0OC0tEkyYPIiXMI5QLxVZ1L6suHoN/gGMwU0VMdzxa3F0+vnVhCO1q3uOuftegKRqkH8+UhyI1hwwbrsNXoHAVobwfhZ76tgPXF83URa44ZStXqRdNTSucwDbIPyFPmEO1wi9LGflH8yl9zcLAxCIWCVM+674RloZI/K+V0qR57Y2k1fq3Ar4NnpLNHdpTpRrnVeEpFmPasHYu0XKEbQwTM5deSAHZlM/RZD5xtZTumucl/jnD+5Hmc7ykq1l/dXQIhvn3AieLnjqAp09dMnbM6i/birxydPlSTvfkqTNG7doBZZ0Y40Bb9pft0gwA60ONUBo9OlCfBJJ8/4XMSr5SPlvQoLUTiJEkvTe57hF4/RQ068+KgXz43/mVNJlu6F8+kcCzd2mCUi1BYLnNDt9BGGjZX8fSPJXbPp7vcb4hYQR+B/v3Jx8e46LPrmkoNuPxGKeb0Hk1F5J0XeBLyajiQVpcAaASVZHJaVEhWF/KnMEC7rAVWU+wIYBhX1Ops8ZXDeCo7Fu7xQ9j9q++IuhCzaXBl5bMRCJOrfVPVONhTahbRRrfcox8TqF7XgfU9TL+U7iIdlOtYqMKv/ZAY1Gp0naQBfb6DVL8G/sXrSiXONJksvVm2mqc3EqbXWuISyF+yB/QqySD0jdMD86mY77WHjnWxjBulmWdZvaJBV+v/i/tVdz17Cic+KKcIL4ZuiY2WC7MxjZpG/sMUsv/SKZiVG2WhGXY7cRfP+SVXqbLg4LyqBMIBgQHMZsA+YAa+MeOtxJfWeZgzhCe6DtzIHJcU1La8pWpmqMcJFmlQED7DSwChFKoGqPiPHjucLrQ7lar//tLUdUGuG4SiQQatrHfRsOqcfoUoh8FdejDy8aFfGgFCrAperCsuOeSshOrM45Ly+rEEsEbGoWarw1AK1sW8TzPI+agQkUf+QjpXQ3RlfzDH09+/dtTB3xWYH+7wjWXISOTPJkSUHNPrcsIm1aFwACKpFP1UTkVg3fpIfpbsl90hMYMb3ovqTR7tvL1AzwJIaxVodaJShCwduLyrJea95y1OZjLP414uxzuR43vEFGHcSy0heEuolVq5jrJfIBi9nMg2J+Q9cR9eIztI3o9A38u/PP07mgZYSEuHSbr9w2xo0wUU5F63J7+QLEgy/gQP0eLhd5pezWo8w8A5wvXJ2yjSnDMz8liHYtsC8gIVDukWvZSXy548fz9S5exXlA3SPshBj0rf5Y/nomEmWzd</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      文章内容已被加密.&lt;/br&gt;
    
    </summary>
    
      <category term="备份" scheme="https://brianyi.github.io/categories/%E5%A4%87%E4%BB%BD/"/>
    
    
      <category term="备份" scheme="https://brianyi.github.io/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第5章 绘图基础</title>
    <link href="https://brianyi.github.io/posts/1e4abcd3/"/>
    <id>https://brianyi.github.io/posts/1e4abcd3/</id>
    <published>2020-01-30T02:00:15.000Z</published>
    <updated>2020-02-05T02:45:21.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="51-gdi的结构"><a class="markdownIt-Anchor" href="#51-gdi的结构"></a> 5.1 GDI的结构</h2><h3 id="511-gdi原理"><a class="markdownIt-Anchor" href="#511-gdi原理"></a> 5.1.1 GDI原理</h3><p>图形输出设备被分为两大类:<strong>光栅设备</strong>(raster device)和<strong>矢量设备</strong>(vector device)<br>大多数PC输出设备都是光栅设备,意味着他们将图像表示成以点的形式构成的矩阵.(例如视频显示器,点阵打印机和激光打印机)<br>矢量设备则使用线条绘制图像,通常指绘图机.<br><code>GDI总体上来说只是一个静态显示系统,对动画的支持很有限,如果你需要为游戏编写复杂的动画,那么应该学习DirectX.</code></p><ul><li><strong>GetDC</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">[Other program lines]</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br></pre></td></tr></table></figure><p>这里的设备环境指的是窗口的客户区(<code>GetDC(0)获取整个屏幕的设备环境</code>)</p><ul><li><strong>GetWindowDC</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdc = GetWindowDC(hwnd);</span><br><span class="line">[Other program lines]</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br></pre></td></tr></table></figure><p>这里的设备环境指的是整个窗口,包括客户区,窗口标题栏、菜单栏、滚动条和客户区的外框.(因此还应处理WM_NCPAINT非客户区绘制消息).<br>GetDC,ReleaseDC都不会让无效区域变得有效,只有BeginPaint才可以.</p><ul><li><strong>CreateDC和CreateIC</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hdc = CreateDC(pszDriver, pszDevice, pszOutput, pData);</span><br><span class="line">[Other program lines]</span><br><span class="line">DeleteDC(hdc);</span><br><span class="line"><span class="comment">// 例如: 获取以当前屏幕为设备环境</span></span><br><span class="line">hdc = CreateDC(TEXT(<span class="string">"DISPLAY"</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">[屏幕上绘图]</span><br><span class="line">DeleteDC(hdc);</span><br></pre></td></tr></table></figure><p>这里的设备环境可以为任意, 因为CreateDC是一个更通用的获取设备环境句柄的函数.<br><strong>有时候,仅需要获取设备环境的信息而不需要绘制东西,则使用CreateIC来获取信息上下文句柄(参数与CreateDC相同).</strong></p><ul><li><strong>CreateCompatibleDC</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdcMem = CreateCompatibleDC(hdc);</span><br><span class="line">[Other program lines]</span><br><span class="line">DeleteDC(hdcMem);</span><br></pre></td></tr></table></figure><p>这里的设备环境是内存</p><ul><li><strong>CreateMetaFile</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdcMeta = CreateMetaFile(pszFilename);</span><br><span class="line">[Other program lines]</span><br><span class="line">hmf = CloseMetaFile(hdcMeta);</span><br></pre></td></tr></table></figure><p>这里的设备环境是图源文件</p><h3 id="522-获取设备环境的信息"><a class="markdownIt-Anchor" href="#522-获取设备环境的信息"></a> 5.2.2 获取设备环境的信息</h3><p>获取设备环境的信息,可以通过GetDeviceCaps(获取设备的能力)来获取.</p><h3 id="527-保存设备环境"><a class="markdownIt-Anchor" href="#527-保存设备环境"></a> 5.2.7 保存设备环境</h3><ul><li><strong>终身生效设备环境</strong><br>Windows都会为设备环境设置默认值,如果想要在释放环境设备时,仍然保存对属性做的改变,以便下次调用GetDC或BeginPaint函数时,这些属性仍然有效,则需要在注册窗口时添加CS_OWNDC</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;</span><br></pre></td></tr></table></figure><p>那么每个基于该窗口类创建的窗口都有它的私有的设备环境,即使窗口被销毁仍然存在,使用CS_OWNDC时,只需要在WM_CREATE初始化设备环境一次即可.<br>OS_OWNDC样式仅影响通过GetDC和BeginPaint函数获得的设备环境.(OS_OWNDC需要一定的内存开销)</p><ul><li><strong>经常换设备环境</strong><br>对于需要经常设置的设备环境,则用SaveDC来保存设备环境状态</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idSaved = SaveDC(hdc);      <span class="comment">// 保存设备环境到idSaved</span></span><br><span class="line">RestoreDC(hdc, idSaved);    <span class="comment">// 继续使用idSaved设备环境</span></span><br></pre></td></tr></table></figure><p>也可如下(类似栈操作)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SaveDC(hdc);            <span class="comment">// 保存设备环境</span></span><br><span class="line">RestoreDC(hdc, <span class="number">-1</span>);     <span class="comment">// 恢复到最近一次保存的设备环境</span></span><br></pre></td></tr></table></figure><h2 id="53-点和线的绘制"><a class="markdownIt-Anchor" href="#53-点和线的绘制"></a> 5.3 点和线的绘制</h2><h3 id="532-直线"><a class="markdownIt-Anchor" href="#532-直线"></a> 5.3.2 直线</h3><p>默认的设备环境中,点(0,0)为最初设定的当前位置.<br>MoveToEx函数用来指定当前位置, LineTo用来指定直线的终点.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MoveToEx(hdc, xBeg, yBeg, <span class="literal">NULL</span>);    <span class="comment">// 设定最初的位置</span></span><br><span class="line">LineTo(hdc, xEnd, yEnd);            <span class="comment">// 指定直线终点</span></span><br><span class="line">GetCurrentPositionEx(hdc, &amp;pt);     <span class="comment">// 获取当前位置</span></span><br></pre></td></tr></table></figure><p><code>似乎这些画线函数不需要再WM_PAINT时处理,可以立即生效(毕竟不是大面积重绘)</code></p><h3 id="535-使用现有画笔"><a class="markdownIt-Anchor" href="#535-使用现有画笔"></a> 5.3.5 使用现有画笔</h3><p>画笔决定了线条的<strong>颜色、宽度和样式</strong>,样式可以是实现、点线或者虚线.</p><ul><li><strong>备用画笔</strong><br>GetStockObject可以获取备用的画笔(系统内置的).备用画笔只有3种,实心的黑色画笔,白色画笔和没有画笔.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hPen = GetStockObject(WHITE_PEN);   <span class="comment">// hPen为系统内置的画笔</span></span><br><span class="line">hPen = SelectObject(hdc, hPen);     <span class="comment">// hPen保存先前使用的画笔</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">hPen = SelectObject(hdc, GetStockObject(WHITE_PEN));    <span class="comment">// hPen保存先前使用的画笔</span></span><br></pre></td></tr></table></figure><ul><li><strong>创建画笔</strong><br>CreatePen或者CreatePenIndirect创建一个逻辑画笔,<strong>逻辑画笔和设备环境没有任何联系,多个设备环境可以使用同一个逻辑画笔.</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hPen = CreatePen(iPenStyle, iWidth, crColor); <span class="comment">// 创建逻辑画笔</span></span><br><span class="line">iOldPen = SelectObject(hdc, hPen); <span class="comment">// iOldPen保存先前使用的画笔</span></span><br><span class="line">DeleteObject(hPen); <span class="comment">// 删除逻辑画笔</span></span><br><span class="line">hPen = GetCurrentObject(hdc, OBJ_PEN); <span class="comment">// 获取当前设备环境的画笔句柄</span></span><br></pre></td></tr></table></figure><p>程序可以创建的<strong>6种GDI对象:画笔、画刷、位图、区域、字体和调色板</strong>。</p><blockquote><p>注意3条规则:</p><ul><li>最终应当删除你所创建的所有GDI对象</li><li>当GDI对象被选入一个有效的设备环境时,不要删除它</li><li>不要删除备用对象</li></ul></blockquote><p>如果你的程序在初始化时需要创建很多不同的画笔,那么CreatePenIndirect将比较合适.<br>通过GetCurrentObject来获取当前被选入设备环境的句柄</p><h3 id="537-填充空隙"><a class="markdownIt-Anchor" href="#537-填充空隙"></a> 5.3.7 填充空隙</h3><p>点和虚线之间的空隙是什么颜色呢?<br>空隙的颜色由设备环境的两个属性<strong>背景模式</strong>和<strong>背景颜色</strong>决定.<br>默认背景模式是OPAQUE(不透明),这意味着Windows使用背景颜色来填充空隙.<br>可以通过SetBkColor来改变Windows填充空隙的背景颜色</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetBkMode(hdc, OPAQUE);     <span class="comment">// 设置背景模式为不透明</span></span><br><span class="line">SetBkColor(hdc, crColor);   <span class="comment">// 设置背景颜色</span></span><br></pre></td></tr></table></figure><p>可以通过SetBkMode来阻止Windows填充空隙的背景颜色</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetBkMode(hdc, TRANSPARENT); <span class="comment">// 设置背景模式为透明(阻止Windows填充背景颜色)</span></span><br><span class="line"><span class="keyword">int</span> iBkMode = GetBkMode(hdc);              <span class="comment">// 获取背景模式</span></span><br></pre></td></tr></table></figure><h3 id="538-绘图模式"><a class="markdownIt-Anchor" href="#538-绘图模式"></a> 5.3.8 绘图模式</h3><p>除了可以设置画笔颜色,也可以通过设定绘图模式来灵活的使画笔颜色随背景色而改变.<br>可以通过调用SetROP2来设置一种新的绘图模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetROP2(hdc, iDrawMode);    <span class="comment">// 设置绘图模式</span></span><br><span class="line">iDrawMode = GetROP2(hdc);   <span class="comment">// 获取绘图模式</span></span><br></pre></td></tr></table></figure><p>系统默认绘图模式为R2_COPYPEN模式,它简单地用画笔颜色替代目标颜色.<br>当绘图模式设置为R2_NOT模式时,则画笔的颜色为背景颜色相反(取反),而不管画笔的颜色.</p><h2 id="54-绘制填充区域"><a class="markdownIt-Anchor" href="#54-绘制填充区域"></a> 5.4 绘制填充区域</h2><p>Windows使用画刷来填充区域<br>主要讲解多边形绘制Polygon,PolyPolygon和多边形填充模式SetPolyFillMode<br><strong>ALTERNATE模式</strong></p><p><strong>WINDING模式</strong></p><h3 id="542-用画刷填充内部"><a class="markdownIt-Anchor" href="#542-用画刷填充内部"></a> 5.4.2 用画刷填充内部</h3><p>建立逻辑画刷CreateSolidBrush,如果要使用&quot;阴影标记&quot;来建立画刷则用CreateHatchBrush</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hBrush = CreateSolidBrush(crColor);                 <span class="comment">// 建立逻辑画刷</span></span><br><span class="line">hBrush = CreateHatchBrush(iHatchStyle, crColor);    <span class="comment">// 建立使用阴影标记填充的逻辑画刷</span></span><br></pre></td></tr></table></figure><p>CreatePatternBrush和CreateDIBPatternBrushPt用来建立自己的位图画刷<br>CreateBrushIndirect函数包含以上4个函数的所有功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hBrush = CreateBrushIndirect(&amp;logbrush);    <span class="comment">// 建立逻辑画刷,包含以上4个函数的所有功能</span></span><br><span class="line">GetObject(hBrush, <span class="keyword">sizeof</span> (LOGBRUSH), (LPVOID)&amp;logbrush);    <span class="comment">// 获取画刷信息</span></span><br></pre></td></tr></table></figure><h2 id="55-gdi映射模式"><a class="markdownIt-Anchor" href="#55-gdi映射模式"></a> 5.5 GDI映射模式</h2><p>映射模式是为了避免编程时需要自己进行缩放工作而提供的一个方便的途径.<br>默认映射模式为MM_TEXT(逻辑单位和物理单位相同都为像素),与映射模式相关的有:</p><ul><li>窗口原点(window origin)</li><li>视口远点(viewport origin)</li><li>窗口范围(window extents)</li><li>视口范围(viewport extents)</li></ul><p>Windos定义了8种映射模式,如下</p><img src="/posts/1e4abcd3/2020013110102419.png"><p>MM_ISOTROPIC,MM_ANISOTROPIC这两种映射模式的坐标轴方不改变方向,只用于解放范围,只有前面6个映射模式有坐标轴方向.<br>下面的代码将实现MM_LOENGLISH映射模式下的y值向下增长.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SetMapMode(hdc, MM_LOENGLISH);      <span class="comment">// 设定映射模式为MM_LOENGLISH</span></span><br><span class="line">SetMapMode(hdc, MM_ANISOTROPIC);    <span class="comment">// 放开范围限制</span></span><br><span class="line">GetViewportExtEx(hdc, &amp;size);       <span class="comment">// 获取视口范围</span></span><br><span class="line">SetViewportExtEx(hdc, size.cx, -size.cy, <span class="literal">NULL</span>); <span class="comment">// 让y值向下增长</span></span><br></pre></td></tr></table></figure><p><code>映射模式是设备环境的一种属性,因此,只有当使用以设备环境句柄作为参数的GDI函数时.映射模式才会生效.</code></p><h3 id="552-设备坐标系统"><a class="markdownIt-Anchor" href="#552-设备坐标系统"></a> 5.5.2 设备坐标系统</h3><p>Windows会把GDI函数中指定的<strong>逻辑坐标(以逻辑坐标为单位)<strong>转换为</strong>设备坐标(以像素为单位)</strong>.<br>设备坐标有以下几种</p><ul><li>屏幕坐标: 整个屏幕坐标</li><li>全窗口坐标: 应用程序的整个应用窗口,包括标题栏、菜单、滚动条和边框</li><li>客户区坐标: 窗口内的客户区</li></ul><p><strong>(注意)一般来说,设备坐标(像素为单位)总是客户区坐标,左上角(0,0),x向右递增,y向下递增.</strong></p><p>三种坐标可以相互转换<br>ClientToScreen,ScreenToClient在客户区坐标和屏幕坐标之间相互转换</p><h3 id="553-视口和窗口"><a class="markdownIt-Anchor" href="#553-视口和窗口"></a> 5.5.3 视口和窗口</h3><p>映射模式被定义为从&quot;窗口&quot;(window)(逻辑坐标)到&quot;视口&quot;(viewport)(设备坐标)的映射.<br><strong>视口是以设备坐标(像素)的形式指定的.窗口时以逻辑坐标的形式指定的,可能是像素、毫米、英寸等.</strong><br>将窗口(逻辑)坐标转换为视口(设备)坐标</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi><mo>−</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi><mo>−</mo><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}    xViewport &amp;= (xWindow - xWinOrg)\times\frac{xViewExt}{xWinExt} + xViewOrg\\    yViewport &amp;= (yWindow - yWinOrg)\times\frac{yViewExt}{yWinExt} + yViewOrg\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8871em;vertical-align:-2.19355em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>将视口(设备)坐标转换为窗口(逻辑)坐标<code>(由上式推出来即可)</code></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo>−</mo><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo>−</mo><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>O</mi><mi>r</mi><mi>g</mi><mo stretchy="false">)</mo><mo>×</mo><mfrac><mrow><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>y</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>y</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>g</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}    xWindow &amp;= (xViewport - xViewOrg)\times\frac{xWinExt}{xViewExt} + xWinOrg\\    yWindow &amp;= (yViewport - yViewOrg)\times\frac{yWinExt}{yViewExt} + yWinOrg\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8871em;vertical-align:-2.19355em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.69355em;"><span style="top:-4.69355em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-2.34722em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19355em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPtoDP(hdc, pPoints, iNumber);  <span class="comment">// 逻辑坐标转设备坐标</span></span><br><span class="line">DPtoLP(hdc, pPoints, iNumber);  <span class="comment">// 设备坐标转逻辑坐标</span></span><br></pre></td></tr></table></figure><h3 id="554-使用mm_text"><a class="markdownIt-Anchor" href="#554-使用mm_text"></a> 5.5.4 使用MM_TEXT</h3><p>设置视口原点SetViewportOrgEx,设置窗口原点SetWindowOrgEx(但不推荐一起使用)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">2</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);    <span class="comment">// 设置视口原点</span></span><br><span class="line">SetWindowOrgEx(hdc, -cxClient / <span class="number">2</span>, -cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);    <span class="comment">// 设置窗口原点</span></span><br><span class="line">GetViewportOrgEx(hdc, &amp;pt); <span class="comment">// 获取视口原点</span></span><br><span class="line">GetWindowOrgEx(hdc, &amp;pt);   <span class="comment">// 获取窗口原点</span></span><br></pre></td></tr></table></figure><ul><li>练习</li></ul><blockquote><details><summary>练习1: 设置一个笛卡尔坐标系,原点在中央,逻辑坐标单位为像素（详情请点击本行）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetMapMode(hdc, MM_TEXT);   // 这句可以不写,因为MM_TEXT为默认映射模式</span></span><br><span class="line"><span class="comment">// SetWindowExtEx(hdc, cxClient, cyClient, NULL);  // 这句可以不写,因为MM_TEXT模式下本身比例因子就是1</span></span><br><span class="line">SetViewportExtEx(hdc, cxClient, -cyClient, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">2</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></details></blockquote><blockquote><details><summary>练习2: 设置一个笛卡尔坐标系,原点在中央,横轴[-100,100],纵轴[-50,50]（详情请点击本行）</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SetMapMode(hdc, MM_ANISOTROPIC);    <span class="comment">// 由于比例因子不为1了,也就是逻辑坐标与设备坐标并不是1:1对应了,要设置模式为MM_ANISOTROPIC</span></span><br><span class="line">SetWindowExtEx(hdc, <span class="number">100</span> * <span class="number">2</span>, <span class="number">50</span> * <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, cxClient, -cyClient, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">2</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></details></blockquote><p>下面一个简单的Demo展示从<strong>屏幕坐标,窗口客户区坐标,逻辑坐标的关联</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> POINTptScreenPos, ptClientPos, ptLogicPos;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxClient, cyClient;</span><br><span class="line">HDC hdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">TCHAR szBuffer[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">static</span> BOOL fIsCapture;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">cxClient = LOWORD(lParam);</span><br><span class="line">cyClient = HIWORD(lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line"><span class="keyword">if</span> (wParam == VK_RETURN &amp;&amp; !fIsCapture)</span><br><span class="line">&#123;</span><br><span class="line">fIsCapture = TRUE;</span><br><span class="line">SetCapture(hwnd);</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (wParam == VK_ESCAPE &amp;&amp; fIsCapture)</span><br><span class="line">&#123;</span><br><span class="line">fIsCapture = FALSE;</span><br><span class="line">ReleaseCapture();</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line"><span class="keyword">if</span> (fIsCapture)</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">if</span> (fIsCapture)</span><br><span class="line">&#123;</span><br><span class="line">SaveDC(hdc);</span><br><span class="line">            <span class="comment">// 下面四行代码可以自行更改,实现不同的坐标系,这里实现的是练习2的坐标系</span></span><br><span class="line">SetMapMode(hdc, MM_ANISOTROPIC);</span><br><span class="line">SetWindowExtEx(hdc, <span class="number">100</span> * <span class="number">2</span>, <span class="number">50</span> * <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, cxClient, -cyClient, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">2</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">Ellipse(hdc, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">GetCursorPos(&amp;ptScreenPos);</span><br><span class="line">ptClientPos = ptScreenPos;</span><br><span class="line">ScreenToClient(hwnd, &amp;ptClientPos);</span><br><span class="line">ptLogicPos = ptClientPos;</span><br><span class="line">DPtoLP(hdc, &amp;ptLogicPos, <span class="number">1</span>);</span><br><span class="line">RestoreDC(hdc, <span class="number">-1</span>);</span><br><span class="line">SetTextColor(hdc, RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">10</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"正在捕获鼠标,中间圆圈表示中心位置,按Esc则停止捕获."</span>), ptScreenPos.x, ptScreenPos.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">SetTextColor(hdc, RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">10</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"按回车(Enter)则开始捕获鼠标位置."</span>), ptScreenPos.x, ptScreenPos.y));</span><br><span class="line">&#125;</span><br><span class="line">SetTextColor(hdc, RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">40</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"屏幕坐标(%3d, %3d)"</span>), ptScreenPos.x, ptScreenPos.y));</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">70</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"窗口客户区坐标(%3d, %3d)"</span>), ptClientPos.x, ptClientPos.y));</span><br><span class="line">TextOut(hdc, <span class="number">10</span>, <span class="number">100</span>, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"逻辑坐标(%3d, %3d)"</span>), ptLogicPos.x, ptLogicPos.y));</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我依次将鼠标移动到了下面这些位置:</p><ul><li>屏幕坐标(0,0)</li><li>窗口客户区坐标(0,0)</li><li>逻辑坐标(0,0)</li><li>逻辑坐标右上角(100,50),逻辑坐标右下角(100,-50),回到屏幕坐标(0,0)</li></ul><p>注意当要捕获窗口外鼠标的坐标时,需要按住鼠标的一个按钮(左,中,右都可)不放,然后移动才行,这是因为SetCapture函数的功能: “将鼠标捕获设置为属于当前线程的指定窗口。当鼠标位于捕获窗口上方时，或者当鼠标位于捕获窗口上方且按钮仍处于关闭状态时，SetCapture捕获鼠标输入。一次只有一个窗口可以捕获鼠标。”<br>效果如下</p><img src="/posts/1e4abcd3/2020013114584432.gif"><p>那么<a href="../c1bee057#jump-0">第4章的 综合运用</a>部分绘图代码可以改为如下</p><ul><li><strong>方法1</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;   </span><br><span class="line">    ...</span><br><span class="line">    SetWindowOrgEx(hdc, cxChar * iHorzPos, cyChar * iVertPos, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">for</span> (i = iPaintBeg; i &lt;= iPaintEnd; ++i)</span><br><span class="line">&#123;</span><br><span class="line">x = cxChar * <span class="number">1</span>;</span><br><span class="line">y = cyChar * i;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>方法2</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    SetMapMode(hdc, MM_ANISOTROPIC);    <span class="comment">// 此句与下面两句实现一个坐标系,每逻辑单位表示一个字符宽度和高度</span></span><br><span class="line">    SetWindowExtEx(hdc, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    SetViewportExtEx(hdc, cxChar, cyChar, <span class="literal">NULL</span>);    <span class="comment">// 改为cyChar * 2就可以做到隔行显示</span></span><br><span class="line">    SetWindowOrgEx(hdc, iHorzPos, iVertPos, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = iPaintBeg; i &lt;= iPaintEnd; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        y = i;</span><br><span class="line">        TextOut(hdc, x, y, sysmetrics[i].szLabel, _tcslen(sysmetrics[i].szLabel));</span><br><span class="line">        TextOut(hdc, x + <span class="number">32</span>, y, sysmetrics[i].szDesc, _tcslen(sysmetrics[i].szDesc));</span><br><span class="line">        SetTextAlign(hdc, TA_RIGHT | TA_TOP);</span><br><span class="line">        <span class="keyword">int</span> iLen = swprintf_s(szBuffer, TEXT(<span class="string">"%5d"</span>), GetSystemMetrics(sysmetrics[i].iIndex));</span><br><span class="line">        TextOut(hdc, x + <span class="number">32</span> + <span class="number">40</span>, y, szBuffer, iLen);</span><br><span class="line">        SetTextAlign(hdc, TA_LEFT | TA_TOP);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2可以重点关注, 运用了映射模式,逻辑坐标与物理坐标之间的关系.</p><h3 id="555-度量映射模式"><a class="markdownIt-Anchor" href="#555-度量映射模式"></a> 5.5.5 度量映射模式</h3><img src="/posts/1e4abcd3/2020013112305821.png"><h3 id="556-自定义的映射模式"><a class="markdownIt-Anchor" href="#556-自定义的映射模式"></a> 5.5.6 自定义的映射模式</h3><p>这两种映射模式分别为MM_ISOTROPIC和MM_ANISOTROPIC, <strong>只有这两种映射模式下才允许你改变视口和窗口的范围</strong><br><strong>Windows能够通过调整窗口和视口的范围来处理图像大小的变化,这样就不用去管窗口的大小了</strong><br>MM_TEXT: &quot;完全受限&quot;的映射模式,不可以改变窗口和视口的范围(都为1,因而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>x</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow><mrow><mi>x</mi><mi>W</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{xViewExt}{xWinExt}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>).<br>MM_ISOTROPIC: &quot;半受限&quot;的映射模式,可以改变窗口和视口的范围,但是Windows会调整他们的值.<br>MM_ANISOTROPIC: &quot;不受限&quot;的映射模式,可以改变窗口和视口的范围,Windows不会调整他们的值.<br><code>若原图是正方形,MM_ISOTROPIC模式下,则怎么变化窗口大小,仍为正方形. MM_ANISOTROPIC模式下,则正方形会随窗口的长宽按比例变化,可能变成矩形.</code><br>下面程序将在左下角绘制自适应的坐标轴,大小始终只占4/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">        hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">RECT rc;</span><br><span class="line">GetClientRect(hwnd, &amp;rc);   <span class="comment">// 获取客户区大小</span></span><br><span class="line">cxClient = rc.right;</span><br><span class="line">cyClient = rc.bottom;</span><br><span class="line">SelectObject(hdc, GetStockObject(WHITE_PEN));       <span class="comment">// 坐标轴绘制使用白色画笔</span></span><br><span class="line">SetMapMode(hdc, MM_ISOTROPIC);                      <span class="comment">// 下面三行顺序永远不能变</span></span><br><span class="line">SetWindowExtEx(hdc, <span class="number">100</span>, <span class="number">100</span>, <span class="literal">NULL</span>);                <span class="comment">// 设置逻辑窗口大小</span></span><br><span class="line">SetViewportExtEx(hdc, cxClient, -cyClient, <span class="literal">NULL</span>);   <span class="comment">// 设置视口大小,这里正负号可以改变逻辑坐标轴方向</span></span><br><span class="line">SetViewportOrgEx(hdc, <span class="number">0</span>, cyClient, <span class="literal">NULL</span>);           <span class="comment">// 将视口原点设置在(0,cyClient)位置,即屏幕左下角</span></span><br><span class="line">MoveToEx(hdc, <span class="number">10</span>, <span class="number">10</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, <span class="number">90</span>, <span class="number">10</span>);</span><br><span class="line">MoveToEx(hdc, <span class="number">10</span>, <span class="number">10</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, <span class="number">10</span>, <span class="number">90</span>);</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面左图为运行结果, 可以看到绘制坐标轴会随窗口大小而自适应.右图MM_ANISOTROPIC则不会保持正确的高宽比.</p><table><tr><td> <img src="/posts/1e4abcd3/2020013114584422.gif">使用MM_ISOTROPIC</td><td> <img src="/posts/1e4abcd3/2020013114584423.gif">使用MM_ANISOTROPIC</td></tr></table><p><code>先窗口,再视口</code>这个顺序不能变.可以看到MM_ISOTROPIC与MM_ANISOTROPIC的区别.</p><p>下面的代码来实现一个以厘米为单位的格尺</p><blockquote><details><summary>查看代码（详情请点击本行）</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">RECT rc;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> iLen = <span class="number">0</span>;</span><br><span class="line">GetClientRect(hwnd, &amp;rc);</span><br><span class="line">cxClient = rc.right;</span><br><span class="line">cyClient = rc.bottom;</span><br><span class="line">SelectObject(hdc, GetStockObject(WHITE_PEN));</span><br><span class="line">SetTextColor(hdc, RGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">SetBkMode(hdc,TRANSPARENT);</span><br><span class="line">SetMapMode(hdc, MM_LOMETRIC);</span><br><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">10</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, <span class="number">30</span> * <span class="number">10</span> * <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span> * <span class="number">10</span> * <span class="number">10</span>; i += <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">MoveToEx(hdc, i, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, i, i % <span class="number">100</span> ? <span class="number">10</span> : <span class="number">25</span>);</span><br><span class="line"><span class="keyword">if</span> (!(i % <span class="number">100</span>))</span><br><span class="line">&#123;</span><br><span class="line">iLen = swprintf(szBuffer, TEXT(<span class="string">"%d"</span>), i / <span class="number">100</span>);</span><br><span class="line">TextOut(hdc, i, <span class="number">-10</span>, szBuffer, iLen);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details></blockquote><img src="/posts/1e4abcd3/2020013116542124.png"><h2 id="综合应用"><a class="markdownIt-Anchor" href="#综合应用"></a> 综合应用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SysMets.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">PSTR szCmdLine, <span class="keyword">int</span> iCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> TCHAR szAppName[] = TEXT(<span class="string">"WhatSize"</span>);</span><br><span class="line">HWND         hwnd;</span><br><span class="line">MSG          msg;</span><br><span class="line">WNDCLASS     wndclass;</span><br><span class="line"></span><br><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">wndclass.lpfnWndProc = WndProc;</span><br><span class="line">wndclass.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">wndclass.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wndclass.hInstance = hInstance;</span><br><span class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">wndclass.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.lpszClassName = szAppName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>),</span><br><span class="line">szAppName, MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hwnd = CreateWindow(szAppName, TEXT(<span class="string">"What Size is the Window?"</span>),</span><br><span class="line">WS_OVERLAPPEDWINDOW,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ShowWindow(hwnd, iCmdShow);</span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line">DispatchMessage(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(HWND hwnd, HDC hdc, <span class="keyword">int</span> iMode, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> TCHAR *text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RECT rc;</span><br><span class="line">TCHAR szBuffer[<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line">SaveDC(hdc);<span class="comment">// 保存之前的设备环境,即按文字大小为逻辑单位的映射模式</span></span><br><span class="line">GetClientRect(hwnd, &amp;rc);</span><br><span class="line">SetMapMode(hdc, iMode);<span class="comment">// 设置新的映射模式</span></span><br><span class="line">DPtoLP(hdc, (PPOINT)&amp;rc, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> iLen = swprintf(szBuffer, TEXT(<span class="string">"%-20s %7d %7d %7d %7d"</span>), text, rc.left, rc.right, rc.top, rc.bottom);</span><br><span class="line">RestoreDC(hdc, <span class="number">-1</span>);<span class="comment">// 恢复之前的文字大小为逻辑单位的映射模式</span></span><br><span class="line"></span><br><span class="line">TextOut(hdc, x, y, szBuffer, iLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> TCHAR    szHeading[] =</span><br><span class="line">TEXT(<span class="string">"Mapping Mode            Left   Right     Top  Bottom"</span>);</span><br><span class="line"><span class="keyword">static</span> TCHAR    szUndLine[] =</span><br><span class="line">TEXT(<span class="string">"------------            ----   -----     ---  ------"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>  cxChar, cyChar;</span><br><span class="line">HDC         hdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">TEXTMETRIC  tm;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line">SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));   <span class="comment">// 只为获取字符大小,ReleaseDC后便销毁了</span></span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;</span><br><span class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));   <span class="comment">// 为了采用等宽字体,若设置了CS_OWNDC,这句则可以注释</span></span><br><span class="line">SetMapMode(hdc, MM_ANISOTROPIC);</span><br><span class="line">SetWindowExtEx(hdc, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, cxChar, cyChar, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        TextOut(hdc, <span class="number">1</span>, <span class="number">1</span>, szHeading, _tcslen(szHeading));</span><br><span class="line">TextOut(hdc, <span class="number">1</span>, <span class="number">2</span>, szUndLine, _tcslen(szUndLine));</span><br><span class="line"></span><br><span class="line">        Show(hwnd, hdc, MM_TEXT, <span class="number">1</span>, <span class="number">3</span>, TEXT(<span class="string">"TEXT (pixels)"</span>));</span><br><span class="line">Show(hwnd, hdc, MM_LOMETRIC, <span class="number">1</span>, <span class="number">4</span>, TEXT(<span class="string">"LOMETRIC (.1 mm)"</span>));</span><br><span class="line">Show(hwnd, hdc, MM_HIMETRIC, <span class="number">1</span>, <span class="number">5</span>, TEXT(<span class="string">"HIMETRIC (.01 mm)"</span>));</span><br><span class="line">Show(hwnd, hdc, MM_LOENGLISH, <span class="number">1</span>, <span class="number">6</span>, TEXT(<span class="string">"LOENGLISH (.01 in)"</span>));</span><br><span class="line">Show(hwnd, hdc, MM_HIENGLISH, <span class="number">1</span>, <span class="number">7</span>, TEXT(<span class="string">"HIENGLISH (.001 in)"</span>));</span><br><span class="line">Show(hwnd, hdc, MM_TWIPS, <span class="number">1</span>, <span class="number">8</span>, TEXT(<span class="string">"TWIPS (1/1440 in)"</span>));</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于要获取不同映射模式下的客户区坐标,那么需要用SaveDC将之前的映射模式保存,然后设置新的映射模式,获取客户区坐标,通过DPtoLP转换为逻辑坐标,接着用RestoreDC恢复之前的映射模式(专门用于文本显示的映射模式)来显示文本.</p><img src="/posts/1e4abcd3/2020013120345926.png"><h3 id="561-处理矩形"><a class="markdownIt-Anchor" href="#561-处理矩形"></a> 5.6.1 处理矩形</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FillRect(hdc, &amp;rect, hBrush);   <span class="comment">// 填充矩形</span></span><br><span class="line">FrameRect(hdc, &amp;rect, hBrush);  <span class="comment">// 边框矩形</span></span><br><span class="line">InvertRect(hdc, &amp;rect); <span class="comment">// 反色矩形</span></span><br></pre></td></tr></table></figure><ul><li><p>将矩形沿x轴和y轴移动几个单位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OffsetRect(&amp;rect, x, y);</span><br></pre></td></tr></table></figure></li><li><p>增大或减小矩形的尺寸</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InflateRect(&amp;rect, x, y);</span><br></pre></td></tr></table></figure></li><li><p>把矩形结构的各字段设置为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetRectEmpty(&amp;rect);</span><br></pre></td></tr></table></figure></li><li><p>将一个矩形结构复制到另一个矩形结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CopyRect(&amp;DestRect, &amp;SrcRect);</span><br></pre></td></tr></table></figure></li><li><p>获取两个矩形的交集</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntersectRect(&amp;DestRect, &amp;SrcRect1, &amp;SrcRect2);</span><br></pre></td></tr></table></figure></li><li><p>获取两个矩形的并集</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnionRect(&amp;DestRect, &amp;SrcRect1, &amp;SrcRect2);</span><br></pre></td></tr></table></figure></li><li><p>判断矩形是否为空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bEmpty = IsRectEmpty(&amp;rect);</span><br></pre></td></tr></table></figure></li><li><p>判断点是否在矩形内部</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bInRect = PtInRect(&amp;rect, point);</span><br></pre></td></tr></table></figure></li></ul><h3 id="563-建立和绘制区域"><a class="markdownIt-Anchor" href="#563-建立和绘制区域"></a> 5.6.3 建立和绘制区域</h3><p>区域是对显示器一块空间的描述,将区域选入设备环境,就可以使用这个区域来剪裁(绘制动作限制在这个区域中).<br><code>区域也是GDI对象</code>,<strong>以下所有函数都使用的是逻辑坐标(这里有疑惑,为啥在程序里都是用的设备坐标,即需要LPtoDP,然后用的Device Point)</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建区域</span></span><br><span class="line">hRgn = CreateRectRgn(xLeft, yTop, xRight, yBottom);         <span class="comment">// 创建矩形区域</span></span><br><span class="line">hRgn = CreateRectRgnIndirect(&amp;rect);                        <span class="comment">// 创建矩形区域</span></span><br><span class="line">hRgn = CreateEllipticRgn(xLeft, yTop, xRight, yBottom);     <span class="comment">// 创建椭圆形区域</span></span><br><span class="line">hRgn = CreateEllipticRgnIndirect(&amp;rect);                    <span class="comment">// 创建椭圆形区域</span></span><br><span class="line">hRgn = CreatePolygonRgn(&amp;point, iCount, iPolyFillMode);     <span class="comment">// 创建多边形区域</span></span><br><span class="line"><span class="comment">// 结合区域</span></span><br><span class="line">iRgnType = CombineRgn(hDestRgn, hSrcRgn1, hSrcRgn2, iCombine);  <span class="comment">// 将两个源区域结合</span></span><br><span class="line"><span class="comment">// 绘制区域</span></span><br><span class="line">FillRgn(hdc, hRgn, hBrush);                     <span class="comment">// 类比FillRect</span></span><br><span class="line">FrameRgn(hdc, hRgn, hBrush, xFrame, yFrame);    <span class="comment">// 类比FrameRect</span></span><br><span class="line">InvertRgn(hdc, hRgn);                           <span class="comment">// 类比InvertRect</span></span><br><span class="line">PaintRgn(hdc, hRgn);</span><br><span class="line"><span class="comment">// 无效,有效区域</span></span><br><span class="line">InvalidateRgn(hwnd, hRgn, bErase);  <span class="comment">// 使区域无效,并post一个WM_PAINT消息</span></span><br><span class="line">ValidateRgn(hwnd, hRgn);            <span class="comment">// 使区域有效</span></span><br><span class="line"><span class="comment">// 区域选入设备环境(剪裁区域假定使用的是设备坐标)</span></span><br><span class="line">SelectObject(hdc, hRgn);    <span class="comment">// 将区域选入设备环境</span></span><br><span class="line">SelectClipRgn(hdc, hRgn);   <span class="comment">// 将区域选入设备环境</span></span><br></pre></td></tr></table></figure><img src="/posts/1e4abcd3/2020013122073528.png"><h3 id="564-矩形与区域的剪裁"><a class="markdownIt-Anchor" href="#564-矩形与区域的剪裁"></a> 5.6.4 矩形与区域的剪裁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InvalidateRgn(hwnd, hRgn, bErase);  <span class="comment">// 使区域无效</span></span><br><span class="line">ValidateRgn(hwnd, hRgn);            <span class="comment">// 使区域有效</span></span><br><span class="line">SelectObject(hdc, hRgn);            <span class="comment">// 选择要裁剪的区域</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">SelectClipRgn(hdc, hRgn);           <span class="comment">// 选择要裁剪的区域</span></span><br><span class="line">DeleteObject(hdc, hRgn);            <span class="comment">// 删除句柄</span></span><br></pre></td></tr></table></figure><p>GDI为剪裁区域做了一个副本,因此当把区域对象选入到设备环境后可以删除它</p><h2 id="综合运用"><a class="markdownIt-Anchor" href="#综合运用"></a> 综合运用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">int</span> cxWindowExt = <span class="number">100</span>, cyWindowExt = <span class="number">100</span>;<span class="comment">// 设定逻辑坐标系的范围</span></span><br><span class="line"><span class="keyword">int</span> r = cxWindowExt / <span class="number">2</span>;<span class="comment">// 大圆半径(整个屏幕有一个大圆,线条从圆心出发)</span></span><br><span class="line"><span class="comment">// 设置为笛卡尔坐标系,逻辑坐标范围x[-50,50],y[-50,50]</span></span><br><span class="line">SetMapMode(hdc, MM_ANISOTROPIC);</span><br><span class="line">SetWindowExtEx(hdc, cxWindowExt, cyWindowExt, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, cxClient, -cyClient, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportOrgEx(hdc, cxClient / <span class="number">2</span>, cyClient / <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">RECT rc[<span class="number">4</span>] = &#123;<span class="comment">// 4个小圆逻辑坐标</span></span><br><span class="line">&#123;-r / <span class="number">2</span>, <span class="number">0</span>, r / <span class="number">2</span>, r&#125;,</span><br><span class="line">&#123;-r / <span class="number">2</span>, <span class="number">0</span>, r / <span class="number">2</span>,-r&#125;,</span><br><span class="line">&#123;-r,r / <span class="number">2</span>, <span class="number">0</span>,-r / <span class="number">2</span>&#125;,</span><br><span class="line">&#123;r, r / <span class="number">2</span>, <span class="number">0</span>, -r / <span class="number">2</span>&#125; &#125;;</span><br><span class="line">LPtoDP(hdc, (PPOINT)&amp;rc, <span class="number">8</span>);<span class="comment">// 逻辑坐标转为设备坐标(像素为单位)</span></span><br><span class="line"></span><br><span class="line">HRGN hRgnTemp[<span class="number">6</span>],hRgnClip;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">hRgnTemp[i] = CreateEllipticRgnIndirect(&amp;rc[i]);<span class="comment">// 实际填充的是设备坐标(像素为单位)</span></span><br><span class="line">hRgnTemp[<span class="number">4</span>] = CreateRectRgn(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">// 由于HRGN必须有效才可以使用,因此需要初始化一下</span></span><br><span class="line">hRgnTemp[<span class="number">5</span>] = CreateRectRgn(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">hRgnClip = CreateRectRgn(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">CombineRgn(hRgnTemp[<span class="number">4</span>], hRgnTemp[<span class="number">0</span>], hRgnTemp[<span class="number">1</span>], RGN_OR);</span><br><span class="line">CombineRgn(hRgnTemp[<span class="number">5</span>], hRgnTemp[<span class="number">2</span>], hRgnTemp[<span class="number">3</span>], RGN_OR);</span><br><span class="line">CombineRgn(hRgnClip, hRgnTemp[<span class="number">4</span>], hRgnTemp[<span class="number">5</span>], RGN_XOR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">DeleteObject(hRgnTemp[i]);</span><br><span class="line"></span><br><span class="line">SelectClipRgn(hdc, hRgnClip); <span class="comment">// or SelectObject(hdc, hRgnClip);</span></span><br><span class="line">DeleteObject(hRgnClip); <span class="comment">// GDI为剪裁区域做了一个副本,因此当把区域对象选入到设备环境后可以删除它</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> radius = _hypot(r, r);<span class="comment">// 让大圆把客户区包下,因此客户区可以绘满线条</span></span><br><span class="line"><span class="comment">// 绘制线条</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> angle = <span class="number">0.0</span>; angle &lt; <span class="number">2</span> * PI; angle += PI / <span class="number">180</span>)</span><br><span class="line">&#123;</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, (<span class="keyword">int</span>)(radius * <span class="built_in">cos</span>(angle)), (<span class="keyword">int</span>)(radius * <span class="built_in">sin</span>(angle)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/1e4abcd3/2020020109202129.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h2 id=&quot;51-gdi的结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#51-gdi的结构&quot;&gt;&lt;/a&gt; 5.1 GDI的结构&lt;/h2&gt;
&lt;h3 id=&quot;511-gdi原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[emacs]使用方法</title>
    <link href="https://brianyi.github.io/posts/30309ffd/"/>
    <id>https://brianyi.github.io/posts/30309ffd/</id>
    <published>2020-01-28T14:33:39.000Z</published>
    <updated>2020-01-29T06:08:28.309Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入文章密码" />    <label for="pass">请输入文章密码</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/KkC5cP9tKg1U6V4MW3fKpVAJlKYsklmuusRocB4gs38qGWLg8D/GWKHlKPZEB8je+PWXRKwdPbD0SgrRyuqBojS/9P2/D3MdxP86Me22Zg/DZSMukPTH+TgxMuJ0fqXEE3+vpCTln2jnkqv0oOTg+HExRPiVFldjPFUXppkXUCpPvBq5x259FEpmzZ4TQ4slWS2NioIMNksiYQOBQS1CNe7EVrj1UQQ9OMG/m35/MQEb0ZR68zHu5Vk6mhwggnDENyZrUA63NAK9l56n7B0xnoUQMBSFVx2iljxFPT1Wp5BHzVU2rAdPgUaNXuanpKeesZLlzds+1aPQA3FkTV7Jm7WzICUiLpK6+gC72WZrjRVEXAU5rSuHXJdBdPZEEgZGp/bfbRQBZkIK5fzVZkmov/IsavRq1SItCJ0pYVmlGnogOjHS6M8tiaIcijs1EDTova6VMUdG5lueLpMLPq7xfNuVv2NVstwKRc6mXAnne05IRt7B67q0ITl/g6EYNm/M04wcnOm+rcCnrZHDbjYS8i1QGXG2g9knPZI99wU7oTfrF26YeAMhhUAJttgAuHzwnquxqwPpNmRTo6xkzUUjMB7F/7UarSgEsQYx1utDY+WTi5EjfGG1nOSzWumftbJyhOhNMfb27J+22ObRlJVf/S+PZj2IKMzNVj+WOXtPQNXOdRKGHShS57oKv6llJHRdJ5myBG53DqMKtvpIW4w6G/Xz6LRb8b2SKoVt8hD4EmSYRilYc/a9HEepbrL/ueZJyVtMFUK+lx0m4bIrmAuCDuT0D/SvVeCSw+dijW7Aiji/t5L/pqZlArRzxJbAFT6PD/0ngdB/XAF2O4HVVhZ7tpWwj1tKc3o0rPrPbJnvL/ZcJDCdgyno9+sYfPd9wqgMmHr4oUIPC0vqD7OSDLYC21SeEC353qTfDtEVCqyLWjXG0D74y6N3c6VdiKoEre2ses2xeLp2ezPhB/Ge53Ww05qnyDX5iCDoWn2vuXB6Wz4VorsA4BiAvI06TJ3VxjkXh66V7SSf+zSs0kSg26zW+HngsD55WHh3oXIzGcZ4L0LXAaIhuUcAXFwcKul/y56tN6T4e56hFn9n4z8nwVOvbJ6dE6ObMmpHgcw49GMw1x2U3U955dbpQOydoaE7RzPalFqSNBKTuE5BZw29JHiEnudNJPZCEj/7VEWUktVGNSz+SvWagEtjT/XyMK8Xvm09RjVC0VghQnUURkX48WEm2z3tRlqnn1wztYLniIiPf5qRdmO/ksiKUQnDiQL9qJ/94faPUX3FnKFEXHJjhzwSzF8LlBGSEXxfyl1LgV9/LJGQuLMVZHKXUt1geciXrlpNbpEkiStvyZMyrptV/1i/76tU1LQmHhwoL4i5+/+XaqnmjnSOltjhcmPq6iTH5g6A9CFeXu8shzFe4nTc3YFhRce25GBUQRw41iTa8EYqlrTRXpFqIRw1/6I2D3l6nR29cdNorEzc92vxqyiOFYP2hbuxQPGi+wtSumhXr4Z2goWMwZt7U6cijnrT3XcZoyBBk2jl5m4j93IEyDKJhoE7bWHbmkMtmEEWTA/iU3v3zw6Xtqmf2Y0DWU+pIfFXoX23Z/pnuOB/UGp0h6l3jtI0T0YzmMbsrbhOuWbETh3zxmXoOH5pJh5Gg5icf6jxts53OTM2BkDKiUYqz8zx/w1tA0Y9FeKh08F7XhUxqnvDWAxhhms5t+Jk2RlUKcYBf++8Bx9wr8fPF7R156mJIDdY7Y9+C8mO4CkOfQOYfRGFPbWFHNRAEBYj7y53r9GQw75fB0LdCnenV+AIU7XFymYZLQFvX/EehuaYY0FIQDFdohZsYxt1feMHGgvqib6FAy64v6ATlWN0+KlUYWYh3BZkBnE+P57rGzEFBfiBm88uopuinwSXdWluzLqIPNQ2LTmIAYS848KlbLsCtBxTVaN5gnGbxujDAaD8WHmRINmqkvpLmOp01eDxblHeXQFv01IOMWbsyM7LJ8wuYE7TJq+zBd97RvoW8yf70Qz6qa+GdEp0gBHXxNHF2eJnvQ6LjucfyJZdp377WwxxiDCr1PkSNGMscg3L53yg1Yiaks3eYtk3XDs8LpbdK0y5aw5V+d0FAsVj6p0xJ6L3gA3Y4M6VnvDfQmu3ryBLTPW9Vrmww1jo/KXgYjobO1DVVuwtCKWaGjyWuPh3SWviGK1Cf+JzuRPXLV5/XvGSyX0gnOeV10MtHBeDfznRO4UrAGgaKlYTObFDqm9JgNp2OcFEVNgbvtPQN0O6neNuLDnYv08A6uGlC6HsHXVUKWvTopmuZXIfmxzEU1Hsqows5TfuIVxg9I/bSDNyQMgZVHbCti91HKOkV7Tjl6z2NfOLVS5yAUmBxVda++0+FiuKurHdKGj8bNGO1d+xhL/DEx/RUdw3CXtYIdo78Kie2V9hNp8wwFakThddEQIrd5KO/GQ7C4JDuV/aW1/0htFGt3JKy5FxH9Z/rNLZn//6Cw45bn1XhXME10x1iuYMqtzZNrg52UVby47tTMzONqLThpDK9rJLUca2hwB85x3DGXUf8aaSOZ9cxBiUJ+ocd1Sf8TcrM5lNQGfGL9o2eGxI1iv/LUBN9ZED8ZzLcBZjEfidEl7kvqhBtJ+g0PedYFf6/c4Mx+VBoe8o7DXN8jP1CJi1pF5eGbzZ5UN02G2afiQCvsI0y+K/DJY43ReEX0SrLFFuwrDyrC1L7DDFh4OWnkjnNoqdFFO3J494s4FUcH9IU3eb7Dw04XDgw5g4gTK5yzk+db+m0f4/XmvRs/uwKGqM28rFDDxSmGzpdNz6AWjVS2HZvTYXTjupTqDMqQjW7RhMqROuMLSLJQUUrPSdOh4xHr3tP+Ae+hvv14RUxMwz+yDAkOIOmpBphW062CuuRt+TKKi3463WcV0F+fgEPF3Q2Fs16vDXqXeAAt84ZluEP4v3P17I6CjJZ+nzWwmn6pir3XDeZUF6n0MRsso9Ail2M74RMNj31sbiQ+PlWNFGPgGuP4ZDAbMncxeGwrFgHqYakiWXUyVvDO3Eq+Bahp5RlSXlZeDvEAGPaB5bZnIkWL6QOUbuv6h1/YXbJCYkgKhoe9jMEkseYq/staQbT6YEbWmjbScconXTZWoDaJLs47sEGgeeFsw9uDk67puiylNBRSkZaSv0aAsqMxi8WDJErQac/hPKSfXogPS825VMvTrS8diC4WmWeP4CcXQm6eh65JhrG0oAi/idbFIu3zWHX7KFDYSrc6HTPgoXz3xXXkVO/kOUhoXlkaAik2AEUzQLVHtsf6lJtZnre+LiDaow1dP590IipuJphIQOt1EFvhwyMqZlTvZqUdTWkvr9dlgltpAyzzuux9rXhUrC/0SsR/nRjg+AsIDRvjXuC5vAG2k69y0ZckxA2NI8V1jeHCb65N0wYWDniy3UPO4RGLLdqMuMEkjyrjvT4hDe0O4dW3pOlJmM0EqbwUITZl0H5uwNHq5TfCeqGYht50Pbk2M5t3DRtHbH0nUcZh6Qni7MM6qii/vk5fr6sUCqUDeOyMV8jZECqGq9LnUSchuECc6QnqjAOF2OQ8UmDHkxPtVYRalNwZChr0NZnrJmT7WqTvlwBjJm6T79wsJn1dMvKolesPxLt9xGaKsQ0MVMtK7u6lK6yvpFdLseTwG6mfXB+lh239RIFC5pKBXATwBbwDE7qMyHIxL70XyZn643vgZb0B1FhSOxWjbtdcknZrF1QrT0qh/oZr4sc3C9jeoaTG0vhGvm9kQf0zCbabd/o1mBNpfE4NCcrMVdP2NTQTlKAcWVGkvJsbW10f4V5arxZpGj9EcbDhxCxexdL59mU7693CxcIXziVOUVtFg7sIp50mlvGJORMJf78oXf8M6gde+NeJFaM+QeZCG7H+T0yyq09xGARhFlyd4P8eJG236EPDaCa0iZ0hKSlYnGYjE5vLomanf5757raI5QflLnHBi8OJWfLbwrB7u0eYPqRd7eyNgpixGAS9UvGtAljgXo7ZU97jNbhKt71gcSh6/BRI0eCqzLFYezAYZIuFhFnFlzrH6IPGgvTs8mMf5WirIjrLy4/8TdKyC053QB2URfCbM0Eagq0SHEunxVkXALZo7x76jdiqbKAYyqoA0k+MUscjSN8IMZf+kVrcXOSMOSBJdxX3hvmn+cf8yidyNuFiSOOSxqXYNOEZoE9pcwyQwNsm755YBnMVUIYO3biaY4noupz15bAONXnxHzVbjh54fKjg4uvmAWe+9til+BmJdZx1VBnBIcjZa4otcPCd7iiIdAKV7nvxAj7tbSVRWMxOyiJfanIi6ymPIBEKWMADdbJKeDFM3kgPCEzjhOkQ6c7A89Htf1L+5nrBgKjUTqhp+G+XKARKdS+9TmBnYbL9rOrQHstiO26n+/AsxkT8w3nDkpXj7BbgHHmydTUzhhIUDNOlMoMNb4LNkDdBHmbbB9wgbGvMYhdPRiU/ThLc0xbHwcnhMMQsIgpIguSY6zgK4h/rWCIMnmHYdzJWxSN0DMR7eNpUkfel8aFNIv8iUcWOGTur7/Qi4Ug8YgAY2iDS32ee15KqGaobCVWyyB3De3XqwW5x6P/J4ItZ9kJoxFBCtUr9e7YAtov8u6Q3yN7E3OwBb0GfQCw+36/qY2gm6Z1nE8laZTVBJ30Ek5Oe+U92bIyLWIF5HMvJy1B3VPX5W5RalbzIE5+RS3lYaB3arjBtjFcNn+yNLn7F4qmmZf+tsxtphZ9cI06K/U3WV/wZn4ku1MQQmkfaMBAX/TYiErzIHsgDcLPB/L2ttoZY0hDaYWXtfJlj3EsJN2YBwtGgkk0uDWTCIuFgH1enfisBHLCeOVuEUhjQeb/PZ9TbTvnGiNYYMnofUVm+b8szeckVKCBOeJBNsx7//8ByyQkyQDU/ztZT1fq/ctHsW9VsX6NP6I7a1Cfhqh1mqIQDEm1URALiamEfh3SLK1GfDM4l4y2npxq77nY2tMSB/dxTwn3PPBUgjAK2EMz3Ikhf7ywzXj7snRNx6r+eEpTJtMnDxDm1Hkz9fVCyNApTZ1CndDzKonCNYwvebtTDw6UJoO9AC1qzjOTyMxvJf0yk2Hd2m9sKsBWZpMoJiu9xV/8gKwKKXE9CokuiSbR46/ba/JENIZViqchuU1uIHCXh15MOMcrt5oiTfzoAKpMInVpIRnOprX7Hpwi6510SyB+bNNzFAiIL/Zc8W0RYiK2rF+boQU7EB5MOrIUClkTdGpzHSD9TXQE+d0LTMjmRR8n4vwfurxbOiEnC83ikCjy3yrmprcB1KFTneMsxqX/MDsO7H1drBlLOmFsz7ZP6brH0KvtErxFvKN7FUYHPHq/6ibLkSdw+wIqKZ4lpXXX2vZrbYP/JLcehQf2z7M5Dx1M6Jqf/Cy4s2FJXNMNG8dO5vG56c+c/zAjK89bEmPA2n6ierSULr/pEBpPDpohACpy6/JDBFRXiCeHbNNwsEbpalincZtB4sK3EAMkaZqIUVHYpsGjBt2uocO2Gv029H9kJwb66E/C0AqfV+v7vDl2obfWZmVCRzDsuPwYFuCBAa4jNOeW8ciN5ERan8RP3H36ugjzyKIFJ5fr9O2JbstaMBuXf0xVJ4gnu+eCdAAGopGRDDTh2m6xOnYh5lrFd9wXUWL7D65OVVOV6cZM6q6pQZUhZ8iv0DpZ27WGxZ84cmxKLuR81oliBn3yqhV+6GYadkSdqjA/+JTaOoFIhR+ZubmhwQlq0IjBIvOZFK8l/IYuOJfglEizxzfp2uNeR7YTNlqPWpVEWHy/Yxvxp6ASlfVxf8YlPKF7iC6SM355N9EniqTpPO2N5MzSvQ7dQXaodI+pSLHe9rCXifSX+zK2k5JZCquLtLO8Q0DYDAjMbGtNBwWI6N+nPpujhI3hDBfewKUxM1ZR7ze441mlpiqaJX2+HSdzI0HPQvoKh9agk3HSah5byMr/V4nxPyov9zNaAbHB3NMUc6lRTp4MRUJHX8U7zWD0ndj4Q3bdfUmfQqWKlm2md2SUcrfCsd2ATaQudsOn1+uY14W7Z4aoq5vwz+6K4y3ZggYz9MMP05oVVB/VVdV7/EXQZZvYSDirLUcAvxV72cIuA9MBLpnH2/g+zU1Tmfmn5FsrEPt8HZ+h6NbucJfVfBcZtJtDCjXs3FqwNaLgtcTz8ZB8tgST4WQzMXUeifmbbUjSP7yVnSD+8dL25XU4wrfNZhqoBwTOIgAcAZOu0PpXR+W0g6zTXEqzTou5ZPutfxcT3PGhWRkiV+0fgrR2D9MK0ZNt0NcwjIqzbTgxyH/WV11QqGxT4WwkK8z0IgE1PKMyFk9FM/gd5Wc4mo4IkgexN1oL5QDYT9ZslHRtYoS5BQyRsQRfA+W//nlJ2kfOmzSSJPo/VTiq+mE8wVlF0WULc3ggurKGBWP8EXZuv2sxc30BjzxVr0SqM52rJRUwiNowxDm/rfhs+jfXIDtsr33dQ6VDewYf/kbgJXejt609odCIl7JbvHJW97qC9xPaXAQtykZ+3SYYG0RVPkh9/C3OVELLIkJEdq9HOOA/k9uoCF5V7cqgJ+2cyUMGqBnBdduA3rQeghJZ7Alw2/cDfE/IF0Zk/QFgLg2eVdQI9ld9q0z9J0UDYVWvisUP+7Q62zk8U19q/5vHQcywXuEt+P7hWzBEP2QeiJT4q0/Ha8b5MiPBLsFUxsNp42cQzduJ+sTmBFrdrXWuziP3xX01jJS7M4O2UXIwjc4FbEmK3SL0yfKJA2LBDgz2n/JRWI+dw7K+yMI5uQvNo7ifajTMOtfB6kIV9V0ac8uXemYdGJZN5aHzOEcbyKfC/TaoSRhq7++CE/DVzQvvStgrZ1fyHPl7k9a0YcYpugyJXRJbn2puDWUstQ8lLIgn4qJqi7PscE/aiHlNEwClhRg9e2zg2+KgW6mcZ2ectTqv0Na1TS1wU5Ohw+yEOM2BEoCkej9R9FTRBBOj902xFjchYaqHKAkcBA1bNYA8ulhOH7Pn9oYBkiowEuxdVmpmGrLfCAnOSFK31yya+B3ks6/JG1FP02J5Nt+g09imsjXVXdr7UWEctAmto2K0IbSgSey2lgbJ6zUVfukN9VYGGT7WsC8n9QNJfqMI9UlncPHEioyrvjWo2JuVrM9OYUiviUoHZx1t9fk9Vja2fTXUntMJfvPZWLEkAi6RV6P5rREPJ/GetefZIncVNynSuvo5KhSkB2oK034gQXdLwAGU1KME6Sj7STNVLWZfyAD2MFx+uF6y3hJVwag15nqteBcpao7i6ZXWMd5KX25FFinZcRrKSQHOZ6Z48Ej9dvmHv/n+eNlwQ0XlbPHaX7V+yg+wumppF7nIe0NyimMTIs/XLdDa3xcPKio6tzWSuI7GuN5yUO1c07TDUAC/6Dh1o2ruQBcF8kp56MHDVxEzdSfDQeZ9NtTdFUxvEnjpuJyBMBrstEmll/T/p2TFGpHsGLUHfXwN7eU=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      文章内容已被加密.&lt;/br&gt;
    
    </summary>
    
      <category term="emacs" scheme="https://brianyi.github.io/categories/emacs/"/>
    
    
      <category term="emacs" scheme="https://brianyi.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第4章 文本输出</title>
    <link href="https://brianyi.github.io/posts/c1bee057/"/>
    <id>https://brianyi.github.io/posts/c1bee057/</id>
    <published>2020-01-28T13:59:36.000Z</published>
    <updated>2020-02-05T02:44:52.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="41-绘制和重绘"><a class="markdownIt-Anchor" href="#41-绘制和重绘"></a> 4.1 绘制和重绘</h2><h3 id="411-wm_paint消息"><a class="markdownIt-Anchor" href="#411-wm_paint消息"></a> 4.1.1 WM_PAINT消息</h3><p>窗口过程会收到WM_PAINT:</p><ul><li>被遮盖窗口的部分暴露出来</li><li>窗口大小改变(当设置了CS_HREDRAW|CS_VREDRAW)</li><li>调用ScrollWindow或ScrollDC函数滚动客户区</li><li>调用InvalidateRect或InvalidateRgn函数显式生成WM_PAINT</li><li>下拉菜单被拉下然后收回</li></ul><p>Windows会保存被覆盖部分的显示内容,然后恢复:</p><ul><li>鼠标指针在客户区内移动</li><li>在客户区内拖动图标</li></ul><h3 id="412-有效矩形和无效矩形"><a class="markdownIt-Anchor" href="#412-有效矩形和无效矩形"></a> 4.1.2 有效矩形和无效矩形</h3><p>需要重新绘制的部分被称为&quot;无效区域&quot;(或更新区域).客户区中的一个无效区域将导致Windows在应用程序的消息队列中post一条WM_PAINT. <strong>只有当客户区的一部分invalidate时,窗口过程才会收到WM_PAINT消息.</strong><br><strong>如果在窗口过程处理一条等待处理的WM_PAINT消息之前,客户区的另一部分也失效了(post了一条WM_PAINT),那么Windows将计算出一个覆盖这两个失效部分的新的无效区域和无效矩形,并更新绘制信息结构中的数据.</strong><br><strong><code>Windows不会在消息队列中放置多条WM_PAINT消息</code></strong><br>GetUpdateRect可以获得无效矩形的坐标.</p><blockquote><p>窗口过程在处理WM_PAINT消息时,调用BeginPaint函数后,整个客户区都会变为有效的.程序也可以通过调用ValidateRect函数来使客户区中任意的矩形变得有效.如果该函数调用的结果是让整个无效区域都变有效,那么当前消息队列中的WM_PAINT消息就会被删除.</p></blockquote><h2 id="42-gdi简介"><a class="markdownIt-Anchor" href="#42-gdi简介"></a> 4.2 GDI简介</h2><h3 id="421-设备环境"><a class="markdownIt-Anchor" href="#421-设备环境"></a> 4.2.1 设备环境</h3><p>设备环境与特定的设备(如显示器或打印机)相关联.比如TextOut函数中,设备环境的属性决定着文本颜色,背景,坐标映射,字体等等.<br><code>程序必须在处理同一条消息的过程中获取和释放句柄,不能在两条消息之间传递一个设备句柄,唯一的例外是通过CreateDC创建设备环境句柄.</code></p><h3 id="422-获取设备环境句柄方法一"><a class="markdownIt-Anchor" href="#422-获取设备环境句柄方法一"></a> 4.2.2 获取设备环境句柄:方法一</h3><p>通过BeginPaint获取设备环境句柄,EndPaint释放.<br>BeginPaint的用途:</p><ul><li>擦去无效区域的背景以便绘图(使无效区域变有效)</li><li>填充ps结构各个字段</li><li>返回设备环境句柄HDC</li></ul><p>在DefWindowProc中,WM_PAINT消息处理的代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    BeginPaint(hwnd, &amp;ps);</span><br><span class="line">    EndPaint(hwnd, &amp;ps);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>只要部分客户区无效,则Windows就会在消息队列中post一条WM_PAINT消息.<br>PAINTSTRUCT结构的rcPaint定义了无效区域的矩形边界(以像素为单位,坐标相对于客户区的左上角(0,0),向右下递增).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagPAINTSTRUCT</span> &#123;</span></span><br><span class="line">  HDC  hdc;</span><br><span class="line">  BOOL fErase; <span class="comment">// 客户区是否需要被擦除</span></span><br><span class="line">  RECT rcPaint;</span><br><span class="line">  BOOL fRestore;</span><br><span class="line">  BOOL fIncUpdate;</span><br><span class="line">  BYTE rgbReserved[<span class="number">32</span>];</span><br><span class="line">&#125; PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;</span><br></pre></td></tr></table></figure><p>如果之前创建窗口时没有指定画刷,那么在paint时该值就会为true,即Windows认为背景需要被擦除</p><h3 id="424-获取设备环境句柄方法二"><a class="markdownIt-Anchor" href="#424-获取设备环境句柄方法二"></a> 4.2.4 获取设备环境句柄:方法二</h3><p>通过GetDC获取窗口客户区的设备环境句柄,ReleaseDC释放.<br>与BeginPaint不同,GetDC的用途:</p><ul><li>GetDC返回的设备环境句柄裁剪的是整个客户区.</li><li>需要调用ValidateRect(hwnd,NULL)来使整个客户区有效</li></ul><p>GetWindowDC返回的是整个窗口的设备环境句柄,程序也必须要处理WM_NCPAINT(非客户区绘制)消息.</p><h3 id="425-textout函数详解"><a class="markdownIt-Anchor" href="#425-textout函数详解"></a> 4.2.5 TEXTOUT函数详解</h3><h3 id="426-系统字体"><a class="markdownIt-Anchor" href="#426-系统字体"></a> 4.2.6 系统字体</h3><p>设备环境同时还定义了调用TextOut时Windows使用的字体. 默认的字体称为&quot;系统字体&quot;(或SYSTEM_FONT).</p><h3 id="427-字符大小"><a class="markdownIt-Anchor" href="#427-字符大小"></a> 4.2.7 字符大小</h3><p>字体中字符的大小不但与映射模式有关,还与Windows运行时的显示分辨率有关,通过GetTextMetrics可以获取字体大小,映射模式默认为MM_TEXT,因此得到的值是以像素为单位.</p><ul><li>方法一</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    hdc = GetDC(hwnd);</span><br><span class="line"></span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;</span><br><span class="line">cxCaps = (tm.tmPitchAndFamily &amp; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">2</span>) * cxChar / <span class="number">2</span>;</span><br><span class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</span><br><span class="line"></span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    hdc= CreateIC(TEXT(<span class="string">"DISPLAY"</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;</span><br><span class="line">cxCaps = (tm.tmPitchAndFamily &amp; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">2</span>) * cxChar / <span class="number">2</span>;</span><br><span class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</span><br><span class="line"></span><br><span class="line">DeleteDC(hdc);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="4213-客户区的尺寸"><a class="markdownIt-Anchor" href="#4213-客户区的尺寸"></a> 4.2.13 客户区的尺寸</h3><p>GetClientRect可以获取客户区大小,更好的办法是在WM_SIZE消息时获取.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">    cxClient = LOWORD(lParam);  <span class="comment">// 获取客户区width</span></span><br><span class="line">    cyClient = HIWORD(lParam);  <span class="comment">// 获取客户区height</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于有CS_HREDRAW|CS_VREDRAW(当窗口大小变化后进行水平、垂直重绘),那么在WM_SIZE之后都会有一个WM_PAINT消息.</p><h2 id="44-效果更好的滚动"><a class="markdownIt-Anchor" href="#44-效果更好的滚动"></a> 4.4 效果更好的滚动</h2><img src="/posts/c1bee057/2020012920144214.png"><p>下面公式表明了滑块大小,位置与页面之间的关系</p><img src="/posts/c1bee057/2020013011344718.png"><p>主要使用GetScrollInfo,SetScrollInfo函数来实现滚动条,两个函数均需要SCROLLINFO参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagSCROLLINFO</span> &#123;</span></span><br><span class="line">  UINT cbSize;      <span class="comment">// 设为sizeof (SCROLLINFO)</span></span><br><span class="line">  UINT fMask;       <span class="comment">// 要设置或获取的值</span></span><br><span class="line">  <span class="keyword">int</span>  nMin;        <span class="comment">// 范围的最小值</span></span><br><span class="line">  <span class="keyword">int</span>  nMax;        <span class="comment">// 范围的最大值</span></span><br><span class="line">  UINT nPage;       <span class="comment">// 页面大小</span></span><br><span class="line">  <span class="keyword">int</span>  nPos;        <span class="comment">// 当前位置</span></span><br><span class="line">  <span class="keyword">int</span>  nTrackPos;   <span class="comment">// 当前追踪位置</span></span><br><span class="line">&#125; SCROLLINFO, *LPSCROLLINFO;</span><br></pre></td></tr></table></figure><p>Windows会将滑块位置的值限制在[si.nMin,si.nMax-si.nPage+1].</p><blockquote><p>问: 为何最大值为si.nMax-si.nPage+1而不是si.nMax?<br>答: 滑块的位置即为当前页面顶端文字的位置,那么如果滑块位置为si.nMax,则意味着当前页面顶端显示的是最后一行文字,下面全为空白. 因此将其设置为si.nMax-si.nPage+1,则当前页面底端显示的是最后一行文字.</p></blockquote><h2 id="span-idjump-0综合运用span"><a class="markdownIt-Anchor" href="#span-idjump-0综合运用span"></a> <span id="jump-0">综合运用</span></h2><p>资源文件: <a href="SysMets.h">SysMets.h</a><br>值得注意的是<code>tm.tmPitchAndFamily</code>的低位决定字体是否为等宽字体,0为等宽字体,1为变宽字体.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SysMets.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ <span class="keyword">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> TCHAR szAppName[] = TEXT(<span class="string">"SysMets2"</span>);</span><br><span class="line">HWND hwnd;</span><br><span class="line">MSG msg;</span><br><span class="line">WNDCLASS wndclass;</span><br><span class="line"></span><br><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">wndclass.lpfnWndProc = WndProc;</span><br><span class="line">wndclass.cbClsExtra = wndclass.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wndclass.hInstance = hInstance;</span><br><span class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">wndclass.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.lpszClassName = szAppName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个窗口的客户区都是无效的</span></span><br><span class="line">hwnd = CreateWindow(szAppName, TEXT(<span class="string">"Get System Metrics No. 2"</span>),</span><br><span class="line">WS_OVERLAPPEDWINDOW | WS_VSCROLL | WS_HSCROLL,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT,</span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line"><span class="comment">// 越过消息队列,直接由Windows调用窗口过程处理WM_PAINT消息</span></span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line">DispatchMessage(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// iVScrollPos表示滑块的位置</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxChar, cyChar, cxCaps, cyClient, cxClient, iMaxWidth;</span><br><span class="line">HDC hdc;</span><br><span class="line"><span class="keyword">int</span> i, x, y, iVertPos, iHorzPos, iPaintBeg, iPaintEnd;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">SCROLLINFO si;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:</span><br><span class="line">&#123;</span><br><span class="line">hdc = GetDC(hwnd);</span><br><span class="line"></span><br><span class="line">GetTextMetrics(hdc, &amp;tm);</span><br><span class="line">cxChar = tm.tmAveCharWidth;</span><br><span class="line">cxCaps = (tm.tmPitchAndFamily &amp; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">2</span>) * cxChar / <span class="number">2</span>;</span><br><span class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</span><br><span class="line"></span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line">iMaxWidth = <span class="number">40</span> * cxChar + <span class="number">22</span> * cxCaps;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">&#123;</span><br><span class="line">cxClient = LOWORD(lParam);  <span class="comment">// 获取客户区width</span></span><br><span class="line">cyClient = HIWORD(lParam);  <span class="comment">// 获取客户区height</span></span><br><span class="line"></span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span>(si);</span><br><span class="line">si.fMask = SIF_RANGE | SIF_PAGE;</span><br><span class="line">si.nMin = <span class="number">0</span>;</span><br><span class="line">si.nMax = NUMLINES - <span class="number">1</span>;</span><br><span class="line">si.nPage = cyClient / cyChar;</span><br><span class="line">SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);</span><br><span class="line"></span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span>(si);</span><br><span class="line">si.fMask = SIF_RANGE | SIF_PAGE;</span><br><span class="line">si.nMin = <span class="number">0</span>;</span><br><span class="line">si.nMax = <span class="number">2</span> + iMaxWidth / cxChar;</span><br><span class="line">si.nPage = cxClient / cxChar;</span><br><span class="line">SetScrollInfo(hwnd, SB_HORZ, &amp;si, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_VSCROLL:</span><br><span class="line">&#123;</span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span>(si);</span><br><span class="line">si.fMask = SIF_ALL;</span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line">iVertPos = si.nPos;</span><br><span class="line"><span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SB_TOP:<span class="comment">// 滑块位置为第一行文字</span></span><br><span class="line">si.nPos = si.nMin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_BOTTOM:<span class="comment">// 滑块位置为最后一行文字</span></span><br><span class="line">si.nPos = si.nMax;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_LINEUP:<span class="comment">// 滑块向上移动一行文字</span></span><br><span class="line">si.nPos -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_LINEDOWN:<span class="comment">// 滑块向下移动一行文字</span></span><br><span class="line">si.nPos += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_PAGEUP:<span class="comment">// 滑块向上移动一屏文字</span></span><br><span class="line">si.nPos -= si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_PAGEDOWN:<span class="comment">// 滑块向下移动一屏文字</span></span><br><span class="line">si.nPos += si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_THUMBPOSITION:<span class="comment">// 拖动滚动条放下时触发</span></span><br><span class="line">si.nPos = HIWORD(wParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_THUMBTRACK:<span class="comment">// 拖动滚动条时不断触发</span></span><br><span class="line">si.nPos = si.nTrackPos;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">si.fMask = SIF_POS;</span><br><span class="line">SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);<span class="comment">// 若位置超出,则自动调整为正确位置</span></span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (si.nPos != iVertPos)</span><br><span class="line">&#123;</span><br><span class="line">ScrollWindow(hwnd, <span class="number">0</span>, cyChar * (iVertPos - si.nPos), <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 向下滚动为负,向上滚动为正,无效化滚动区域,post一条WM_PAINT</span></span><br><span class="line">UpdateWindow(hwnd);<span class="comment">// 立刻更新无效区域,越过消息队列,直接由Windows调用窗口过程处理WM_PAINT消息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_HSCROLL:</span><br><span class="line">&#123;</span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span>(si);</span><br><span class="line">si.fMask = SIF_ALL;</span><br><span class="line">GetScrollInfo(hwnd, SB_HORZ, &amp;si);</span><br><span class="line"></span><br><span class="line">iHorzPos = si.nPos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SB_LEFT:</span><br><span class="line">si.nPos = si.nMin;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_RIGHT:</span><br><span class="line">si.nPos = si.nMax;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_LINELEFT:</span><br><span class="line">si.nPos -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_LINERIGHT:</span><br><span class="line">si.nPos += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_PAGELEFT:</span><br><span class="line">si.nPos -= si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_PAGERIGHT:</span><br><span class="line">si.nPos += si.nPage;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> SB_THUMBTRACK:</span><br><span class="line">si.nPos = si.nTrackPos;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">si.fMask = SIF_POS;</span><br><span class="line">SetScrollInfo(hwnd, SB_HORZ, &amp;si, TRUE);<span class="comment">// 若位置超出,则自动调整为正确位置</span></span><br><span class="line">GetScrollInfo(hwnd, SB_HORZ, &amp;si);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (si.nPos != iHorzPos)</span><br><span class="line">&#123;</span><br><span class="line">ScrollWindow(hwnd, cxChar * (iHorzPos - si.nPos), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 向右滚动为负,向左滚动为正,无效化滚动区域,post一条WM_PAINT</span></span><br><span class="line">UpdateWindow(hwnd);<span class="comment">// 立刻更新无效区域,越过消息队列,直接由Windows调用窗口过程处理WM_PAINT消息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> VK_HOME:<span class="comment">// 按键Home</span></span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_TOP, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_END:<span class="comment">// 按键End</span></span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_BOTTOM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_PRIOR:<span class="comment">// 按键Page Up</span></span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_PAGEUP, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_NEXT:<span class="comment">// 按键Page Down</span></span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_PAGEDOWN, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_UP:<span class="comment">// 按键上</span></span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_LINEUP, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN:<span class="comment">// 按键下</span></span><br><span class="line">SendMessage(hwnd, WM_VSCROLL, SB_LINEDOWN, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_LEFT:<span class="comment">// 按键左</span></span><br><span class="line">SendMessage(hwnd, WM_HSCROLL, SB_LINELEFT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT:<span class="comment">// 按键右</span></span><br><span class="line">SendMessage(hwnd, WM_HSCROLL, SB_LINERIGHT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">si.cbSize = <span class="keyword">sizeof</span>(si);</span><br><span class="line">si.fMask = SIF_POS;</span><br><span class="line"></span><br><span class="line">GetScrollInfo(hwnd, SB_VERT, &amp;si);</span><br><span class="line">iVertPos = si.nPos;</span><br><span class="line"></span><br><span class="line">GetScrollInfo(hwnd, SB_HORZ, &amp;si);</span><br><span class="line">iHorzPos = si.nPos;</span><br><span class="line"></span><br><span class="line">iPaintBeg = max(<span class="number">0</span>, iVertPos + ps.rcPaint.top / cyChar);</span><br><span class="line">iPaintEnd = min(NUMLINES - <span class="number">1</span>, iVertPos + ps.rcPaint.bottom / cyChar);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = iPaintBeg; i &lt;= iPaintEnd; ++i)</span><br><span class="line">&#123;</span><br><span class="line">x = cxChar * (<span class="number">1</span> - iHorzPos);</span><br><span class="line">y = cyChar * (i - iVertPos);</span><br><span class="line"></span><br><span class="line">TextOut(hdc, x, y, sysmetrics[i].szLabel, _tcslen(sysmetrics[i].szLabel));</span><br><span class="line">TextOut(hdc, x + <span class="number">22</span> * cxCaps, y, sysmetrics[i].szDesc, _tcslen(sysmetrics[i].szDesc));</span><br><span class="line">SetTextAlign(hdc, TA_RIGHT | TA_TOP);</span><br><span class="line"><span class="keyword">int</span> iLen = swprintf_s(szBuffer, TEXT(<span class="string">"%5d"</span>), GetSystemMetrics(sysmetrics[i].iIndex));</span><br><span class="line">TextOut(hdc, x + <span class="number">22</span> * cxCaps + <span class="number">40</span> * cxChar, y, szBuffer, iLen);</span><br><span class="line">SetTextAlign(hdc, TA_LEFT | TA_TOP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入滚动条后,效果如下</p><img src="/posts/c1bee057/2020013011242516.png"><p><code>页面顶端的文字的位置即为滚动条的位置</code><br>滚动条的每个位置对应在客户区顶部显示的一行文字,如果滚动条位置是0,则第一行文字显示在客户区顶部,如果位置是NUMLINES-1,则最后一行显示在客户区的顶部.</p><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h2 id=&quot;41-绘制和重绘&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#41-绘制和重绘&quot;&gt;&lt;/a&gt; 4.1 绘制和重绘&lt;/h2&gt;
&lt;h3 id=&quot;411-wm_paint消息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第3章 窗口与消息</title>
    <link href="https://brianyi.github.io/posts/9734c640/"/>
    <id>https://brianyi.github.io/posts/9734c640/</id>
    <published>2020-01-28T02:16:13.000Z</published>
    <updated>2020-02-02T08:54:33.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="311-系统结构概述"><a class="markdownIt-Anchor" href="#311-系统结构概述"></a> 3.1.1 系统结构概述</h3><p>当Windows程序开始执行时,Windows首先为该程序创建一个&quot;消息队列&quot;(message queue). 该消息队列中存放着应用程序可能创建的所有窗口的消息. Windows应用程序中一般都包含一小段称为&quot;消息循环&quot;(message loop)的代码, 该段代码用于从消息队列中检索消息, 并将其分发给相应的窗口过程. 其他消息则不经过消息队列直接发送给窗口过程.</p><h3 id="312-hellowin程序"><a class="markdownIt-Anchor" href="#312-hellowin程序"></a> 3.1.2 HELLOWIN程序</h3><p>资源文件: <a href="HelloWin.wav">HelloWin.wav</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"winmm.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CS   Class style option</span></span><br><span class="line"><span class="comment">// CW   Create window option</span></span><br><span class="line"><span class="comment">// DT   Draw text option</span></span><br><span class="line"><span class="comment">// IDI  ID number for an icon</span></span><br><span class="line"><span class="comment">// IDC  ID number for a cursor</span></span><br><span class="line"><span class="comment">// MB   Message box options</span></span><br><span class="line"><span class="comment">// SND  Sound option</span></span><br><span class="line"><span class="comment">// WM   Window message</span></span><br><span class="line"><span class="comment">// WS   Window style</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance, __in LPSTR lpCmdLine, __in <span class="keyword">int</span> nShowCmd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> TCHAR szAppName[] = TEXT(<span class="string">"HelloWin"</span>);</span><br><span class="line">    HWND        hwnd;       <span class="comment">// Handle to a window</span></span><br><span class="line">    MSG         msg;        <span class="comment">// Message structure</span></span><br><span class="line">    WNDCLASS    wndclass;   <span class="comment">// Window class structure</span></span><br><span class="line"></span><br><span class="line">    wndclass.style          = CS_HREDRAW | CS_VREDRAW;  <span class="comment">// 指定水平和垂直重绘(插入WM_PAINT消息)</span></span><br><span class="line">    wndclass.lpfnWndProc    = WndProc;</span><br><span class="line">    wndclass.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wndclass.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wndclass.hInstance      = hInstance;</span><br><span class="line">    wndclass.hIcon          = LoadIcon(<span class="number">0</span>, IDI_APPLICATION);</span><br><span class="line">    wndclass.hCursor        = LoadCursor(<span class="number">0</span>, IDC_ARROW);</span><br><span class="line">    wndclass.hbrBackground  = (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">    wndclass.lpszMenuName   = <span class="number">0</span>;</span><br><span class="line">    wndclass.lpszClassName  = szAppName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!RegisterClass(&amp;wndclass)) &#123;</span><br><span class="line">        MessageBox(<span class="number">0</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hwnd = CreateWindow(szAppName,</span><br><span class="line">        TEXT(<span class="string">"The Hello Program"</span>),</span><br><span class="line">        WS_OVERLAPPEDWINDOW,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        hInstance,</span><br><span class="line">        <span class="number">0</span>);</span><br><span class="line">    ShowWindow(hwnd, nShowCmd);</span><br><span class="line">    UpdateWindow(hwnd);         <span class="comment">// send a WM_PAINT message to window procedure</span></span><br><span class="line"></span><br><span class="line">BOOL fRet;</span><br><span class="line">    <span class="keyword">while</span>( (fRet = GetMessage(&amp;msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (fRet == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">// handle the error and possibly exit</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    &#123;</span><br><span class="line">        PlaySound(TEXT(<span class="string">"hellowin.wav"</span>), <span class="number">0</span>, SND_FILENAME | SND_ASYNC);</span><br><span class="line">        <span class="keyword">break</span>;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123; </span><br><span class="line">        HDC         hdc;    <span class="comment">// Handle to a device context</span></span><br><span class="line">        PAINTSTRUCT ps;     <span class="comment">// Paint structure</span></span><br><span class="line">        RECT        rect;   <span class="comment">// Rectangle structure</span></span><br><span class="line">        hdc = BeginPaint(hwnd, &amp;ps);<span class="comment">// invalid region to be erased</span></span><br><span class="line">        GetClientRect(hwnd, &amp;rect);</span><br><span class="line"></span><br><span class="line">        DrawText(hdc, TEXT(<span class="string">"Hello, Windows 98!"</span>), <span class="number">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER);</span><br><span class="line">        EndPaint(hwnd, &amp;ps);<span class="comment">// release the device context handle</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    &#123;</span><br><span class="line">        PostQuitMessage(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/9734c640/202001281046181.png"><h3 id="313-通盘考虑"><a class="markdownIt-Anchor" href="#313-通盘考虑"></a> 3.1.3 通盘考虑</h3><p>匈牙利命名法</p><table><thead><tr><th style="text-align:left">前缀</th><th style="text-align:left">数据类型</th></tr></thead><tbody><tr><td style="text-align:left">c</td><td style="text-align:left">数量</td></tr><tr><td style="text-align:left">by</td><td style="text-align:left">BYTE(无符号字符)</td></tr><tr><td style="text-align:left">n</td><td style="text-align:left">short(短整型)</td></tr><tr><td style="text-align:left">i</td><td style="text-align:left">int(整型)</td></tr><tr><td style="text-align:left">x, y</td><td style="text-align:left">int, 表示x坐标和y坐标</td></tr><tr><td style="text-align:left">cx, cy</td><td style="text-align:left">int, 表示x或y的长度, c表示&quot;count&quot;(计数)</td></tr><tr><td style="text-align:left">B或f</td><td style="text-align:left">BOOL(int); f表示&quot;flag&quot;</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">WORD(无符号短整型)</td></tr><tr><td style="text-align:left">l</td><td style="text-align:left">LONG(长整型)</td></tr><tr><td style="text-align:left">dw</td><td style="text-align:left">DWORD(无符号长整型)</td></tr><tr><td style="text-align:left">fn</td><td style="text-align:left">函数</td></tr><tr><td style="text-align:left">lpfn</td><td style="text-align:left">指向函数的长指针</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">字符串</td></tr><tr><td style="text-align:left">sz</td><td style="text-align:left">以零结束的字符串</td></tr><tr><td style="text-align:left">lpsz</td><td style="text-align:left">指向以零结束的字符串的长指针</td></tr><tr><td style="text-align:left">h</td><td style="text-align:left">句柄</td></tr><tr><td style="text-align:left">p</td><td style="text-align:left">指针</td></tr><tr><td style="text-align:left">cb</td><td style="text-align:left">count of byte</td></tr><tr><td style="text-align:left">hbr</td><td style="text-align:left">handle of brush</td></tr></tbody></table><h3 id="316-窗口的显示"><a class="markdownIt-Anchor" href="#316-窗口的显示"></a> 3.1.6 窗口的显示</h3><p>当CreateWindow调用返回时, 窗口已在Windows内部被创建. Windows已经分配了一块内存来保存CreateWindow调用中指定的窗口信息以及一些其他信息.</p><h3 id="3111-wm_paint消息"><a class="markdownIt-Anchor" href="#3111-wm_paint消息"></a> 3.1.11 WM_PAINT消息</h3><p>窗口重绘(向消息队列插入WM_PAINT)的几种情况:</p><ul><li>UpdateWindow调用</li><li>窗口尺寸发生变化, wndclass结构的style字段标记了CS_HREDEAW|CS_VERDRAW</li><li>最小化程序后将窗口回复原先尺寸</li><li>窗口被遮挡后再重现时</li></ul><p>如果一个窗口过程不对WM_PAINT消息进行处理(这是极为罕见的),则DefWindowProc只是简单地依次调用BeginPaint和EndPaint,以使客户区变为valid.<br>无论何时只要客户区变为invalid时,则WndProc都将受到一条新的WM_PAINT消息</p><h3 id="3112-wm_destroy消息"><a class="markdownIt-Anchor" href="#3112-wm_destroy消息"></a> 3.1.12 WM_DESTROY消息</h3><p>当用户点击关闭时,就会向消息队列中插入WM_DESTROY,程序可以通过调用PostQuitMessage来对WM_DESTROY做出响应.对于消息循环中,所有非WM_QUIT消息,GetMessage函数都返回非0值,而对WM_QUIT消息,返回0,那么就会退出消息循环,msg.wParam即为PostQuitMessage函数中的值.</p><h3 id="321-究竟是谁调用谁"><a class="markdownIt-Anchor" href="#321-究竟是谁调用谁"></a> 3.2.1 究竟是谁调用谁</h3><p>WndProc会在类似场景下被Windows系统调用:</p><ul><li>新建窗口</li><li>窗口被销毁</li><li>窗口尺寸发生变化或被移动或被最小化</li><li>用户鼠标在窗口中执行单击或双击</li><li>键盘输入字符</li><li>菜单中选择某个菜单项</li><li>鼠标操作或单机滚动条</li><li>窗口客户区需要重绘</li></ul><p><strong>同一窗口类创建的多个窗口共用一个窗口过程,窗口过程通过窗口句柄HANDLE来区别不同窗口的消息.</strong></p><h3 id="322-队列消息和非队列消息"><a class="markdownIt-Anchor" href="#322-队列消息和非队列消息"></a> 3.2.2 队列消息和非队列消息</h3><p><strong>队列消息</strong>: 消息被post到消息队列,由Windows放入程序的消息队列的消息,在程序的消息循环中,消息被检索然后投递到窗口过程中.<br><strong>非队列消息</strong>: 消息被send到窗口过程,由Windows对窗口过程直接调用产生.<br>窗口过程会为窗口获得所有消息(无论是队列消息还是非队列消息).</p><h3 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RECT rc;</span><br><span class="line"><span class="keyword">static</span> POINT aptPentagon[<span class="number">6</span>] = &#123; <span class="number">50</span>,<span class="number">2</span>, <span class="number">98</span>,<span class="number">35</span>, <span class="number">79</span>,<span class="number">90</span>, <span class="number">21</span>,<span class="number">90</span>, <span class="number">2</span>,<span class="number">35</span>, <span class="number">50</span>,<span class="number">2</span> &#125;,</span><br><span class="line">aptHexagon[<span class="number">7</span>] = &#123; <span class="number">50</span>,<span class="number">2</span>, <span class="number">93</span>,<span class="number">25</span>, <span class="number">93</span>,<span class="number">75</span>, <span class="number">50</span>,<span class="number">98</span>, <span class="number">7</span>,<span class="number">75</span>, <span class="number">7</span>,<span class="number">25</span>, <span class="number">50</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> POINT *ppt = aptPentagon;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cpt = <span class="number">6</span>;</span><br><span class="line">HDC hdc;</span><br><span class="line">PAINTSTRUCT ps; </span><br><span class="line"><span class="keyword">switch</span> (message)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">ppt = aptPentagon;</span><br><span class="line">cpt = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">ppt = aptHexagon;</span><br><span class="line">cpt = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">GetClientRect(hwnd, &amp;rc);</span><br><span class="line">SetMapMode(hdc, MM_ANISOTROPIC);</span><br><span class="line">SetWindowExtEx(hdc, <span class="number">100</span>, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line">SetViewportExtEx(hdc, rc.right, rc.bottom, <span class="literal">NULL</span>);</span><br><span class="line">Polyline(hdc, ppt, cpt);</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">&#123;</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>窗口过程内容改为上述代码,则按5显示五边形,按6显示六边形.</p><img src="/posts/9734c640/2020012920122213.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;311-系统结构概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#311-系统结构概述&quot;&gt;&lt;/a&gt; 3.1.1 系统结构概述&lt;/h3&gt;
&lt;p&gt;当Windows程序开始执行时,Windows首先为该程序创建一个&amp;quot;消息队列&amp;qu
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第2章 Unicode简介</title>
    <link href="https://brianyi.github.io/posts/bc564b01/"/>
    <id>https://brianyi.github.io/posts/bc564b01/</id>
    <published>2020-01-21T01:26:41.000Z</published>
    <updated>2020-02-05T02:44:40.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="222-更宽的字符"><a class="markdownIt-Anchor" href="#222-更宽的字符"></a> 2.2.2 更宽的字符</h3><p>C语言中的宽字符是基于wchar_t数据类型的,被<strong>定义在多个头文件中,包括WCHAR.H</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">wchar_t</span>;</span><br></pre></td></tr></table></figure><p>wchar_t是16位宽<br>大写字母L紧接着左引号向编译器表明这个字符将用宽字符存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">wchar_t</span> a[] = <span class="string">L"Hello!"</span>;</span><br></pre></td></tr></table></figure><p>这个L非常重要,编译器才知道你想要字符串用每个字符两个字节的方式存储,否则就会编译出错.<br>但单个宽字符可以不用使用L前缀,C编译器总会在字符后面加0的.</p><h3 id="224-维护一个源代码文件"><a class="markdownIt-Anchor" href="#224-维护一个源代码文件"></a> 2.2.4 维护一个源代码文件</h3><p><strong>TCHAR.H为那些需要字符串参数的普通运行库函数(例如,_tprintf和_tcslen)提供了一系列的替代名词.这些函数有时被称为&quot;通用&quot;的函数名字,因为它们可以指Unicode或非Unicode版本的函数.</strong><br><strong><code>所有通用字符处理函数都被放在了TCHAR.H文件中</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcscat         wcscat</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcscat_s       wcscat_s</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcschr         wcschr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcscpy         wcscpy</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcscpy_s       wcscpy_s</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcscspn        wcscspn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcslen         wcslen</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsnlen        wcsnlen</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncat        wcsncat</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncat_s      wcsncat_s</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncat_l      _wcsncat_l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncat_s_l    _wcsncat_s_l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncpy        wcsncpy</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncpy_s      wcsncpy_s</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncpy_l      _wcsncpy_l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsncpy_s_l    _wcsncpy_s_l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcspbrk        wcspbrk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsrchr        wcsrchr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsspn         wcsspn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcsstr         wcsstr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _tcstok         _wcstok</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果在工程配置中的<strong>C/C++ =&gt; 预处理器</strong>中添加了 <strong>_UNICODE</strong> 标识符,并且在程序中包含了<strong>TCHAR.H</strong> 头文件,那么所有&quot;通用&quot;函数都被解释为宽字符函数.<br>对于现在的编译器(我用的VS2017),直接在下图设置也可</p><img src="/posts/bc564b01/2020012110050511.png"><p>设置完成后,下面的字符串就被解释为是由宽字符组成的.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> TCHAR a[] = _T(<span class="string">"Hello!"</span>);</span><br></pre></td></tr></table></figure><h3 id="235-格式化的消息框"><a class="markdownIt-Anchor" href="#235-格式化的消息框"></a> 2.3.5 格式化的消息框</h3><p>下面实现的MessageBoxPrintf函数可以接收格式化信息并显示在窗口上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> CDECL <span class="title">MessageBoxPrintf</span><span class="params">(TCHAR *szCaption, TCHAR *szFormat, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCHAR szBuffer[<span class="number">1024</span>];</span><br><span class="line">    va_list pArgList;</span><br><span class="line"></span><br><span class="line">    va_start(pArgList, szFormat);</span><br><span class="line"></span><br><span class="line">    _vsntprintf(szBuffer, <span class="keyword">sizeof</span>(szBuffer) / <span class="keyword">sizeof</span>(TCHAR),</span><br><span class="line">        szFormat, pArgList);</span><br><span class="line"></span><br><span class="line">    va_end(pArgList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MessageBox(<span class="number">0</span>, szBuffer, szCaption, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance, __in LPSTR lpCmdLine, __in <span class="keyword">int</span> nShowCmd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cxScreen, cyScreen;</span><br><span class="line">    cxScreen = GetSystemMetrics(SM_CXSCREEN);<span class="comment">// 获取屏幕width</span></span><br><span class="line">    cyScreen = GetSystemMetrics(SM_CYSCREEN);<span class="comment">// 获取屏幕height</span></span><br><span class="line">    MessageBoxPrintf(TEXT(<span class="string">"ScrnSize"</span>),</span><br><span class="line">        TEXT(<span class="string">"The screen is %i pixels wide by %i pixels high."</span>),</span><br><span class="line">        cxScreen, cyScreen);</span><br><span class="line"></span><br><span class="line">    BOOL fResult;</span><br><span class="line">    <span class="keyword">int</span> aMouseInfo[<span class="number">3</span>];</span><br><span class="line">    TCHAR szText[<span class="number">1024</span>];</span><br><span class="line">    fResult = GetSystemMetrics(SM_MOUSEPRESENT);<span class="comment">// 返回值非0则表示安装了鼠标,否则0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fResult == <span class="number">0</span>) &#123;</span><br><span class="line">        _tcscpy(szText, TEXT(<span class="string">"No mouse installed.\n"</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _tcscpy(szText, TEXT(<span class="string">"Mouse installed.\n"</span>));</span><br><span class="line"></span><br><span class="line">        fResult = GetSystemMetrics(SM_SWAPBUTTON);<span class="comment">// 返回值非0则表示鼠标左右键交换了,否则0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fResult == <span class="number">0</span>) &#123;</span><br><span class="line">            _tcscat(szText, TEXT(<span class="string">"Buttons not swapped.\n"</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _tcscat(szText, TEXT(<span class="string">"Buttons swapped.\n"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fResult = SystemParametersInfo(<span class="comment">// 获取鼠标参数信息</span></span><br><span class="line">            SPI_GETMOUSE,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            &amp;aMouseInfo,</span><br><span class="line">            <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fResult) &#123;</span><br><span class="line">            TCHAR szBuf[<span class="number">512</span>];</span><br><span class="line">            swprintf(szBuf, TEXT(<span class="string">"Speed: %d\nThreshold (x,y): %d, %d\n"</span>), </span><br><span class="line">                aMouseInfo[<span class="number">2</span>], aMouseInfo[<span class="number">0</span>], aMouseInfo[<span class="number">1</span>]);</span><br><span class="line">            _tcscat(szText, szBuf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MessageBoxPrintf(TEXT(<span class="string">"GetSystemMetrics Usage Example"</span>), szText);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;222-更宽的字符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#222-更宽的字符&quot;&gt;&lt;/a&gt; 2.2.2 更宽的字符&lt;/h3&gt;
&lt;p&gt;C语言中的宽字符是基于wchar_t数据类型的,被&lt;strong&gt;定义在多个头文件中,包括WCHA
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Windows编程]第1章 起步</title>
    <link href="https://brianyi.github.io/posts/c1877712/"/>
    <id>https://brianyi.github.io/posts/c1877712/</id>
    <published>2020-01-21T00:39:49.000Z</published>
    <updated>2020-01-28T03:05:09.509Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/c1877712/202001210847001.jpg"><h3 id="113-动态链接库"><a class="markdownIt-Anchor" href="#113-动态链接库"></a> 1.1.3 动态链接库</h3><p>早期Windows的大部分只是实现了<strong>3个动态链接库</strong>.它们分别代表了Windows的3个主要的子系统,即<strong>内核(kernel),用户(user)以及GDI</strong>.<br><strong>内核(在16位的KRNL386.exe及32位的KERNEL32.DLL中实现)</strong>: 负责操作系统的那些传统工作,包括内存管理、文件输入/输出及任务管理等.<br><strong>用户(在16位的User.exe及32位的User32.DLL中实现)</strong>: 指的是用户界面,负责所有的窗口管理.<br><strong>GDI(在16位的GDI.exe及32位的GDI32.DLL中实现)</strong>: 就是图形设备接口,负责在屏幕或打印机上显示文本与图形.</p><h3 id="133-头文件"><a class="markdownIt-Anchor" href="#133-头文件"></a> 1.3.3 头文件</h3><p>下面几个是最重要也是最基本的头文件:</p><ul><li><strong>WINDEF.H</strong> 基本数据类型定义</li><li><strong>WINNT.H</strong> 支持Unicode的类型定义</li><li><strong>WINBASE.H</strong> 内核函数</li><li><strong>WINUSER.H</strong> 用户界面函数</li><li><strong>WINGDI.H</strong> 图形设备接口函数</li></ul><h3 id="134-程序入口"><a class="markdownIt-Anchor" href="#134-程序入口"></a> 1.3.4 程序入口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINAPI __stdcall</span></span><br></pre></td></tr></table></figure><p>规定了一种函数调用阅读,表明如何生成在堆栈中防止函数调用参数的机器代码.</p><h1 id="代码及效果图"><a class="markdownIt-Anchor" href="#代码及效果图"></a> 代码及效果图</h1><img src="/posts/c1877712/2020012109244610.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> CALLBACK <span class="title">WinMain</span><span class="params">( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance, __in LPSTR lpCmdLine, __in <span class="keyword">int</span> nShowCmd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MessageBox (<span class="literal">NULL</span>, TEXT(<span class="string">"Hello, Windows 2007!"</span>), TEXT(<span class="string">"HelloMsg"</span>),MB_HELP | MB_ICONASTERISK );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/posts/c1877712/202001210847001.jpg&quot;&gt;
&lt;h3 id=&quot;113-动态链接库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#113-动态链接库&quot;&gt;&lt;/a&gt; 1.1.3 动态链接库&lt;/h3&gt;
&lt;p&gt;早
      
    
    </summary>
    
      <category term="Windows编程" scheme="https://brianyi.github.io/categories/Windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows编程" scheme="https://brianyi.github.io/tags/Windows%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[杂谈][总结]对于2019年这一年的回顾</title>
    <link href="https://brianyi.github.io/posts/1406676/"/>
    <id>https://brianyi.github.io/posts/1406676/</id>
    <published>2020-01-15T12:26:55.000Z</published>
    <updated>2020-01-29T05:48:43.715Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入文章密码" />    <label for="pass">请输入文章密码</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      文章内容已被加密.&lt;/br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://brianyi.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://brianyi.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="总结" scheme="https://brianyi.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>[博客]书写格式</title>
    <link href="https://brianyi.github.io/posts/19c28d6f/"/>
    <id>https://brianyi.github.io/posts/19c28d6f/</id>
    <published>2020-01-11T01:06:53.000Z</published>
    <updated>2020-01-31T14:12:44.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-span-idjump-0标题格式span"><a class="markdownIt-Anchor" href="#1-span-idjump-0标题格式span"></a> 1. <span id="jump-0">标题格式</span></h2><h3 id="11-title"><a class="markdownIt-Anchor" href="#11-title"></a> 1.1 title</h3><p>[转载][类别][系列名]文章名</p><ul><li>转载: <code>可有可无</code>,转载则必须标明,原创可不写</li><li>类别: <code>必须有</code>,大类, 比如机器学习,书籍,paper,等等</li><li>系列名: <code>可有可无</code>,类下的具体划分</li><li>文章名: <code>必须有</code>,能够一眼就看懂是关于什么的</li></ul><p>例如: [转载][机器学习][CS229]Hoeffding不等式</p><h3 id="12-tags"><a class="markdownIt-Anchor" href="#12-tags"></a> 1.2 tags</h3><p>[标签1,标签2,…,标签n]</p><h3 id="13"><a class="markdownIt-Anchor" href="#13"></a> 1.3</h3><h2 id="2-内容格式"><a class="markdownIt-Anchor" href="#2-内容格式"></a> 2. 内容格式</h2><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">含义</th><th style="text-align:left">markdown</th><th style="text-align:left">页面显示</th></tr></thead><tbody><tr><td style="text-align:left">` `</td><td style="text-align:left">附加内容</td><td style="text-align:left"><code>这是附加内容</code></td><td style="text-align:left"><span style="color: #00f;font-size: 14px;">这是附加内容</span></td></tr></tbody></table><h2 id="3-跳转实现"><a class="markdownIt-Anchor" href="#3-跳转实现"></a> 3. 跳转实现</h2><h3 id="31-页内跳转"><a class="markdownIt-Anchor" href="#31-页内跳转"></a> 3.1 页内跳转</h3><p>[跳到锚点处](#jump-数字Or内容)<br>&lt;span id=‘jump-数字Or内容’&gt;锚点<br>例如: <a href="#jump-0">跳到1. 标题格式</a></p><h3 id="32-页间跳转"><a class="markdownIt-Anchor" href="#32-页间跳转"></a> 3.2 页间跳转</h3><p>[跳到xx页面](…/abbrlink)<br>例如: <a href="../19c28d6f">跳到 博客-书写格式页面</a></p><h2 id="4快捷键"><a class="markdownIt-Anchor" href="#4快捷键"></a> 4.快捷键</h2><ul><li><strong>插入图片</strong><br>要插入两个并列图片时,用table<br>快捷键:&lt;table</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;% asset_img 图片1 %&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;% asset_img 图片2 %&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>可折叠显示的代码</strong><br>快捷键:&lt;blockquote</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;<span class="name">details</span>&gt;</span><span class="tag">&lt;<span class="name">summary</span>&gt;</span>查看代码（详情请点击本行）<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">[写代码片段,记得用```括起来]</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span></span></span><br></pre></td></tr></table></figure><h2 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h2><ul><li><strong>SyntaxError: Unexpected token / in JSON at position 0</strong><br>Javascript可以通过console.warn(data)来显示输出错误信息到控制台.<br>这里的错误原因是blog\node_modules\hexo\lib\plugins\renderer\json.js:5:15文件会对所有json文件进行解析,如果遇到开头为/的则会报错,那么博客对应的文件夹下的json文件内容都不能以/开头.<br><code>所有放在下载区的json文件都把后缀.json去掉,否则会出问题</code></li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-span-idjump-0标题格式span&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-span-idjump-0标题格式span&quot;&gt;&lt;/a&gt; 1. &lt;span id=&quot;jump-0&quot;&gt;标题格式&lt;/span&gt;&lt;/h2&gt;
&lt;h3
      
    
    </summary>
    
      <category term="博客" scheme="https://brianyi.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://brianyi.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>[视频编解码 VTM7.1]H.266/VVC参考软件VTM配置运行</title>
    <link href="https://brianyi.github.io/posts/92e79038/"/>
    <id>https://brianyi.github.io/posts/92e79038/</id>
    <published>2019-12-28T10:14:12.000Z</published>
    <updated>2020-01-29T02:52:20.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vvcvtm70安装"><a class="markdownIt-Anchor" href="#vvcvtm70安装"></a> VVC/VTM7.0安装</h2><blockquote><p>运行环境、软件版本等说明：<br>VTM：7.1版本<br>操作系统：Win10 64位操作系统<br>IDE：Visual Studio 2017</p></blockquote><p>下载VTM: <a href="https://vcgit.hhi.fraunhofer.de/jvet/VVCSoftware_VTM">https://vcgit.hhi.fraunhofer.de/jvet/VVCSoftware_VTM</a></p><p>根据README.md内容,创建build文件夹,以下是提取出的关于windows平台下的编译。<br><strong>Note:</strong> A working CMake installation is required for building the software.</p><p>CMake generates configuration files for the compiler environment/development environment on each platform.<br>The following is a list of examples for Windows (MS Visual Studio), macOS (Xcode) and Linux (make).</p><p>Open a command prompt on your system and change into the root directory of this project.</p><p>Create a build directory in the root directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br></pre></td></tr></table></figure><p>Use one of the following CMake commands, based on your platform. Feel free to change the commands to satisfy<br>your needs.</p><p><strong>Windows Visual Studio 2015/17/19 64 Bit:</strong></p><p>Use the proper generator string for generating Visual Studio files, e.g. for VS 2015:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. -G <span class="string">"Visual Studio 14 2015 Win64"</span></span><br></pre></td></tr></table></figure><p>Then open the generated solution file in MS Visual Studio.</p><p>For VS 2017 use “Visual Studio 15 2017 Win64”, for VS 2019 use “Visual Studio 16 2019”.</p><p>Visual Studio 2019 also allows you to open the CMake directory directly. Choose “File-&gt;Open-&gt;CMake” for this option.</p><img src="/posts/92e79038/20191024140911763.png"><img src="/posts/92e79038/201912281819578.png"><p>H.266/VVC<br>H.265/HEVC<br>H.264/AVC</p><h2 id="31-vvc编码结构"><a class="markdownIt-Anchor" href="#31-vvc编码结构"></a> 3.1 VVC编码结构</h2><p>与之前的大多数标准一样，VVC采用了一种基于块的混合编码结构，将图像间和图像内的预测和转换编码与熵编码相结合。图1显示了VTM7编码器的一般框图。</p><img src="/posts/92e79038/20191024140911764.png"><p>图像分割结构(<strong>详见3.2节</strong>)将输入视频分割为称为编码树单元(CTUs)的块。CTU使用一个嵌套的多类型树结构的四叉树来分割成编码单元(CUs)，用一个叶编码单元(CU)来定义一个共享相同预测模式的区域(例如内部或之间)。在本文件中，“unit”一词定义了图像中覆盖所有颜色成分的区域;“block”一词用于定义一个覆盖特定颜色成分的区域(如luma)，在考虑色彩采样格式(如4:2:0)时，空间位置可能有所不同。<br>VTM7的其他特性，包括帧内预测过程、帧间图像预测过程、转换和量化过程、熵编码过程和环路内滤波过程，将在3.3至3.7节中介绍。根据第11次JVET会议的约定，在块状树结构上的VVC测试模型3中包含了以下特性。</p><ul><li>帧内预测<ul><li>67种广角模式扩展的内模式</li><li>块大小和模式相关4 tap插值滤波器</li><li>位置相关的内部预测组合(PDPC)</li><li>交叉分量线性模型内部预测</li><li>多参考线内预测</li><li>内部子分区</li><li>加权矩阵乘法的内部预测</li></ul></li><li>图片间预测</li></ul><h2 id="32-划分"><a class="markdownIt-Anchor" href="#32-划分"></a> 3.2 划分</h2><h3 id="321-图片划分成ctus"><a class="markdownIt-Anchor" href="#321-图片划分成ctus"></a> 3.2.1 图片划分成CTUs</h3><p>图像被分成一系列的编码树单元(CTUs)。CTU的概念和HEVC[6][7]是一样的。对于一个有三个样本阵列的图片，CTU由一个N×N块的luma样本和两个相应的色度样本块组成。图2显示了划分为CTUs的图片示例。<br>在CTU中，luma块的最大允许大小被指定为128×128(尽管luma变换块的最大大小是64×64)。下图是一张图片划分为CTUs的例子。<br>(<code>实际中,CTU一般默认大小为128x128</code>)</p><img src="/posts/92e79038/20191024140911766.png"><h3 id="322-将图片分成子图片-片-块"><a class="markdownIt-Anchor" href="#322-将图片分成子图片-片-块"></a> 3.2.2 将图片分成子图片、片、块</h3><p>图片被分成一个或多个tile rows和一个或多个tile columns。一个tile是一组CTUs的序列，它覆盖了图像的一个矩形区域。<br>一个slice由整数个完整的tiles组成或由一幅图片的一个tile中的整数个连续完整的CTU组成。<br>支持两种slice模式，即raster-scan slice模式和矩形slice模式。在栅格扫描slice模式中，一个slice包含一个图像的栅格扫描中的完整tiles序列。在矩形slice模式下，一个slice包含若干个完整的块，它们共同构成图片的一个矩形区域，或者包含若干个连续的完整CTU行，它们共同构成图片的一个矩形区域。矩形slice内的tile按照与该slice对应的矩形区域内的tile raster-scan顺序进行扫描。<br>子图片包含一个或多个slice，这些slices共同覆盖了图片的矩形区域。<br>下图显示一个图片的raster-scan slice划分示例，其中图片被划分为12 tiles和3个raster-scan slices(光栅扫描slice)。</p><img src="/posts/92e79038/20191024140911767.png"><p>下图显示了图片的矩形slice划分示例，其中图片被划分为24 tiles(6 tile columns和4 tile rows)和9个矩形slices。</p><img src="/posts/92e79038/2020010912480413.png"><p>下图显示一个将图片划分为块和矩形slice的示例，其中图片被划分为4块(2个tile colums和2个tile rows)和4个矩形slice。</p><img src="/posts/92e79038/2020010912513314.png"><p>下图显示一个图片的子图片分割的例子，其中一个图片被分割成28个不同尺寸的子图片。</p><img src="/posts/92e79038/2020010912522115.png"><blockquote><p>我的理解: slice<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\ge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span>tile<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\ge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span>CTU<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\ge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span>CU, 而block是单独出来的,将整个图片进行划分</p></blockquote><h3 id="323-使用一个树结构来划分ctus"><a class="markdownIt-Anchor" href="#323-使用一个树结构来划分ctus"></a> 3.2.3 使用一个树结构来划分CTUs</h3><p>在HEVC中，为了适应不同的局部特征，采用四叉数树结构表示编码树，将CTU分解为Cus(Coding units)。决定是使用图像间(时间上)还是使用图像内(空间上)预测来编码一个图像区域是在leaf CU(叶子节点CU)水平上进行的。每个leaf CU根据PU分裂类型可进一步分裂成一个，两个或四个Pus。在一个PU内部，应用相同的预测过程，并在PU的基础上将相关信息传输到解码器。利用基于PU分裂类型的预测过程得到剩余块后，根据另一种类似于CU编码树的四叉数树结构，将叶子CU划分成变换单元(Tus:transform units)。HEVC结构的一个重要特点是它具有包括CU、PU、TU在内的多分区概念。<br>(<code>HEVC(h265)中的CTU中包含CU(Coding Unit),PU(Prediction Unit),TU(Transform Unit)</code>)<br>在VVC中，一个嵌套多类型树的四叉树使用二叉和三叉分段结构代替了多分区单元类型的概念。也就是说，它消除了CU、PU和TU概念的分离，除非CU的尺寸对于最大变换长度来说太大，并且支持更灵活的CU分区形状。在编码树结构中，CU可以是正方形，也可以是矩形。<code>一个编码树单元(CTU)首先被一个四叉树(QT:QuadTree)结构分割。然后利用多类型树(MTT:Multi-Type Tree)结构进一步划分四叉树叶节点</code>。如图7所示，在<strong>多类型树结构</strong>中有<strong>四种分裂类型</strong>，<strong>垂直二分裂(SPLIT_BT_VER)、水平二分裂(SPLIT_BT_HOR)、垂直三分裂(SPLIT_TT_VER)和水平三分裂(SPLIT_TT_HOR)</strong>。<strong>多类型的树叶子节点被称为编码单元(Cus)</strong>，除非CU对于最大的转换长度来说太大，否则这种分割被用于预测和转换处理，而不需要进一步的划分。这意味着，在大多数情况下，CU、PU、TU在四叉树中具有相同的块大小，嵌套多类型树编码块结构。当支持的最大转换长度小于CU的颜色component(<code>我的理解是每个CU都有三个channal, 即Y(luma component),U(Cb:blue-difference chroma component),V(Cr:red-difference chroma component),按YUV420格式来说,4个y(luma)对应1个Cb和1个Cr</code>)的宽度或高度时，会发生异常。</p><img src="/posts/92e79038/2020010913230316.png"><p>图8展示了嵌套多类型树编码树结构的四叉树中分区分割信息的信号机制。将编码树单元(CTU)作为四叉树的根，首先用四叉树结构进行分区。每个四叉树的叶节点(当足够大时)被一个多类型树结构进一步划分。在多类型树结构中，第一个标志(mtt_split_cu_flag)表示节点是否进一步分区;当一个节点被进一步分区时，第二个标志(mtt_split_cu_vertical_flag)被用来指示分裂方向，然后第三个标志(mtt_split_cu_binary_flag)被用来指示分裂是二进制分裂还是三元分裂。根据mtt_split_cu_vertical_flag和mtt_split_cu_binary_flag的值，可以得到CU的多类型树分割模式(MttSplitMode)，如表3-1所示。</p><blockquote><p>MTT:Multi-TypeTree, QT:QuadTree, TT:TernaryTree, BT:BinaryTree</p></blockquote><img src="/posts/92e79038/2020010913320617.png"><img src="/posts/92e79038/2020010913332018.png"><p>图9显示一个用四叉树和嵌套的多类型树编码块结构划分成多个单元的CTU，其中粗体块边表示四叉树分区，其余边表示多类型树分区。嵌套多类型树划分的四叉树提供了一种由Cus组成的内容自适应编码树结构。CU的大小可以和CTU一样大，也可以小到4×4个单位的luma样本。在4:2:0色度格式下，最大色度CB为64×64，最小色度**CB(Coding Block)**为2×2。<br>在VVC中，最大支持的luma变换尺寸为64×64，最大支持的chroma变换尺寸为32×32。<strong>当CB的宽度或高度大于变换的最大宽度或高度时，CB将自动在水平和/或垂直方向进行分割，以满足该方向的变换大小限制。</strong></p><img src="/posts/92e79038/2020010913554919.png"><p>以下参数由嵌套多类型树编码树scheme的四叉树的<strong>SPS语法元素</strong>定义和指定。(<code>即信息都包含在SPS中</code>)</p><ul><li>CTU size: 四叉树的根节点大小</li><li>MinQTSize: 允许的最小四叉树叶节点大小</li><li>MaxBtSize: 允许的最大二叉树根节点大小</li><li>MaxTtSize: 允许的最大三叉树根节点大小</li><li>MaxMttDepth: 从四叉树叶子中分离出的多类型树的最大允许层次深度</li><li>MinBtSize: 允许的最小二叉树叶节点大小</li><li>MinTtSize: 允许的最小三叉树叶节点大小</li></ul><p>在一个嵌套多类型树编码树结构的四叉树(QT:QuadTree)示例中，将:</p><ul><li>CTU的大小设置为128×128个luma样本，对应两个64×64块的4:2:0色度样本(<code>3个channal,Y(luma)有128x128个pixel,Cb&amp;Cr分别有64x64个pixel,如果bit depth为8(值在0~255),那么Y(luma)的2x2个pixel(即4字节)对应Cb&amp;Cr的1x1+1x1=2个pixel(即2字节),那么Y(luma)的128x128=16384pixel对应Cb&amp;Cr的64x64+64x64=8192pixel,那么这样一个CTU需要占用128x128+2x64x64=24576Bytes</code>)</li><li>MinQTSize设置为16×16</li><li>MaxBtSize设置为128×128</li><li>MaxTtSize设置为64×64</li><li>MinBtSize和MinTtSize(宽度和高度)设置为4×4</li><li>MaxMttDepth设置为4</li></ul><p>首先将四叉树划分应用于CTU，生成四叉树叶子节点。四叉树的叶节点大小为16×16(比如，MinQTSize)到128×128(比如，CTU的大小)。如果叶子QT节点为128×128，则不会被二叉树进一步分割，因为其大小超过了MaxBtSize和MaxTtSize(即,64×64)。否则，叶子qdtree节点将被多类型树进一步分割。因此，四叉树的叶节点也是多类型树的根节点，其多类型树深度(mttDepth)为0。当多类型树深度达到MaxMttDepth(即4)，不考虑进一步拆分。当多类型树节点的宽度等于MinBtSize且小于或等于2 * MinTtSize时，不考虑进一步的水平分割。类似地，当多类型树节点的高度等于MinBtSize且小于或等于2 * MinTtSize时，不考虑进一步的垂直分割。<br>为了在VVC硬件解码器中允许64×64的Luma块和32×32的色度流水线设计，当一个luma编码块的宽度或高度大于64时，禁止TT分割，如图10所示。当色度编码块的宽度或高度大于32时，也禁止TT分割。</p><img src="/posts/92e79038/2020010916263520.png"><p>在VTM7中，编码树方案支持luma和chroma具有单独的块树结构。目前，对于P slice和B slice，一个CTU中的luma和chroma CTBs必须共享相同的编码树结构。然而，对于I slice，luma和chroma可以有单独的块树结构。当采用单独的块树模式时，luma CTB被一个编码树结构分割成Cus，而chroma CTBs被另一个编码树结构分割成chroma Cus。<strong>这意味着I slice中的CU可能由一个luma分量的编码块或两个chroma分量的编码块组成,而P或B片中的CU总是由所有三种颜色的编码块组成，除非视频是单色的。</strong></p><h3 id="324-图像边界分割成cu"><a class="markdownIt-Anchor" href="#324-图像边界分割成cu"></a> 3.2.4 图像边界分割成CU</h3><p>正如在HEVC中所做的，当树节点块的一部分超过底部或右侧图片边界时，树节点块被强制分割，直到每个编码CU的所有样本都位于图片边界内。VTM7中应用了以下分割规则:</p><ul><li>如果树节点块的一部分超出底部和右侧图像边界，<ul><li>如果块是QT节点，且块的大小大于最小QT大小，则将使用QT拆分模式强制拆分块。</li><li>否则，将强制使用SPLIT_BT_HOR模式分割块</li></ul></li></ul><h3 id="335-intra-sub-partitionsisp"><a class="markdownIt-Anchor" href="#335-intra-sub-partitionsisp"></a> 3.3.5 Intra Sub-Partitions(ISP)</h3><p>Intra子分区(ISP)工具根据块大小将luma内预测块垂直或水平地划分为2个或4个子分区。例如，ISP的最小块大小是4x8(或8x4)。如果块大小大于4x8(或8x4)，那么相应的块被4个子分区分割。已经注意到,𝑀×128(𝑀≤64)和128×𝑁(𝑁≤64)ISP块对于64×64的VDPU可能产生一个潜在的问题。例如,一个𝑀×128大小的CU在单树有一个𝑀×128 luma TB 和两个相应的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>𝑀</mi><mn>2</mn></mfrac><mo>×</mo><mn>64</mn></mrow><annotation encoding="application/x-tex">\frac{𝑀}{2}×64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span></span></span></span>色度TBs。如果CU使用ISP,luma TB将分为四个𝑀×32 TBs(只有水平分裂是可能的),每个都小于64×64 block。然而，目前ISP的设计中并没有对chroma blocks进行划分。因此，两个chroma components的尺寸都大于32×32 block。类似地,一个类似的情况可以使用ISP创建128×𝑁大小的CU。因此，这两种情况是64×64解码器管道的一个问题。<strong>因此，可以使用ISP的CU尺寸被限制在最大64×64。</strong> <strong>图19</strong>展示了这两种可能性的例子。所有子分区都满足至少有16个样本的条件。</p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p><strong>Abbr</strong>:<br>CU: Coding Unit<br>PU: Prediction Unit<br>TU: Transform Unit<br>SPS: Sequence Parameter Set<br><strong>GOP</strong>: Group of picture（图像组）, GOP说白了就是两个I帧之间的间隔.通过提高GOP值来提高图像质量是有限度的，在遇到场景切换的情况时，H.264编码器会自动强制插入一个I帧，此时实际的GOP值被缩短了。另一方面，在一个GOP中，P、B帧是由I帧预测得到的，当I帧的图像质量比较差时，会影响到一个GOP中后续P、B帧的图像质量，直到下一个GOP开始才有可能得以恢复，所以GOP值也不宜设置过大。<a href="https://blog.csdn.net/xiaoyida11/article/details/52852398">【出自】：H264编码之GOP含义</a><br><strong>YUV</strong>: 人的视觉系统对亮度感知更敏感，所以将色彩空间分解为亮度Y和色度U（Cb）、V（Cr）<br>Y代表的是亮度，UV代表的是彩度（因此黑白电影可省略UV，相近于RGB），分别用Cr和Cb来表示，因此YUV的记录通常以Y:UV的格式呈现。</p><ul><li><p>Y：亮度（luma / luminance）基本同灰度值，灰度值是形容黑白图像的，亮度值是形容彩色图像的，如果把彩色图像转换成黑白图像，亮度值就会作为转换后的黑白图像的灰度值。如下图所示，没有U、V颜色分量的图像Y image就是一副黑白图片。</p></li><li><p>U（Cb）、V（Cr）：色度（chroma / chromimance）表示图像的颜色信息，定义影像的色彩和饱和度，用于指定像素的颜色。</p></li><li><p>YUV存储格式</p><ul><li>Planar: 在YUV的Planar存储格式的图像存储矩阵中，先连续存储所有像素点的Y值，再存储所有像素点的U值，最后存储剩下像素点的V值{y0y1y2y3…}，{u0u1u2u3…}，{v0v1v2v3…}，相当于分别存储data[0]、data[1]、data[2]中。</li><li>Packed: 在YUV的Packed存储格式的图像存储矩阵中，每个像素点的YUV是连续交替存储的 {y0u0v0}{y1u1v1}{y2u2v2}{y3u3v3}…，相当于都存储在data[0]中。</li><li>YUV存储大小<br>YUV444    3 bytes per pixel     (12 bytes per 4   pixels)<br>YUV422    4 bytes per 2 pixels   (8 bytes per 4 pixels)<br>YUV411    6 bytes per 4 pixels<br>YUV420p   6 bytes per 4 pixels, reordered<img src="/posts/92e79038/2020011008514822.png"></li></ul></li><li><p>YUV采样格式<br>YUV基本有以下如图这几种采样方式:</p><img src="/posts/92e79038/2020010918232121.png"><p>其中</p><ul><li>YUV 4:4:4采样，即每一个Y值对应一组UV分量。<ul><li>图像前四个像素的数据: Y0U0V0 Y1U1V1 Y2U2V2 Y3U3V3</li><li>采样的码流: Y0 U0 V0 Y1 U1 V1 Y2 U2 V2 Y3 U3 V3</li><li>Y分量的大小： w*h</li><li>U分量的大小： w*h</li><li>V分量的大小： w*h</li></ul></li><li>YUV 4:2:2采样，即每两个Y值共用一组UV分量（两个像素一个采U一个采V）。<ul><li>图像前四个像素的数据: Y0U0V0 Y1U1V1 Y2U2V2 Y3U3V3</li><li>采样的码流举例（不唯一，原则是两个相邻的Y共用一对UV，UV可以是他们两个各一个，也可以各取一个）:Y0 U0 Y1 V1 Y2 U2 Y3 V3</li><li>Y分量的大小： w*h</li><li>U分量的大小： w*h/2</li><li>V分量的大小： w*h/2</li></ul></li><li>YUV 4:2:0采样，即每四个Y值共用一组UV分量。（2：0不是不采集V）</li><li>Y分量的大小： w*h</li><li>U分量的大小： w/2*h/2=w*h/4</li><li>V分量的大小： w/2*h/2=w*h/4</li></ul></li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vvcvtm70安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vvcvtm70安装&quot;&gt;&lt;/a&gt; VVC/VTM7.0安装&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;运行环境、软件版本等说明：&lt;br&gt;
VTM：7.1版本&lt;br&gt;
操
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
  </entry>
  
  <entry>
    <title>[leetcode]140.单词拆分II</title>
    <link href="https://brianyi.github.io/posts/2634e3ca/"/>
    <id>https://brianyi.github.io/posts/2634e3ca/</id>
    <published>2019-08-28T08:43:31.000Z</published>
    <updated>2019-08-28T09:17:11.228Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/2634e3ca/201908281716513.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h2 id="方法1通过dpdp"><a class="markdownIt-Anchor" href="#方法1通过dpdp"></a> 方法1(通过):dp+dp</h2><p>思路: 该题如果每个先判断字符串是否可以拆分 <strong>思路来自<a href="../3b51cbfc">139.单词拆分</a></strong> ,那么就会超时<br>然后,仍然是借鉴dp的思想,记忆化dp来存放可能的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;&amp; <span class="built_in">set</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(s.size()+<span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j]&amp;&amp;<span class="built_in">set</span>.count(s.substr(j,i-j)))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.size()];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; wordBreak(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict) &#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> w:wordDict)</span><br><span class="line">        <span class="built_in">set</span>.insert(w);</span><br><span class="line">    <span class="keyword">if</span> (!judge(s,<span class="built_in">set</span>)) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&#123;&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; dp(s.size()+<span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>].push_back(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp=s.substr(j,i-j);</span><br><span class="line">            <span class="keyword">if</span> (!dp[j].empty()&amp;&amp;<span class="built_in">set</span>.count(tmp))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> str:dp[j])</span><br><span class="line">                    dp[i].push_back(str+tmp+(i==s.size()?<span class="string">""</span>:<span class="string">" "</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.size()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h2 id="方法2通过dpdfshashmap"><a class="markdownIt-Anchor" href="#方法2通过dpdfshashmap"></a> 方法2(通过):dp+dfs+hashmap</h2><p>思路: 该题如果每个先判断字符串是否可以拆分 <strong>思路来自<a href="../3b51cbfc">139.单词拆分</a></strong> ,那么就会超时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> w:wordDict)</span><br><span class="line">        <span class="built_in">set</span>.insert(w);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(s.size()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j]&amp;&amp;<span class="built_in">set</span>.count(s.substr(j,i-j)))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.size()];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> i, <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;&amp; <span class="built_in">set</span>, <span class="built_in">string</span> str, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i==s.size())</span><br><span class="line">    &#123;</span><br><span class="line">        res.push_back(str);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.size();++j)</span><br><span class="line">    &#123;</span><br><span class="line">        word=s.substr(i,j-i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>.count(word))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j+<span class="number">1</span>!=s.size()) word+=<span class="string">" "</span>;</span><br><span class="line">            dfs(s,j+<span class="number">1</span>,<span class="built_in">set</span>,str+word,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; wordBreak(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict) &#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> w:wordDict)</span><br><span class="line">        <span class="built_in">set</span>.insert(w);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (judge(s,wordDict))</span><br><span class="line">        dfs(s,<span class="number">0</span>,<span class="built_in">set</span>,<span class="string">""</span>,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/posts/2634e3ca/201908281716513.png&quot;&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解题思路&quot;&gt;&lt;/a&gt; 解题思路&lt;/h1&gt;
&lt;h2 id=&quot;方法1通过dpdp&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="dfs" scheme="https://brianyi.github.io/tags/dfs/"/>
    
      <category term="dp" scheme="https://brianyi.github.io/tags/dp/"/>
    
      <category term="hashmap" scheme="https://brianyi.github.io/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]472.连接词</title>
    <link href="https://brianyi.github.io/posts/7672e457/"/>
    <id>https://brianyi.github.io/posts/7672e457/</id>
    <published>2019-08-28T07:29:09.000Z</published>
    <updated>2019-08-28T07:50:00.975Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/7672e457/201908281548561.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h2 id="方法1通过dfshashmap"><a class="markdownIt-Anchor" href="#方法1通过dfshashmap"></a> 方法1(通过):dfs+hashmap</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> word, <span class="keyword">int</span> i, <span class="keyword">int</span> cnt, <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;&amp; <span class="built_in">set</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i==word.size()) <span class="keyword">return</span> cnt&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=word.size()<span class="number">-1</span>;j&gt;=i;--j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">set</span>.count(word.substr(i,j-i+<span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (dfs(word,j+<span class="number">1</span>,cnt+<span class="number">1</span>,<span class="built_in">set</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findAllConcatenatedWordsInADict(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)</span><br><span class="line">        <span class="built_in">set</span>.insert(word);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs(word,<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">set</span>))</span><br><span class="line">            res.push_back(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2通过dfs字典树"><a class="markdownIt-Anchor" href="#方法2通过dfs字典树"></a> 方法2(通过):dfs+字典树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tr(x) (x-<span class="meta-string">'a'</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TrieNode()&#123;<span class="built_in">memset</span>(children,<span class="number">0</span>,<span class="keyword">sizeof</span> children);&#125;</span><br><span class="line">    TrieNode *children[<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line">    Trie()&#123; root = <span class="keyword">new</span> TrieNode; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> word)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ch:word)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p-&gt;children[tr(ch)])</span><br><span class="line">                p-&gt;children[tr(ch)]=<span class="keyword">new</span> TrieNode;</span><br><span class="line">            p=p-&gt;children[tr(ch)];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;word=word;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TrieNode *p, <span class="built_in">string</span> word, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == word.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;word.empty() || p-&gt;word == word) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;word.empty() &amp;&amp; dfs(root-&gt;children[tr(word[i])], word, i + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;children[tr(word[i])])  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(p-&gt;children[tr(word[i])], word, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findAllConcatenatedWordsInADict(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">    Trie *trie = <span class="keyword">new</span> Trie;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)</span><br><span class="line">    &#123;</span><br><span class="line">        trie-&gt;insert(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (trie-&gt;dfs(trie-&gt;root,word,<span class="number">0</span>))</span><br><span class="line">            res.push_back(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/posts/7672e457/201908281548561.png&quot;&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解题思路&quot;&gt;&lt;/a&gt; 解题思路&lt;/h1&gt;
&lt;h2 id=&quot;方法1通过dfshashm
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="dfs" scheme="https://brianyi.github.io/tags/dfs/"/>
    
      <category term="hashmap" scheme="https://brianyi.github.io/tags/hashmap/"/>
    
      <category term="字典树" scheme="https://brianyi.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]421.数组中两个数的最大异或值</title>
    <link href="https://brianyi.github.io/posts/893cbf7e/"/>
    <id>https://brianyi.github.io/posts/893cbf7e/</id>
    <published>2019-08-27T02:10:51.000Z</published>
    <updated>2019-08-27T03:32:02.720Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/893cbf7e/2019082710112374.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h2 id="方法1通过异或hashmap"><a class="markdownIt-Anchor" href="#方法1通过异或hashmap"></a> 方法1(通过):异或+hashmap</h2><p>思想:<code>a^b=c,a^c=b,b^c=a</code>,即<code>如果有三个数，满足其中两个数的异或值等于另一个值，那么这三个数的顺序可以任意调换(利用这个性质,可以不使用第3个变量而交换两个变量的值)</code>,异或运算实际上就是 <strong>二进制下不进位的加法</strong></p><blockquote><p>我们只用关心这个最大的异或值需要满足什么性质，进而推出这个最大值是什么，而不必关心这个异或值是由哪两个数得来的。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxVal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mask=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        mask|=(<span class="number">1</span>&lt;&lt;i); <span class="comment">// 掩码</span></span><br><span class="line">        <span class="keyword">int</span> tmpMax=maxVal|(<span class="number">1</span>&lt;&lt;i); <span class="comment">// "贪心"的假设该位上是1</span></span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums) <span class="built_in">set</span>.insert(num&amp;mask); <span class="comment">// 构造hashmap</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> val:<span class="built_in">set</span>) <span class="comment">// 判断是否满足"假设的最大值^数组中一个数的前缀=数组中另一个数的前缀",满足就说明这2个前缀在当前可以构成最大值</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">set</span>.count(tmpMax^val))</span><br><span class="line">            &#123;</span><br><span class="line">                maxVal=tmpMax;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><h2 id="方法2通过字典树异或"><a class="markdownIt-Anchor" href="#方法2通过字典树异或"></a> 方法2(通过):字典树+异或</h2><p>思路:将所有数构造一棵字典树,每个数对应于字典树中一个分支(根到叶节点,共30个路径),每个数都有30个分支,0看作0…0(30个0),为什么不是31个0?(因为是int型,最高位为符号位)<br>再遍历每个数,将每个数的每一位取反,找到对应的字典树的分支(即尽量找到与之异或后最大的那个数)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TrieNode()&#123;<span class="built_in">memset</span>(children,<span class="number">0</span>,<span class="keyword">sizeof</span> children);&#125;</span><br><span class="line">    TrieNode *children[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line">    Trie()&#123; root = <span class="keyword">new</span> TrieNode; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> bit=(num&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!p-&gt;children[bit])</span><br><span class="line">                p-&gt;children[bit] = <span class="keyword">new</span> TrieNode;</span><br><span class="line">            p=p-&gt;children[bit];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造字典树</span></span><br><span class="line">    Trie* trie=<span class="keyword">new</span> Trie;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</span><br><span class="line">        trie-&gt;insert(num);</span><br><span class="line">    <span class="comment">// 异或运算找最大值</span></span><br><span class="line">    <span class="keyword">int</span> maxVal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</span><br><span class="line">    &#123;</span><br><span class="line">        TrieNode *p = trie-&gt;root;</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> bit=(num&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;children[!bit])</span><br><span class="line">            &#123;</span><br><span class="line">                tmp+=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">                p=p-&gt;children[!bit];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p=p-&gt;children[bit];</span><br><span class="line">        &#125;</span><br><span class="line">        maxVal=max(maxVal,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ol><li><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/solution/li-yong-yi-huo-yun-suan-de-xing-zhi-tan-xin-suan-f/">力扣（LeetCode）- liweiwei1419</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/posts/893cbf7e/2019082710112374.png&quot;&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解题思路&quot;&gt;&lt;/a&gt; 解题思路&lt;/h1&gt;
&lt;h2 id=&quot;方法1通过异或hashm
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="hashmap" scheme="https://brianyi.github.io/tags/hashmap/"/>
    
      <category term="字典树" scheme="https://brianyi.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
      <category term="异或" scheme="https://brianyi.github.io/tags/%E5%BC%82%E6%88%96/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]438.找到字符串中所有字母异位词</title>
    <link href="https://brianyi.github.io/posts/afa19688/"/>
    <id>https://brianyi.github.io/posts/afa19688/</id>
    <published>2019-08-26T11:46:40.000Z</published>
    <updated>2019-08-26T11:51:00.903Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/afa19688/2019082619465873.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h2 id="方法1通过滑动窗口固定hashmap"><a class="markdownIt-Anchor" href="#方法1通过滑动窗口固定hashmap"></a> 方法1(通过):滑动窗口(固定)+hashmap</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tr(x) (x-<span class="meta-string">'a'</span>)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findAnagrams(<span class="built_in">string</span> s, <span class="built_in">string</span> p) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; freq_s(<span class="number">26</span>,<span class="number">0</span>),freq_p(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (s.size()&lt;p.size()) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;p.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        freq_p[tr(p[i])]++;</span><br><span class="line">        freq_s[tr(s[i])]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s.size()-p.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (freq_p==freq_s)</span><br><span class="line">            res.push_back(i);</span><br><span class="line">        freq_s[tr(s[i+p.size()])]++;</span><br><span class="line">        freq_s[tr(s[i])]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (freq_p==freq_s)</span><br><span class="line">        res.push_back(i);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/posts/afa19688/2019082619465873.png&quot;&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解题思路&quot;&gt;&lt;/a&gt; 解题思路&lt;/h1&gt;
&lt;h2 id=&quot;方法1通过滑动窗口固定h
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="hashmap" scheme="https://brianyi.github.io/tags/hashmap/"/>
    
      <category term="滑动窗口" scheme="https://brianyi.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]567.字符串的排列</title>
    <link href="https://brianyi.github.io/posts/5b39dee3/"/>
    <id>https://brianyi.github.io/posts/5b39dee3/</id>
    <published>2019-08-26T02:02:39.000Z</published>
    <updated>2019-08-26T11:38:38.648Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/5b39dee3/2019082610024972.png"><h1 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h1><h2 id="方法1通过滑动窗口固定hashmap"><a class="markdownIt-Anchor" href="#方法1通过滑动窗口固定hashmap"></a> 方法1(通过):滑动窗口(固定)+hashmap</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tr(x) (x-<span class="meta-string">'a'</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> pat, <span class="built_in">string</span> txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pat.size()&gt;txt.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dictPat(<span class="number">26</span>),dictTxt(<span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pat.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dictPat[tr(pat[i])]++;</span><br><span class="line">        dictTxt[tr(txt[i])]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;txt.size()-pat.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dictPat==dictTxt)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        dictTxt[tr(txt[i+pat.size()])]++;</span><br><span class="line">        dictTxt[tr(txt[i])]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dictPat==dictTxt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2通过滑动窗口"><a class="markdownIt-Anchor" href="#方法2通过滑动窗口"></a> 方法2(通过):滑动窗口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> pat, <span class="built_in">string</span> txt)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; dictPat,dictTxt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ch:pat)</span><br><span class="line">        dictPat[ch]++;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;r&lt;txt.size();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 不在,则l,r都右移</span></span><br><span class="line">        <span class="keyword">if</span> (!dictPat.count(txt[r]))</span><br><span class="line">        &#123;</span><br><span class="line">            dictTxt.clear();</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在,则r右移</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag)</span><br><span class="line">                l = r;</span><br><span class="line">            dictTxt[txt[r]]++;</span><br><span class="line">            <span class="keyword">while</span> (dictTxt[txt[r]] &gt; dictPat[txt[r]])</span><br><span class="line">                dictTxt[txt[l++]]--;</span><br><span class="line">            <span class="keyword">if</span> (r - l + <span class="number">1</span> == pat.size())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法3超时hashmap"><a class="markdownIt-Anchor" href="#方法3超时hashmap"></a> 方法3(超时):hashmap</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tr(x) (x-<span class="meta-string">'a'</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> pat, <span class="built_in">string</span> txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pat.size()&gt;txt.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> dictPat[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ch:pat)</span><br><span class="line">        dictPat[tr(ch)]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=txt.size()-pat.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> word=txt.substr(i,pat.size());</span><br><span class="line">        <span class="keyword">int</span> dictWord[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ch:word)</span><br><span class="line">        &#123;</span><br><span class="line">            dictWord[tr(ch)]++;</span><br><span class="line">            <span class="keyword">if</span> (dictWord[tr(ch)]&gt;dictPat[tr(ch)])</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/posts/5b39dee3/2019082610024972.png&quot;&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解题思路&quot;&gt;&lt;/a&gt; 解题思路&lt;/h1&gt;
&lt;h2 id=&quot;方法1通过滑动窗口固定h
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="hashmap" scheme="https://brianyi.github.io/tags/hashmap/"/>
    
      <category term="滑动窗口" scheme="https://brianyi.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
</feed>

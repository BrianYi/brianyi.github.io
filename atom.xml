<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brian&#39;s Home</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brianyi.github.io/"/>
  <updated>2019-05-07T05:06:07.090Z</updated>
  <id>https://brianyi.github.io/</id>
  
  <author>
    <name>Brian Yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[leetcode]214.最短回文串</title>
    <link href="https://brianyi.github.io/2019/05/07/leetcode-214-%E6%9C%80%E7%9F%AD%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>https://brianyi.github.io/2019/05/07/leetcode-214-最短回文串/</id>
    <published>2019-05-07T04:00:26.000Z</published>
    <updated>2019-05-07T05:06:07.090Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/07/leetcode-214-最短回文串/Image21.png"><h3 id="方法一-KMP算法"><a href="#方法一-KMP算法" class="headerlink" title="方法一: KMP算法"></a>方法一: KMP算法</h3><p>时间复杂度: $O(m+n)$</p><blockquote><p>解题思路: 实际就是求原串从左到右的最长回文串(必须包含左边所有字符),此处采用<strong>倒置+KMP算法</strong>来缩短匹配时间</p><ol><li>将字符串倒置,原串作为模式串pat,倒置串作为主串txt</li><li>求出模式串pat的nextval[]值,然后进行字符串匹配,得到的模式串pat最长匹配长度即为模式串pat从第一个字符开始的最大回文串(匹配过程时间复杂度只需要$O(m+n)$)</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nextval[<span class="number">40005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_nextval</span><span class="params">(<span class="built_in">string</span> pat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>,len=pat.size();</span><br><span class="line">    nextval[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;i&lt;len&amp;&amp;j&lt;len;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">-1</span>||pat[i]==pat[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++,j++;</span><br><span class="line">            <span class="keyword">if</span> (pat[i]==pat[j])</span><br><span class="line">                nextval[i]=nextval[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextval[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=nextval[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">shortestPalindrome</span><span class="params">(<span class="built_in">string</span> txt)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> pat=txt;</span><br><span class="line">    reverse(txt.begin(),txt.end()); <span class="comment">// O(n)</span></span><br><span class="line">    get_nextval(pat); <span class="comment">// </span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,lenTxt=txt.size(),lenPat=pat.size();</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;lenTxt&amp;&amp;j&lt;lenPat;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">-1</span>||txt[i]==pat[j])</span><br><span class="line">            i++,j++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = nextval[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> txt.substr(<span class="number">0</span>,lenTxt-j)+pat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/07/leetcode-214-最短回文串/Image21.png&quot;&gt;
&lt;h3 id=&quot;方法一-KMP算法&quot;&gt;&lt;a href=&quot;#方法一-KMP算法&quot; class=&quot;headerlink&quot; title=&quot;方法一: KMP算法&quot;&gt;&lt;/a&gt;方法一
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="回文串" scheme="https://brianyi.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
      <category term="KMP" scheme="https://brianyi.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]TOC汇总</title>
    <link href="https://brianyi.github.io/2019/05/07/leetcode-TOC%E6%B1%87%E6%80%BB/"/>
    <id>https://brianyi.github.io/2019/05/07/leetcode-TOC汇总/</id>
    <published>2019-05-07T00:31:49.000Z</published>
    <updated>2019-05-07T03:06:59.931Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入文章密码" />    <label for="pass">请输入文章密码</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      文章内容已被加密.&lt;/br&gt;
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="TOC" scheme="https://brianyi.github.io/tags/TOC/"/>
    
  </entry>
  
  <entry>
    <title>[algorithm]排序</title>
    <link href="https://brianyi.github.io/2019/05/06/algorithm-%E6%8E%92%E5%BA%8F/"/>
    <id>https://brianyi.github.io/2019/05/06/algorithm-排序/</id>
    <published>2019-05-06T14:58:06.000Z</published>
    <updated>2019-05-06T15:23:31.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-排序算法"><a href="#一-排序算法" class="headerlink" title="一.排序算法"></a>一.排序算法</h2><h3 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1.插入排序"></a>1.插入排序</h3><h4 id="1-直接插入排序-插入类"><a href="#1-直接插入排序-插入类" class="headerlink" title="1) 直接插入排序:(插入类)"></a>1) 直接插入排序:(插入类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( R[i].key &lt; R[i - <span class="number">1</span>].key )</span><br><span class="line">        &#123;</span><br><span class="line">            R[<span class="number">0</span>] = R[i];</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; <span class="number">0</span> &amp;&amp; ( R[<span class="number">0</span>].key &lt; R[j].key ); j-- )</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">            R[j + <span class="number">1</span>] = R[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好情况(顺序有序):</p><p>　　1)比较次数: $\sum_{i=2}^{n} 1=n-1$</p><p>　　2)移动次数: 0</p><p>最坏情况(逆序有序):</p><p>　　1)比较次数: $\sum_{i=2}^{n} i=\frac {(n+2)(n-1)}{2}$</p><p>　　2)移动次数: $\sum_{i=2}^{n} (i+1)=\frac {(n+4)(n-1)}{2}$</p><h4 id="2-折半插入排序-插入类"><a href="#2-折半插入排序-插入类" class="headerlink" title="2)折半插入排序:(插入类)"></a>2)折半插入排序:(插入类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BiInsertSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        R[<span class="number">0</span>] = R[i];</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">1</span>, high = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt;= high )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = ( low + high ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ( R[<span class="number">0</span>].key &lt; R[m].key ) high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; high; j-- )</span><br><span class="line">            R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">        R[j + <span class="number">1</span>] = R[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-希尔排序-又称缩小增量排序-插入类"><a href="#3-希尔排序-又称缩小增量排序-插入类" class="headerlink" title="3)希尔排序(又称缩小增量排序)(插入类)"></a>3)希尔排序(又称缩小增量排序)(插入类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当dk=1时,即为直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> dk = n / <span class="number">2</span>; dk &gt;= <span class="number">1</span>; dk /= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = dk + <span class="number">1</span>; i &lt;= n; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( R[i].key &lt; R[i - dk].key )</span><br><span class="line">            &#123;</span><br><span class="line">                R[<span class="number">0</span>] = R[i];</span><br><span class="line">            <span class="keyword">for</span> ( j = i - dk; j &gt; <span class="number">0</span> &amp;&amp; ( R[<span class="number">0</span>].key &lt; R[j].key ); j -= dk )</span><br><span class="line">                    R[j + dk] = R[j];</span><br><span class="line">                R[j + dk] = R[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-交换排序"><a href="#2-交换排序" class="headerlink" title="2.交换排序"></a>2.交换排序</h3><h4 id="1-起泡排序-冒泡排序-交换类"><a href="#1-起泡排序-冒泡排序-交换类" class="headerlink" title="1)起泡排序(冒泡排序)(交换类)"></a>1)起泡排序(冒泡排序)(交换类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = n; j &gt; i; j-- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (R[j].key &lt; R[j<span class="number">-1</span>].key )</span><br><span class="line">            &#123;</span><br><span class="line">                swap( R[j], R[j - <span class="number">1</span>] );</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !flag ) <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-快速排序-交换类"><a href="#2-快速排序-交换类" class="headerlink" title="2)快速排序:(交换类)"></a>2)快速排序:(交换类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Partition</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快排</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( low &gt;= high ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> pivotpos = Partition( R, low, high );</span><br><span class="line">    QuickSort( R, low, pivotpos - <span class="number">1</span> );</span><br><span class="line">    QuickSort( R, pivotpos + <span class="number">1</span>, high );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 划分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Partition</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElemType pivot = R[low];</span><br><span class="line">    <span class="keyword">while</span> ( low &lt; high )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high &amp;&amp; R[high].key &gt;= pivot.key ) high--;</span><br><span class="line">        R[low] = R[high];</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high &amp;&amp; R[low].key &lt;= pivot.key ) low++;</span><br><span class="line">        R[high] = R[low];</span><br><span class="line">    &#125;</span><br><span class="line">    R[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h3><h4 id="1-简单选择排序-选择类"><a href="#1-简单选择排序-选择类" class="headerlink" title="1)简单选择排序(选择类)"></a>1)简单选择排序(选择类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( R[j].key &lt; R[min].key ) min = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( min != i ) swap( R[i], R[min] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-堆排序-选择类"><a href="#2-堆排序-选择类" class="headerlink" title="2)堆排序(选择类)"></a>2)堆排序(选择类)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">( ElemType R[], <span class="keyword">int</span> s, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt; <span class="number">0</span>; i-- )</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">( R, i, n )</span></span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i-- )</span><br><span class="line">    &#123;</span><br><span class="line">        swap( R[i], R[<span class="number">1</span>] );</span><br><span class="line">        AdjustDown( R, <span class="number">1</span>, i - <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">( ElemType R[], <span class="keyword">int</span> s, <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    R[<span class="number">0</span>] = R[s];</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> * s; i &lt;= n; i *= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &lt; n&amp;&amp;R[i].key &lt; R[i + <span class="number">1</span>].key ) i++;</span><br><span class="line">        <span class="keyword">if</span> (R[<span class="number">0</span>].key  &gt;=R[i].key ) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            R[s] = R[i]; s = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    R[s] = R[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向上调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustUp</span><span class="params">( ElemType R[], <span class="keyword">int</span> s )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    R[<span class="number">0</span>] = R[s];</span><br><span class="line">    <span class="keyword">int</span> p = s / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> ( p &gt;&amp;&amp; R[p].key &lt; R[<span class="number">0</span>].key )</span><br><span class="line">    &#123;</span><br><span class="line">        R[s] = R[p];</span><br><span class="line">        s = p;</span><br><span class="line">        p /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    R[s] = R[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-归并排序-归并类"><a href="#4-归并排序-归并类" class="headerlink" title="4.归并排序(归并类)"></a>4.归并排序(归并类)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( low &gt;= high ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = ( low + high ) / <span class="number">2</span>;</span><br><span class="line">    MergeSort( R, low, mid );</span><br><span class="line">    MergeSort( R, mid + <span class="number">1</span>, high );</span><br><span class="line">    Merge( R, low, mid, high );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElemType B[MAXSIZE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span> ( i = low; i &lt;= high; i++ )</span><br><span class="line">        B[i] = R[i];</span><br><span class="line">    i = k = low, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= mid &amp;&amp; j &lt;= high )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( B[i].key &lt;= B[j].key )</span><br><span class="line">            R[k++] = B[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R[k++] = B[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= mid ) R[k++] = B[i++];</span><br><span class="line">    <span class="keyword">while</span> ( j &lt;= high ) R[k++] = B[j++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-综合题-算法"><a href="#二-综合题-算法" class="headerlink" title="二.综合题(算法)"></a>二.综合题(算法)</h2><p>1.设顺序表用数组R[]表示,表中存储在数组下标1~m+n的范围内,前m个元素递增有序,后n个元素递增有序,设计一个算法,使得整个顺序表有序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">( ElemType R[], <span class="keyword">int</span> m, <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= m + n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( R[i].key &lt; R[i - <span class="number">1</span>].key )</span><br><span class="line">        &#123;</span><br><span class="line">            R[<span class="number">0</span>] = R[i];</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; <span class="number">0</span> &amp;&amp; ( R[<span class="number">0</span>].key &lt; R[j].key ); j-- )</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">            R[j + <span class="number">1</span>] = R[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.计数排序:对表进行排序并将结果放到另一个新的表中,要求表中所有关键码互不相同<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountSort</span><span class="params">( ElemType A[], ElemType B[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++ )</span><br><span class="line">            <span class="keyword">if</span> ( A[i].key &gt; A[j].key )cnt++;</span><br><span class="line">        B[cnt] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.双向冒泡排序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思想:第一趟通过交换把最大的放最后,第二趟通过交换把最小的放最前,反复进行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">( ElemType A[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = n - <span class="number">1</span>, i;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> ( low &lt; high &amp;&amp; flag )</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = low; i &lt; high; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i]&gt;A[i+<span class="number">1</span>] )</span><br><span class="line">            &#123;</span><br><span class="line">                swap( A[i], A[i + <span class="number">1</span>] ); flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high--;</span><br><span class="line">        <span class="keyword">for</span> ( i = high; i &gt; low; i-- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( A[i] &lt; A[i - <span class="number">1</span>] )</span><br><span class="line">            &#123;</span><br><span class="line">                swap( A[i], A[i - <span class="number">1</span>] ); flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        low++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.单链表的简单选择排序(假设不带表头结点)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">( LinkList&amp; L )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList h, p, s, pre, r;</span><br><span class="line">    h = L;</span><br><span class="line">    <span class="keyword">while</span> ( h )</span><br><span class="line">    &#123;</span><br><span class="line">        p = s = h; pre = r = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 找最大结点s</span></span><br><span class="line">        <span class="keyword">while</span> ( p )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data&gt;s-&gt;data )</span><br><span class="line">            &#123;</span><br><span class="line">                s = p; r = pre;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 脱链</span></span><br><span class="line">        <span class="keyword">if</span> ( s == h ) h = h-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> r-&gt;next = s-&gt;next;</span><br><span class="line">        <span class="comment">// 头插法</span></span><br><span class="line">        s-&gt;next = L; L = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.顺序表中有n个不同整数(下标1~n),设计算法把所有奇数移动到偶数前面(时,空都最少)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">( ElemType A[], <span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>, high = n;</span><br><span class="line">    <span class="keyword">while</span> ( low &lt; high )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high&amp;&amp;A[low] % <span class="number">2</span> ) low++;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high &amp;&amp; A[high] % <span class="number">2</span> == <span class="number">0</span> ) high--;</span><br><span class="line">        <span class="keyword">if</span> ( low &lt; high )</span><br><span class="line">        &#123;</span><br><span class="line">            swap( A[low], A[high] );</span><br><span class="line">            low++; high--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.在顺序表中找出第k小的元素(时空最少)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思想:划分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = R[low];</span><br><span class="line">    <span class="keyword">while</span> ( low &lt; high )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high &amp;&amp; R[high].key &gt;= pivot.key ) high--;</span><br><span class="line">        R[low] = R[high];</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high&amp;&amp; R[low].key &lt;= pivot.key ) low++;</span><br><span class="line">            R[high] = R[low];</span><br><span class="line">    &#125;</span><br><span class="line">    R[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">Kth_elem</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivotpos = Partition( R, low, high );</span><br><span class="line">    <span class="keyword">if</span> ( pivotpos == k ) <span class="keyword">return</span> R[pivotpos];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( pivotpos &gt; k ) <span class="keyword">return</span> Kth_elem( R, low, pivotpos - <span class="number">1</span>, k );</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Kth_elem( R, pivotpos + <span class="number">1</span>, high, k );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.n个正整数构成的集合A,将其划分为两个不相交的子集$A1,A2$,元素个数分别是n1和n2.A1和A2中元素之和分别为S1和S2.设计一个时空高效算法,使|n1-n2|最小且|s1-s1|最大.(下标从1开始)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">( ElemType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = R[low];</span><br><span class="line">    <span class="keyword">while</span> ( low &lt; high )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high &amp;&amp; R[high].key &gt;= pivot.key ) high--;</span><br><span class="line">        R[low] = R[high];</span><br><span class="line">        <span class="keyword">while</span> ( low &lt; high&amp;&amp; R[low].key &lt;= pivot.key ) low++;</span><br><span class="line">        R[high] = R[low];</span><br><span class="line">    &#125;</span><br><span class="line">    R[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SetPartition</span><span class="params">( ElemType R[], <span class="keyword">int</span> n, <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = n / <span class="number">2</span>, s1, s2, i;</span><br><span class="line">    <span class="keyword">int</span> pivotpos = Partition( R, low, high );</span><br><span class="line">    <span class="keyword">if</span> ( pivotpos == k )</span><br><span class="line">    &#123;</span><br><span class="line">        s1 = s2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= k; i++ ) s1 += R[i];</span><br><span class="line">        <span class="keyword">for</span> ( j = k + <span class="number">1</span>; j &lt;= n; j++ ) s2 += R[j];</span><br><span class="line">        <span class="keyword">return</span> s2 - s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( pivotpos &gt; k )</span><br><span class="line">        <span class="keyword">return</span> SetPartition( R, n, low, pivotpos - <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> SetPartition( R, n, pivotpos + <span class="number">1</span>, high );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-排序算法&quot;&gt;&lt;a href=&quot;#一-排序算法&quot; class=&quot;headerlink&quot; title=&quot;一.排序算法&quot;&gt;&lt;/a&gt;一.排序算法&lt;/h2&gt;&lt;h3 id=&quot;1-插入排序&quot;&gt;&lt;a href=&quot;#1-插入排序&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="algorithm" scheme="https://brianyi.github.io/categories/algorithm/"/>
    
    
      <category term="排序" scheme="https://brianyi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]133.克隆图</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-133-%E5%85%8B%E9%9A%86%E5%9B%BE/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-133-克隆图/</id>
    <published>2019-05-06T13:21:48.000Z</published>
    <updated>2019-05-06T13:27:25.958Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-133-克隆图/453425-20190430181854853-2091334093.png"><h3 id="方法一-dfs-递归"><a href="#方法一-dfs-递归" class="headerlink" title="方法一:dfs(递归)"></a>方法一:dfs(递归)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;Node*,Node*&gt; dict;</span><br><span class="line"><span class="function">Node* <span class="title">clone</span><span class="params">(Node* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">if</span> (dict.count(node)) <span class="keyword">return</span> dict[node];</span><br><span class="line">    dict[node]=<span class="keyword">new</span> Node(node-&gt;val,<span class="built_in">vector</span>&lt;Node*&gt;&#123;&#125;);　　<span class="comment">// 这里不能写clone(node),会导致死循环,记住,在new的时候千万不要再递归,递归最低层一定有一个明确结果,所以要把截止条件写清楚</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:node-&gt;neighbors)</span><br><span class="line">        dict[node]-&gt;neighbors.push_back(clone(it));</span><br><span class="line">    <span class="keyword">return</span> dict[node];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> clone(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-dfs-非递归"><a href="#方法二-dfs-非递归" class="headerlink" title="方法二:dfs(非递归)"></a>方法二:dfs(非递归)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;Node*,Node*&gt; dict;</span><br><span class="line"><span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; S;</span><br><span class="line">    S.push(node);</span><br><span class="line">    <span class="keyword">while</span> (!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node *p = S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="keyword">if</span> (!dict.count(p))　　<span class="comment">// 从栈中出来的都是没有进行访问过的点</span></span><br><span class="line">            dict[p]=<span class="keyword">new</span> Node(p-&gt;val,<span class="built_in">vector</span>&lt;Node*&gt;&#123;&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it:p-&gt;neighbors)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dict.count(it))　　<span class="comment">// 判断是否已经访问过该点</span></span><br><span class="line">            &#123;</span><br><span class="line">                dict[it]=<span class="keyword">new</span> Node(it-&gt;val,<span class="built_in">vector</span>&lt;Node*&gt;&#123;&#125;);</span><br><span class="line">                S.push(it);</span><br><span class="line">            &#125;</span><br><span class="line">            dict[p]-&gt;neighbors.push_back(dict[it]);　　<span class="comment">// 将新点的拷贝放入neighbors中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dict[node];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-133-克隆图/453425-20190430181854853-2091334093.png&quot;&gt;
&lt;h3 id=&quot;方法一-dfs-递归&quot;&gt;&lt;a href=&quot;#方法一-dfs-递归&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="dfs" scheme="https://brianyi.github.io/tags/dfs/"/>
    
      <category term="图" scheme="https://brianyi.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]138.复制带随机指针的链表</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-138-复制带随机指针的链表/</id>
    <published>2019-05-06T13:20:18.000Z</published>
    <updated>2019-05-06T14:43:56.130Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-138-复制带随机指针的链表/453425-20190430193735900-662137168.png"><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一:递归"></a>方法一:递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;Node*,Node*&gt; dict;</span><br><span class="line"><span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">if</span> (dict.count(head)) <span class="keyword">return</span> dict[head];</span><br><span class="line">    dict[head]=<span class="keyword">new</span> Node(head-&gt;val, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    dict[head]-&gt;next=copyRandomList(head-&gt;next);</span><br><span class="line">    dict[head]-&gt;random=copyRandomList(head-&gt;random);</span><br><span class="line">    <span class="keyword">return</span> dict[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-非递归"><a href="#方法二-非递归" class="headerlink" title="方法二:非递归"></a>方法二:非递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;Node*,Node*&gt; m;</span><br><span class="line">    Node *p=head;</span><br><span class="line">    <span class="keyword">while</span>(p)    <span class="comment">// make a copy of nodes</span></span><br><span class="line">    &#123;</span><br><span class="line">        m[p]=<span class="keyword">new</span> Node(p-&gt;val,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p=head;</span><br><span class="line">    <span class="keyword">while</span>(p)    <span class="comment">// link everyone and fill the random field</span></span><br><span class="line">    &#123;</span><br><span class="line">        m[p]-&gt;next=m[p-&gt;next];</span><br><span class="line">        m[p]-&gt;random=m[p-&gt;random];</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-138-复制带随机指针的链表/453425-20190430193735900-662137168.png&quot;&gt;
&lt;h3 id=&quot;方法一-递归&quot;&gt;&lt;a href=&quot;#方法一-递归&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="链表" scheme="https://brianyi.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]144.二叉树的前序遍历</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-144-二叉树的前序遍历/</id>
    <published>2019-05-06T13:17:07.000Z</published>
    <updated>2019-05-06T13:19:44.482Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-144-二叉树的前序遍历/453425-20190501113746021-447522744.png"><p>前往二叉树的:前序,中序,后序 遍历算法</p><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一:递归"></a>方法一:递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    res.push_back(root-&gt;val);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) preorderTraversal(root-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) preorderTraversal(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-非递归"><a href="#方法二-非递归" class="headerlink" title="方法二:非递归"></a>方法二:非递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    TreeNode* p = root;</span><br><span class="line">    <span class="keyword">while</span>(p||!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p)  <span class="comment">// 访问左子树</span></span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(p-&gt;val);</span><br><span class="line">            S.push(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">// 访问右子树</span></span><br><span class="line">        &#123;</span><br><span class="line">            p=S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三-非递归-该方法可用于后序遍历-需要修改几处代码"><a href="#方法三-非递归-该方法可用于后序遍历-需要修改几处代码" class="headerlink" title="方法三:非递归(该方法可用于后序遍历,需要修改几处代码)"></a>方法三:非递归(该方法可用于后序遍历,需要修改几处代码)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    S.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        root=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) S.push(root-&gt;right);  <span class="comment">// 要实现后序遍历,需要以下两行调换</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) S.push(root-&gt;left);</span><br><span class="line">        res.push_back(root-&gt;val);   <span class="comment">// res.insert(0,root-&gt;val)即为后序遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论:</p><ul><li>方法三这种形式只适合前序和后序遍历,不适合中序遍历,中序遍历较为麻烦</li><li>方法二这种形式只适合前序和中序遍历,不适合后序遍历,后序遍历较为麻烦</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-144-二叉树的前序遍历/453425-20190501113746021-447522744.png&quot;&gt;
&lt;p&gt;前往二叉树的:前序,中序,后序 遍历算法&lt;/p&gt;
&lt;h3 id=&quot;方法一-递归&quot;&gt;&lt;a href=&quot;#方
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="https://brianyi.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]94.二叉树的中序遍历</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-94-二叉树的中序遍历/</id>
    <published>2019-05-06T13:14:44.000Z</published>
    <updated>2019-05-06T14:20:07.345Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-94-二叉树的中序遍历/453425-20190501120139941-1568037684.png"><p>前往二叉树的:<a href>前序</a>,<a href>中序</a>,<a href>后序</a> 遍历算法</p><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一:递归"></a>方法一:递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) inorderTraversal(root-&gt;left);      </span><br><span class="line">    res.push_back(root-&gt;val);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) inorderTraversal(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-非递归"><a href="#方法二-非递归" class="headerlink" title="方法二:非递归"></a>方法二:非递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    TreeNode* p = root;</span><br><span class="line">    <span class="keyword">while</span>(p||!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            S.push(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p=S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            res.push_back(p-&gt;val);</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-94-二叉树的中序遍历/453425-20190501120139941-1568037684.png&quot;&gt;
&lt;p&gt;前往二叉树的:&lt;a href&gt;前序&lt;/a&gt;,&lt;a href&gt;中序&lt;/a&gt;,&lt;a href&gt;后序&lt;/a&gt; 
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="https://brianyi.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]145.二叉树的后序遍历</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-145-二叉树的后序遍历/</id>
    <published>2019-05-06T13:12:06.000Z</published>
    <updated>2019-05-06T13:14:29.228Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-145-二叉树的后序遍历/453425-20190501122117295-85727166.png"><p>前往二叉树的:前序,中序,后序 遍历算法</p><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一:递归"></a>方法一:递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) postorderTraversal(root-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) postorderTraversal(root-&gt;right);</span><br><span class="line">    res.push_back(root-&gt;val);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-非递归"><a href="#方法二-非递归" class="headerlink" title="方法二:非递归"></a>方法二:非递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    TreeNode* p=root, *r=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p||!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            S.push(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p=S.top();</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right&amp;&amp;p-&gt;right!=r)</span><br><span class="line">                p=p-&gt;right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                S.pop();</span><br><span class="line">                res.push_back(p-&gt;val);</span><br><span class="line">                r=p;</span><br><span class="line">                p=<span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方法三-非递归"><a href="#方法三-非递归" class="headerlink" title="方法三:非递归"></a>方法三:非递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    TreeNode* p=root;</span><br><span class="line">    S.push(p);</span><br><span class="line">    <span class="keyword">while</span> (!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        p=S.top();</span><br><span class="line">        S.pop();</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;left) S.push(p-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;right) S.push(p-&gt;right);</span><br><span class="line">        res.insert(res.begin(),p-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-145-二叉树的后序遍历/453425-20190501122117295-85727166.png&quot;&gt;
&lt;p&gt;前往二叉树的:前序,中序,后序 遍历算法&lt;/p&gt;
&lt;h3 id=&quot;方法一-递归&quot;&gt;&lt;a href=&quot;#方法
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="https://brianyi.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]968.监控二叉树</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-968-%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-968-监控二叉树/</id>
    <published>2019-05-06T13:08:13.000Z</published>
    <updated>2019-05-06T13:11:46.627Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-968-监控二叉树/453425-20190501230642291-677698823.png"><p>解题思路: 由于叶子节点一定不要安装监视器,这样才能使总监视器数量比较少,因此需要从下往上进行判断当前节点的状态(共:3种状态):</p><ul><li>0: 当前节点安装了监视器</li><li>1: 当前节点可观,但没有安装监视器</li><li>2: 当前节点不可观<br>对于空节点,我们认为是可观,但没有安装监视器,因此,叶子节点就为不可观的了,设想一个节点的左右孩子(为空)都可观且没有安装监视器,那该节点必然是不可观即2</li></ul><p>有了以上对空节点和叶子节点的处理,我们再来正式分析非终端节点:</p><ul><li>若一个节点的左孩子或右孩子不可观,那么该节点必然不可观,需要安装监视器,因此返回0状态</li><li>若一个节点的左孩子或右孩子都可观且至少有一个安装了监视器,那么该节点必然是可观的,返回1状态</li><li>若一个节点的左右孩子都可观且没安装监视器,那么该节点必然是不可观的,返回2状态<br>记住,我们以上的分析都是基于从整个二叉树的叶子节点往根部,即从下往上进行,而且要做的就是将不可观的节点变得可观才行(因此要根据左右孩子的节点的状态来判断当前节点状态并做出调整)</li></ul><p>这里可能会有疑惑,以上的第一条得出当前节点不可观,然后安装了监视器,而第三条也得出当前节点不可观,但却没有安装监视器,而是直接返回的2状态(当前节点不可观).这是为什么?</p><p>因为,对于第一条,因为左右孩子都不可观,为了让左右孩子都可观,则必须给当前节点安装监视器才行,而第三条中,左右孩子都是可观的(没有安装监视器),当前节点的可以直接返回不可观状态,因为后面可以由他的父节点进行摄像头安装,使其变得可观.</p><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一:递归"></a>方法一:递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0：该节点安装了监视器 1：该节点可观，但没有安装监视器 2：该节点不可观</span></span><br><span class="line"><span class="keyword">int</span> monitor = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">state</span><span class="params">(TreeNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> left  = state(node-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> right = state(node-&gt;right);</span><br><span class="line">    <span class="comment">// 该节点为0的情况</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">2</span> || right == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        monitor++;  <span class="comment">// 由于左或右节点不可观,则需要给当前节点安装监视器,为0状态</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="comment">// 为1的情况</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="number">0</span> || right == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">// 当(left!=2&amp;&amp;right!=2)时,才会进行该判断,也就是左右节点一定是可观的,再判断是否有一个安装了监视器,如有安装,则当前节点就不需要安装监视器也可观了,为1状态</span></span><br><span class="line">    <span class="comment">// 为2的情况</span></span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">// 其他:党(left!=2&amp;&amp;right!=2)&amp;&amp;(left!=0&amp;&amp;right!=0),即left==1&amp;&amp;right==1时,左右节点都可观,但没有监视器,当前节点不可观,为2状态</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCameraCover</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (state(root) == <span class="number">2</span>) monitor++;    <span class="comment">// 如果根节点为2的状态,需要加一个监视器</span></span><br><span class="line">    <span class="keyword">return</span> monitor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:这里的if,else if,else的顺序是不能变的,先判断左右都是不可观的,再就是都可观,左或右至少有一个为监视器,最后才是都可观都无监视器.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-968-监控二叉树/453425-20190501230642291-677698823.png&quot;&gt;
&lt;p&gt;解题思路: 由于叶子节点一定不要安装监视器,这样才能使总监视器数量比较少,因此需要从下往上进行判断当前节点的状
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="dp" scheme="https://brianyi.github.io/tags/dp/"/>
    
      <category term="二叉树" scheme="https://brianyi.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]106.从中序与后序遍历序列构造二叉树</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-106-从中序与后序遍历序列构造二叉树/</id>
    <published>2019-05-06T12:16:02.000Z</published>
    <updated>2019-05-06T13:27:31.595Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-106-从中序与后序遍历序列构造二叉树/453425-20190502213938801-1912607084.png"><p>前往 中序,后序遍历构造二叉树, 中序,前序遍历构造二叉树<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;postorder, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1&gt;r1) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> x = postorder[r2], i = <span class="number">0</span>;   <span class="comment">// 确定当前根节点</span></span><br><span class="line">    <span class="keyword">for</span> (i = l1; i &lt;= r1 &amp;&amp; inorder[i] != x; ++i);  <span class="comment">// 在中序遍历序列中找到当前根节点位置(该位置可以划分出左右两个分支)</span></span><br><span class="line">    <span class="keyword">int</span> llen = i - l1;  <span class="comment">// 左子树结点数量</span></span><br><span class="line">    <span class="keyword">int</span> rlen = r1 - i;  <span class="comment">// 右子树结点数量</span></span><br><span class="line">    TreeNode* p = <span class="keyword">new</span> TreeNode(x);  <span class="comment">// 建立根节点</span></span><br><span class="line">    p-&gt;left = build(inorder, l1, l1 + llen - <span class="number">1</span>, postorder, l2, l2 + llen - <span class="number">1</span>);  <span class="comment">// 递归建立左子树,-1,-1是把当前根节点位置去掉</span></span><br><span class="line">    p-&gt;right = build(inorder, r1 - rlen + <span class="number">1</span>, r1, postorder, r2 - rlen, r2 - <span class="number">1</span>); <span class="comment">// 递归建立右子树,+1,-1是把当前根节点位置去掉</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inorder.empty()||postorder.empty()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> build(inorder, <span class="number">0</span>, inorder.size() - <span class="number">1</span>, postorder, <span class="number">0</span>, postorder.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-106-从中序与后序遍历序列构造二叉树/453425-20190502213938801-1912607084.png&quot;&gt;
&lt;p&gt;前往 中序,后序遍历构造二叉树, 中序,前序遍历构造二叉树&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="https://brianyi.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]105.从前序与中序遍历序列构造二叉树</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-105-从前序与中序遍历序列构造二叉树/</id>
    <published>2019-05-06T12:14:01.000Z</published>
    <updated>2019-05-06T12:15:26.558Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-105-从前序与中序遍历序列构造二叉树/453425-20190502215802448-663626721.png"><p>前往 中序,后序遍历构造二叉树, 中序,前序遍历构造二叉树<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1&gt;r1) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> x=preorder[l1], i=<span class="number">0</span>;    <span class="comment">// 确定当前根节点</span></span><br><span class="line">    <span class="keyword">for</span>(i=l2;inorder[i]!=x&amp;&amp;i&lt;r2;++i);  <span class="comment">// 在中序遍历序列中找到当前根节点位置(该位置可以划分出左右两个分支)</span></span><br><span class="line">    <span class="keyword">int</span> llen=i-l2;  <span class="comment">// 左子树结点数量</span></span><br><span class="line">    <span class="keyword">int</span> rlen=r2-i;  <span class="comment">// 右子树结点数量</span></span><br><span class="line">    TreeNode *p = <span class="keyword">new</span> TreeNode(x);  <span class="comment">// 建立根节点</span></span><br><span class="line">    p-&gt;left = build(preorder, l1+<span class="number">1</span>, l1+llen, inorder, l2, l2+llen<span class="number">-1</span>);   <span class="comment">// 递归建立左子树,+1,-1是把当前根节点位置去掉</span></span><br><span class="line">    p-&gt;right= build(preorder, r1-rlen+<span class="number">1</span>, r1, inorder, r2-rlen+<span class="number">1</span>, r2);   <span class="comment">// 递归建立右子树,+1,+1是把当前根节点位置去掉</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(preorder, <span class="number">0</span>, preorder.size()<span class="number">-1</span>, inorder, <span class="number">0</span>, inorder.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-105-从前序与中序遍历序列构造二叉树/453425-20190502215802448-663626721.png&quot;&gt;
&lt;p&gt;前往 中序,后序遍历构造二叉树, 中序,前序遍历构造二叉树&lt;br&gt;&lt;figure clas
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="https://brianyi.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]114.二叉树展开为链表</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-114-二叉树展开为链表/</id>
    <published>2019-05-06T12:12:04.000Z</published>
    <updated>2019-05-06T12:13:26.706Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-114-二叉树展开为链表/453425-20190502231706813-609020347.png"><p>思路:递归,将左子树变成单链表形式,再将右子树变成单链表形式,最后将左子树单链表的末端连接到右子树单链表表头,将根节点的左孩子置空</p><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一: 递归"></a>方法一: 递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    flatten(root-&gt;left);    <span class="comment">// 将左子树变成单链表形式</span></span><br><span class="line">    flatten(root-&gt;right);   <span class="comment">// 将右子树变成单链表形式</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) <span class="comment">// 将左子树单链表的末端连接到右子树单链表表头</span></span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* p=root-&gt;left;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;right) p=p-&gt;right;</span><br><span class="line">        p-&gt;right=root-&gt;right;</span><br><span class="line">        root-&gt;right=root-&gt;left;</span><br><span class="line">        root-&gt;left=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-114-二叉树展开为链表/453425-20190502231706813-609020347.png&quot;&gt;
&lt;p&gt;思路:递归,将左子树变成单链表形式,再将右子树变成单链表形式,最后将左子树单链表的末端连接到右子树单链表
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="https://brianyi.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]239.滑动窗口最大值</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-239-滑动窗口最大值/</id>
    <published>2019-05-06T12:10:15.000Z</published>
    <updated>2019-05-06T12:11:33.534Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-239-滑动窗口最大值/453425-20190503094513334-1691572073.png"><p>思路:滑动窗口的思想,只要是求连续子序列或者子串问题,都可用滑动窗口的思想</p><h3 id="方法一-滑动窗口"><a href="#方法一-滑动窗口" class="headerlink" title="方法一: 滑动窗口"></a>方法一: 滑动窗口</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (nums.size()==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq;　　</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;nums.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(!dq.empty()&amp;&amp;nums[i]&gt;nums[dq.back()]) <span class="comment">//在尾部添加元素，并保证左边元素都比尾部大</span></span><br><span class="line">            dq.pop_back();</span><br><span class="line">        dq.push_back(i);</span><br><span class="line">        <span class="keyword">if</span> (i-k==dq.front())    <span class="comment">//在头部移除元素</span></span><br><span class="line">            dq.pop_front();</span><br><span class="line">        <span class="keyword">if</span> (i&gt;=k<span class="number">-1</span>)</span><br><span class="line">            res.push_back(nums[dq.front()]);    <span class="comment">// 存放每次窗口内的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-239-滑动窗口最大值/453425-20190503094513334-1691572073.png&quot;&gt;
&lt;p&gt;思路:滑动窗口的思想,只要是求连续子序列或者子串问题,都可用滑动窗口的思想&lt;/p&gt;
&lt;h3 id=&quot;方法
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="滑动窗口" scheme="https://brianyi.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]76.最小覆盖子串</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-76-最小覆盖子串/</id>
    <published>2019-05-06T12:08:01.000Z</published>
    <updated>2019-05-06T12:09:32.405Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-76-最小覆盖子串/453425-20190503105807149-1455260747.png"><p>思路:滑动窗口思想</p><h3 id="方法一-滑动窗口"><a href="#方法一-滑动窗口" class="headerlink" title="方法一:滑动窗口"></a>方法一:滑动窗口</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.tdict记录T中每个字母与字母个数</span></span><br><span class="line">    <span class="comment">// 2.维护一个滑动窗口字母的计数表sdict,计数当前窗口内T中字母出现的次数</span></span><br><span class="line">    <span class="comment">// 3.当窗口内T中字母出现的次数大于等于T中每个字母出现的次数一样,这时第一个最短子串出现,再逐步从左边缩短窗口,直到不满足上述条件,然后再从右边扩大窗口,直到满足条件时,再进行最短子串长度对比,一直更新最短长度子串直到结束</span></span><br><span class="line">    <span class="keyword">if</span> (s.size()&lt;t.size()||s.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; tdict,sdict;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,k=t.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:t)  <span class="comment">// 填充T的字母与字母计数表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tdict.count(it)) tdict[it]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tdict[it]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> res=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;s.size();++r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tdict.count(s[r])) <span class="comment">// 有字符,则进行记录</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!sdict.count(s[r]))</span><br><span class="line">                sdict[s[r]]=<span class="number">0</span>;</span><br><span class="line">            sdict[s[r]]++;</span><br><span class="line">            <span class="keyword">if</span> (sdict[s[r]]&lt;=tdict[s[r]])</span><br><span class="line">                k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(k==<span class="number">0</span>) <span class="comment">// 满足条件,滑动窗口从左边逐步缩短,直到剔除第一个属于T中的字符为止</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.empty()||r-l+<span class="number">1</span>&lt;res.size())  <span class="comment">// 最短子串更新</span></span><br><span class="line">                res=s.substr(l,r-l+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(tdict.count(s[l]))</span><br><span class="line">            &#123;</span><br><span class="line">                sdict[s[l]]--;</span><br><span class="line">                <span class="keyword">if</span> (sdict[s[l]]&lt;tdict[s[l]])</span><br><span class="line">                    k++;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-76-最小覆盖子串/453425-20190503105807149-1455260747.png&quot;&gt;
&lt;p&gt;思路:滑动窗口思想&lt;/p&gt;
&lt;h3 id=&quot;方法一-滑动窗口&quot;&gt;&lt;a href=&quot;#方法一-滑动窗口&quot; cl
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="滑动窗口" scheme="https://brianyi.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]3.无重复字符的最长子串</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-3-无重复字符的最长子串/</id>
    <published>2019-05-06T12:05:28.000Z</published>
    <updated>2019-05-06T14:39:45.897Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-3-无重复字符的最长子串/453425-20190503112154412-1836563639.png"><p>思路:滑动窗口的思想</p><h3 id="方法一-滑动窗口"><a href="#方法一-滑动窗口" class="headerlink" title="方法一:滑动窗口"></a>方法一:滑动窗口</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        控制一个滑动窗口,窗口内的字符都是不重复的,通过set可以做到判断字符是否重复</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">size_t</span> maxL=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;r&lt;s.size();++r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">set</span>.count(s[r]))   <span class="comment">// 当前判断的元素不存在于滑动窗口[l,r-1]中</span></span><br><span class="line">            <span class="built_in">set</span>.insert(s[r]);   <span class="comment">// 将元素放入滑动窗口(即记录不重复字符)</span></span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">// 当前判断的元素已经存在于滑动窗口[l,r-1]中</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">set</span>.count(s[r]))  <span class="comment">// 从左缩短窗口,直到剔除当前判断的元素为止</span></span><br><span class="line">                <span class="built_in">set</span>.erase(s[l++]);</span><br><span class="line">            <span class="built_in">set</span>.insert(s[r]);   <span class="comment">// 将当前判断元素放入到滑动窗口中</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxL=max(maxL,<span class="built_in">set</span>.size());  <span class="comment">// 更新无重复字符的最长子串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-3-无重复字符的最长子串/453425-20190503112154412-1836563639.png&quot;&gt;
&lt;p&gt;思路:滑动窗口的思想&lt;/p&gt;
&lt;h3 id=&quot;方法一-滑动窗口&quot;&gt;&lt;a href=&quot;#方法一-滑动窗口
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="滑动窗口" scheme="https://brianyi.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]1028.从先序遍历还原二叉树</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-1028-%E4%BB%8E%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-1028-从先序遍历还原二叉树/</id>
    <published>2019-05-06T12:00:45.000Z</published>
    <updated>2019-05-06T12:05:01.645Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-1028-从先序遍历还原二叉树/453425-20190503131537591-466226739.png"><p>思路:用一个栈来管理树的层次关系,索引代表节点的深度</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">recoverFromPreorder</span><span class="params">(<span class="built_in">string</span> S)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        由题意知,最上层节点深度为0(数字前面0条横线),而第二层节点前有1条横线,表示深度为1</span></span><br><span class="line"><span class="comment">        树的前序遍历: 根-左-右</span></span><br><span class="line"><span class="comment">        因此,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (S.empty()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;TreeNode*&gt; <span class="built_in">stack</span>;  <span class="comment">// 结果栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,depth=<span class="number">0</span>,val=<span class="number">0</span>;i&lt;S.size();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(depth=<span class="number">0</span>;i&lt;S.size()&amp;&amp;S[i]==<span class="string">'-'</span>;++i)  <span class="comment">// 计算节点的深度</span></span><br><span class="line">            depth++;</span><br><span class="line">        <span class="keyword">for</span>(val=<span class="number">0</span>;i&lt;S.size()&amp;&amp;S[i]!=<span class="string">'-'</span>;++i)    <span class="comment">// 计算数值</span></span><br><span class="line">            val=val*<span class="number">10</span>+S[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">stack</span>.size()&gt;depth)    <span class="comment">// 若当前栈的长度(树的高度)大于节点的深度,则可以把栈中最后几个节点pop掉(这些节点各已经成为完整的子树,可以pop掉了)</span></span><br><span class="line">            <span class="built_in">stack</span>.pop_back();</span><br><span class="line">        TreeNode* node=<span class="keyword">new</span> TreeNode(val);   <span class="comment">// 新建节点用于存放当前深度的结点</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">stack</span>.empty()) <span class="comment">// 节点间关联</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">stack</span>.back()-&gt;left)      <span class="built_in">stack</span>.back()-&gt;left=node;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">stack</span>.back()-&gt;right) <span class="built_in">stack</span>.back()-&gt;right=node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stack</span>.push_back(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-1028-从先序遍历还原二叉树/453425-20190503131537591-466226739.png&quot;&gt;
&lt;p&gt;思路:用一个栈来管理树的层次关系,索引代表节点的深度&lt;/p&gt;
&lt;h3 id=&quot;方法一&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="树" scheme="https://brianyi.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]5040.边框着色</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-5040-%E8%BE%B9%E6%A1%86%E7%9D%80%E8%89%B2/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-5040-边框着色/</id>
    <published>2019-05-06T11:39:46.000Z</published>
    <updated>2019-05-06T12:02:58.944Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-5040-边框着色/453425-20190430173552247-46622747.png"><h3 id="方法一：dfs的非递归形式"><a href="#方法一：dfs的非递归形式" class="headerlink" title="方法一：dfs的非递归形式"></a>方法一：dfs的非递归形式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">50L</span>L;</span><br><span class="line"><span class="built_in">unordered_set</span>&lt;ll&gt; vis,mark;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; colorBorder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; G, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0, <span class="keyword">int</span> color) &#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt; Q;</span><br><span class="line">    Q.push(r0*MAXN+c0);</span><br><span class="line">    <span class="keyword">int</span> c=G[r0][c0];</span><br><span class="line">    <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Q.front()/MAXN;</span><br><span class="line">        <span class="keyword">int</span> y=Q.front()%MAXN;</span><br><span class="line">        Q.pop();</span><br><span class="line">        vis.insert(x*MAXN+y);</span><br><span class="line">        <span class="keyword">if</span> (x==<span class="number">0</span>||x==G.size()<span class="number">-1</span>||y==<span class="number">0</span>||y==G[<span class="number">0</span>].size()<span class="number">-1</span>)    <span class="comment">// 边界方块可变色</span></span><br><span class="line">            mark.insert(x*MAXN+y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (G[x<span class="number">-1</span>][y]!=c||G[x+<span class="number">1</span>][y]!=c||G[x][y<span class="number">-1</span>]!=c||G[x][y+<span class="number">1</span>]!=c)    <span class="comment">// 四个方向中,任意一个方块颜色不同,则可变色</span></span><br><span class="line">            mark.insert(x*MAXN+y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;<span class="number">4</span>;d++)   <span class="comment">// 放入连通分量的所有方块</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nx=x+dx[d],ny=y+dy[d];</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;G.size()&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;G[<span class="number">0</span>].size()&amp;&amp;!vis.count(nx*MAXN+ny)&amp;&amp;G[nx][ny]==c)</span><br><span class="line">                Q.push(nx*MAXN+ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it:mark)</span><br><span class="line">        G[it/MAXN][it%MAXN]=color;</span><br><span class="line">    <span class="keyword">return</span> G;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路:用vis记录访问过的方块,mark标记连通分量中需要修改颜色的方块,并非连通分量中所有的方块都要修改颜色,比如:一个方块如果四周(四个方向邻接的)都是相同颜色,那么只需要修改四周方块的颜色,而自己颜色不变(开始的时候没理解题意,以为只要是连通分量内的方块颜色都需要改变)</p><h3 id="方法二-dfs递归形式-只不过把上面的非递归改为递归了"><a href="#方法二-dfs递归形式-只不过把上面的非递归改为递归了" class="headerlink" title="方法二: dfs递归形式,只不过把上面的非递归改为递归了"></a>方法二: dfs递归形式,只不过把上面的非递归改为递归了</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll MAXN=<span class="number">50L</span>L;</span><br><span class="line"><span class="built_in">unordered_set</span>&lt;ll&gt; vis,mark;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; G, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    vis.insert(x*MAXN+y);</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">0</span>||x==G.size()<span class="number">-1</span>||y==<span class="number">0</span>||y==G[<span class="number">0</span>].size()<span class="number">-1</span>)    <span class="comment">// 边界方块可变色</span></span><br><span class="line">        mark.insert(x*MAXN+y);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (G[x<span class="number">-1</span>][y]!=c||G[x+<span class="number">1</span>][y]!=c||G[x][y<span class="number">-1</span>]!=c||G[x][y+<span class="number">1</span>]!=c)    <span class="comment">// 四个方向中,任意一个方块颜色不同,则可变色</span></span><br><span class="line">        mark.insert(x*MAXN+y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;<span class="number">4</span>;d++)   <span class="comment">// 放入连通分量的所有方块</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nx=x+dx[d],ny=y+dy[d];</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;G.size()&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;G[<span class="number">0</span>].size()&amp;&amp;!vis.count(nx*MAXN+ny)&amp;&amp;G[nx][ny]==c)</span><br><span class="line">            dfs(G,nx,ny,c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; colorBorder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; G, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0, <span class="keyword">int</span> color) &#123;</span><br><span class="line">    dfs(G,r0,c0,G[r0][c0]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it:mark)</span><br><span class="line">        G[it/MAXN][it%MAXN]=color;</span><br><span class="line">    <span class="keyword">return</span> G;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三-dfs递归-但通过修改G中的数据-来记录是否访问过-和是否需要修改颜色-国外的一个大佬写的"><a href="#方法三-dfs递归-但通过修改G中的数据-来记录是否访问过-和是否需要修改颜色-国外的一个大佬写的" class="headerlink" title="方法三:dfs递归,但通过修改G中的数据,来记录是否访问过,和是否需要修改颜色,国外的一个大佬写的"></a>方法三:dfs递归,但通过修改G中的数据,来记录是否访问过,和是否需要修改颜色,国外的一个<a href="https://leetcode.com/problems/coloring-a-border/discuss/282847/C%2B%2B-with-picture-DFS" target="_blank" rel="noopener">大佬</a>写的</h3><p>From an initial point, perform DFS and flip the cell color to negative to track visited cells.<br>After DFS is complete for the cell, check if this cell is inside. If so, flip its color back to the positive.<br>In the end, cells with the negative color are on the border. Change their color to the target color.<br><img src="/2019/05/06/leetcode-5040-边框着色/image_1556425139.png"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; g, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> cl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> || r &gt;= g.size() || c &gt;= g[r].size() || g[r][c] != cl) <span class="keyword">return</span>;    <span class="comment">// 剪枝(越界,非着色块)</span></span><br><span class="line">    g[r][c] = -cl;    <span class="comment">// 着色</span></span><br><span class="line">    dfs(g, r - <span class="number">1</span>, c, cl), dfs(g, r + <span class="number">1</span>, c, cl), dfs(g, r, c - <span class="number">1</span>, cl), dfs(g, r, c + <span class="number">1</span>, cl);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; <span class="number">0</span> &amp;&amp; r &lt; g.size() - <span class="number">1</span> &amp;&amp; c &gt; <span class="number">0</span> &amp;&amp; c &lt; g[r].size() - <span class="number">1</span> &amp;&amp; cl == <span class="built_in">abs</span>(g[r - <span class="number">1</span>][c]) &amp;&amp;</span><br><span class="line">        cl == <span class="built_in">abs</span>(g[r + <span class="number">1</span>][c]) &amp;&amp; cl == <span class="built_in">abs</span>(g[r][c - <span class="number">1</span>]) &amp;&amp; cl == <span class="built_in">abs</span>(g[r][c + <span class="number">1</span>]))    <span class="comment">// 将原四周同色的块,颜色还原</span></span><br><span class="line">        g[r][c] = cl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; colorBorder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0, <span class="keyword">int</span> color) &#123;</span><br><span class="line">    dfs(grid, r0, c0, grid[r0][c0]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; grid.size(); ++i)    <span class="comment">// 根据dfs标记(负数)过的方块进行着色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j = <span class="number">0</span>; j &lt; grid[i].size(); ++j) grid[i][j] = grid[i][j] &lt; <span class="number">0</span> ? color : grid[i][j];</span><br><span class="line">    <span class="keyword">return</span> grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结论: 无论是递归还是非递归,先标记(标记vis),再遍历</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-5040-边框着色/453425-20190430173552247-46622747.png&quot;&gt;
&lt;h3 id=&quot;方法一：dfs的非递归形式&quot;&gt;&lt;a href=&quot;#方法一：dfs的非递归形式&quot; class=&quot;head
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="dfs" scheme="https://brianyi.github.io/tags/dfs/"/>
    
      <category term="图" scheme="https://brianyi.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>[leetcode]5.最长回文子串</title>
    <link href="https://brianyi.github.io/2019/05/06/leetcode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://brianyi.github.io/2019/05/06/leetcode-5-最长回文子串/</id>
    <published>2019-05-06T10:05:20.000Z</published>
    <updated>2019-05-07T03:14:37.772Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/05/06/leetcode-5-最长回文子串/453425-20190505125039549-1852205917.png"><h3 id="方法一-中心扩展算法"><a href="#方法一-中心扩展算法" class="headerlink" title="方法一:中心扩展算法"></a>方法一:中心扩展算法</h3><p>解题思路:从左到右每一个字符都作为中心轴,然后逐渐往两边扩展,只要发现有不相等的字符,则确定了以该字符为轴的最长回文串,但需要考虑长度为奇数和偶数的不同情况的处理(长度为偶数时轴心为中间两个数的中心,长度为奇数时轴心为中间那个数)</p><p>算法时间复杂度: $O(n^{2})$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, maxL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)　　<span class="comment">// i为轴的位置,j为回文串半径</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i - j &gt;= <span class="number">0</span> &amp;&amp; i + j &lt; s.size(); ++j)    <span class="comment">// 奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i - j] != s[i + j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * j + <span class="number">1</span> &gt; maxL)</span><br><span class="line">            &#123;</span><br><span class="line">                maxL = <span class="number">2</span> * j + <span class="number">1</span>;</span><br><span class="line">                idx = i - j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i - j &gt;= <span class="number">0</span> &amp;&amp; i + j + <span class="number">1</span> &lt; s.size(); ++j)    <span class="comment">// 偶数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i-j]!=s[i+j+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * j + <span class="number">2</span> &gt; maxL)</span><br><span class="line">            &#123;</span><br><span class="line">                maxL = <span class="number">2</span> * j + <span class="number">2</span>;</span><br><span class="line">                idx = i - j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substr(idx, maxL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="方法二-manacher-马拉车法"><a href="#方法二-manacher-马拉车法" class="headerlink" title="方法二: manacher(马拉车法)"></a>方法二: manacher(马拉车法)</h3><p>解题思路:详见<a href="https://www.luogu.org/problemnew/solution/P3805" target="_blank" rel="noopener">P3805【模板】manacher算法</a><br>为了使奇数串和偶数串一致性处理,首先进行字符填充,使其成为奇数串,即在每个字符的前后填充字符,例如:<br>原串: ABCCBA<br>填充后: ~#A#B#C#C#B#A#<br>原始串在数组中的位置:</p><table><thead><tr><th style="text-align:center">A</th><th style="text-align:left">B</th><th style="text-align:center">C</th><th style="text-align:center">C</th><th style="text-align:center">B</th><th style="text-align:center">A</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td></tr></tbody></table><p>填充串在数组中的位置</p><table><thead><tr><th style="text-align:center">~</th><th style="text-align:center">#</th><th style="text-align:center">A</th><th style="text-align:center">#</th><th style="text-align:center">B</th><th style="text-align:center">#</th><th style="text-align:center">C</th><th style="text-align:center">#</th><th style="text-align:center">C</th><th style="text-align:center">#</th><th style="text-align:center">B</th><th style="text-align:center">#</th><th style="text-align:center">A</th><th style="text-align:center">#</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td></tr></tbody></table><p>首先说明: </p><ul><li>奇数+偶数=奇数, 因此,奇数串填充偶数个#后为奇数串,偶数串填充奇数个#后为奇数串</li><li>~字符用来作为边界,用处在于进行两边扩展时做为结束条件</li><li>填充串中字符的最大回文半径 - 1 = 原字符串中该字符的回文串长度</li></ul><p>关于上述第3条我需要解释一下:</p><table><thead><tr><th style="text-align:center">s_copy</th><th style="text-align:center">~</th><th style="text-align:center">#</th><th style="text-align:center">A</th><th style="text-align:center">#</th><th style="text-align:center">B</th><th style="text-align:center">#</th><th style="text-align:center">C</th><th style="text-align:center">#</th><th style="text-align:center">C</th><th style="text-align:center">#</th><th style="text-align:center">B</th><th style="text-align:center">#</th><th style="text-align:center">A</th><th style="text-align:center">#</th></tr></thead><tbody><tr><td style="text-align:center">index</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">pos</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">7</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><p>可以看到index=7的位置,#对应的p为7(即最大回文半径),即在C与C之间,表示原字符串中该字符的回文长度为6,那么原字符串ABCCBA的前面3个字符ABC构成的回文串长度为6</p><blockquote><p>该题思路:</p><ol><li>字符串填充统一为奇数串</li><li>Manacher法,从左到右遍历每个字符<ol><li>记录每个字符的最大回文半径</li><li>确定已经记录的最大回文串右边界r,和中间轴m</li><li>当前字符s[i]是否能关于m找到一个对称点,即要满足:m&lt;=i&lt;=r<ol><li>能:则得到一个有可能的最大回文半径,并从该半径开始扩展</li><li>否:则从新计算最大回文半径</li></ol></li></ol></li></ol></blockquote><p>算法时间复杂度为: $O(n)$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pos[<span class="number">2005</span>],p[<span class="number">2005</span>];  <span class="comment">// pos用于记录填充串与原始字串的位置关系,p用于记录填充串当前字符的最大回文半径</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">    <span class="comment">/* 填充字符,统一为奇数串 */</span></span><br><span class="line">    <span class="built_in">string</span> s_new=<span class="string">"~"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">1</span>;i&lt;s.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        s_new+=<span class="string">"#"</span>;</span><br><span class="line">        s_new+=s[i];</span><br><span class="line">        pos[k++]=i;</span><br><span class="line">        pos[k++]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    s_new+=<span class="string">"#"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* manacher */</span></span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">0</span>,r=<span class="number">0</span>,maxL=<span class="number">0</span>,idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s_new.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取已知的最大回文半径,p[i]用于记录填充串对应字符的最大回文半径</span></span><br><span class="line">        <span class="keyword">if</span> (i&lt;r)</span><br><span class="line">            p[i]=min(p[<span class="number">2</span>*m-i],r-i); <span class="comment">// 当m&lt;=i&lt;=r时,i关于m中心轴对称的点为2*m-i,而p[2*m-i]是一定已经知道的</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i]=<span class="number">1</span>; <span class="comment">// 如果i超出了已知的最大回文右边界,则比如不能找到关于m对称的点,只能重新计算最大回文半径</span></span><br><span class="line">        <span class="comment">// 暴力拓展左右两侧,计算当前的最大回文半径</span></span><br><span class="line">        <span class="keyword">while</span> (s_new[i-p[i]]==s_new[i+p[i]])</span><br><span class="line">            p[i]++;</span><br><span class="line">        <span class="comment">// 新的回文半径比较大,则更新</span></span><br><span class="line">        <span class="keyword">if</span> (r-i&lt;p[i])</span><br><span class="line">        &#123;</span><br><span class="line">            m=i;</span><br><span class="line">            r=i+p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新回文长度(原始字串的回文长度为新字串回文半径-1)</span></span><br><span class="line">        <span class="keyword">if</span> (p[i]<span class="number">-1</span>&gt;=maxL)</span><br><span class="line">        &#123;</span><br><span class="line">            maxL=p[i]<span class="number">-1</span>;</span><br><span class="line">            idx=pos[i]-maxL/<span class="number">2</span>;  <span class="comment">// 更新原始回文字串的起始位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substr(idx,maxL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/05/06/leetcode-5-最长回文子串/453425-20190505125039549-1852205917.png&quot;&gt;
&lt;h3 id=&quot;方法一-中心扩展算法&quot;&gt;&lt;a href=&quot;#方法一-中心扩展算法&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="OJ" scheme="https://brianyi.github.io/categories/OJ/"/>
    
    
      <category term="leetcode" scheme="https://brianyi.github.io/tags/leetcode/"/>
    
      <category term="回文串" scheme="https://brianyi.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
</feed>
